var snarkjs = (function (exports) {
    'use strict';

    /* global BigInt */
    const hexLen = [ 0, 1, 2, 2, 3, 3, 3, 3, 4 ,4 ,4 ,4 ,4 ,4 ,4 ,4];

    function fromString$3(s, radix) {
        if ((!radix)||(radix==10)) {
            return BigInt(s);
        } else if (radix==16) {
            if (s.slice(0,2) == "0x") {
                return BigInt(s);
            } else {
                return BigInt("0x"+s);
            }
        }
    }

    const e$2 = fromString$3;

    function fromArray$3(a, radix) {
        let acc =BigInt(0);
        radix = BigInt(radix);
        for (let i=0; i<a.length; i++) {
            acc = acc*radix + BigInt(a[i]);
        }
        return acc;
    }

    function bitLength$2(a) {
        const aS =a.toString(16);
        return (aS.length-1)*4 +hexLen[parseInt(aS[0], 16)];
    }

    function isNegative$2(a) {
        return BigInt(a) < BigInt(0);
    }

    function isZero$2(a) {
        return !a;
    }

    function shiftLeft$2(a, n) {
        return BigInt(a) << BigInt(n);
    }

    function shiftRight$2(a, n) {
        return BigInt(a) >> BigInt(n);
    }

    const shl$2 = shiftLeft$2;
    const shr$2 = shiftRight$2;

    function isOdd$2(a) {
        return (BigInt(a) & BigInt(1)) == BigInt(1);
    }


    function naf$2(n) {
        let E = BigInt(n);
        const res = [];
        while (E) {
            if (E & BigInt(1)) {
                const z = 2 - Number(E % BigInt(4));
                res.push( z );
                E = E - BigInt(z);
            } else {
                res.push( 0 );
            }
            E = E >> BigInt(1);
        }
        return res;
    }


    function bits$2(n) {
        let E = BigInt(n);
        const res = [];
        while (E) {
            if (E & BigInt(1)) {
                res.push(1);
            } else {
                res.push( 0 );
            }
            E = E >> BigInt(1);
        }
        return res;
    }

    function toNumber$3(s) {
        if (s>BigInt(Number.MAX_SAFE_INTEGER )) {
            throw new Error("Number too big");
        }
        return Number(s);
    }

    function toArray$2(s, radix) {
        const res = [];
        let rem = BigInt(s);
        radix = BigInt(radix);
        while (rem) {
            res.unshift( Number(rem % radix));
            rem = rem / radix;
        }
        return res;
    }


    function add$2(a, b) {
        return BigInt(a) + BigInt(b);
    }

    function sub$2(a, b) {
        return BigInt(a) - BigInt(b);
    }

    function neg$2(a) {
        return -BigInt(a);
    }

    function mul$2(a, b) {
        return BigInt(a) * BigInt(b);
    }

    function square$2(a) {
        return BigInt(a) * BigInt(a);
    }

    function pow$2(a, b) {
        return BigInt(a) ** BigInt(b);
    }

    function exp$3(a, b) {
        return BigInt(a) ** BigInt(b);
    }

    function abs$2(a) {
        return BigInt(a) >= 0 ? BigInt(a) : -BigInt(a);
    }

    function div$2(a, b) {
        return BigInt(a) / BigInt(b);
    }

    function mod$2(a, b) {
        return BigInt(a) % BigInt(b);
    }

    function eq$2(a, b) {
        return BigInt(a) == BigInt(b);
    }

    function neq$2(a, b) {
        return BigInt(a) != BigInt(b);
    }

    function lt$2(a, b) {
        return BigInt(a) < BigInt(b);
    }

    function gt$2(a, b) {
        return BigInt(a) > BigInt(b);
    }

    function leq$2(a, b) {
        return BigInt(a) <= BigInt(b);
    }

    function geq$2(a, b) {
        return BigInt(a) >= BigInt(b);
    }

    function band$2(a, b) {
        return BigInt(a) & BigInt(b);
    }

    function bor$2(a, b) {
        return BigInt(a) | BigInt(b);
    }

    function bxor$2(a, b) {
        return BigInt(a) ^ BigInt(b);
    }

    function land$2(a, b) {
        return BigInt(a) && BigInt(b);
    }

    function lor$2(a, b) {
        return BigInt(a) || BigInt(b);
    }

    function lnot$2(a) {
        return !BigInt(a);
    }

    var Scalar_native = /*#__PURE__*/Object.freeze({
        __proto__: null,
        fromString: fromString$3,
        e: e$2,
        fromArray: fromArray$3,
        bitLength: bitLength$2,
        isNegative: isNegative$2,
        isZero: isZero$2,
        shiftLeft: shiftLeft$2,
        shiftRight: shiftRight$2,
        shl: shl$2,
        shr: shr$2,
        isOdd: isOdd$2,
        naf: naf$2,
        bits: bits$2,
        toNumber: toNumber$3,
        toArray: toArray$2,
        add: add$2,
        sub: sub$2,
        neg: neg$2,
        mul: mul$2,
        square: square$2,
        pow: pow$2,
        exp: exp$3,
        abs: abs$2,
        div: div$2,
        mod: mod$2,
        eq: eq$2,
        neq: neq$2,
        lt: lt$2,
        gt: gt$2,
        leq: leq$2,
        geq: geq$2,
        band: band$2,
        bor: bor$2,
        bxor: bxor$2,
        land: land$2,
        lor: lor$2,
        lnot: lnot$2
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var BigInteger = createCommonjsModule(function (module) {
    var bigInt = (function (undefined$1) {

        var BASE = 1e7,
            LOG_BASE = 7,
            MAX_INT = 9007199254740992,
            MAX_INT_ARR = smallToArray(MAX_INT),
            DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";

        var supportsNativeBigInt = typeof BigInt === "function";

        function Integer(v, radix, alphabet, caseSensitive) {
            if (typeof v === "undefined") return Integer[0];
            if (typeof radix !== "undefined") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);
            return parseValue(v);
        }

        function BigInteger(value, sign) {
            this.value = value;
            this.sign = sign;
            this.isSmall = false;
        }
        BigInteger.prototype = Object.create(Integer.prototype);

        function SmallInteger(value) {
            this.value = value;
            this.sign = value < 0;
            this.isSmall = true;
        }
        SmallInteger.prototype = Object.create(Integer.prototype);

        function NativeBigInt(value) {
            this.value = value;
        }
        NativeBigInt.prototype = Object.create(Integer.prototype);

        function isPrecise(n) {
            return -MAX_INT < n && n < MAX_INT;
        }

        function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes
            if (n < 1e7)
                return [n];
            if (n < 1e14)
                return [n % 1e7, Math.floor(n / 1e7)];
            return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];
        }

        function arrayToSmall(arr) { // If BASE changes this function may need to change
            trim(arr);
            var length = arr.length;
            if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
                switch (length) {
                    case 0: return 0;
                    case 1: return arr[0];
                    case 2: return arr[0] + arr[1] * BASE;
                    default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;
                }
            }
            return arr;
        }

        function trim(v) {
            var i = v.length;
            while (v[--i] === 0);
            v.length = i + 1;
        }

        function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger
            var x = new Array(length);
            var i = -1;
            while (++i < length) {
                x[i] = 0;
            }
            return x;
        }

        function truncate(n) {
            if (n > 0) return Math.floor(n);
            return Math.ceil(n);
        }

        function add(a, b) { // assumes a and b are arrays with a.length >= b.length
            var l_a = a.length,
                l_b = b.length,
                r = new Array(l_a),
                carry = 0,
                base = BASE,
                sum, i;
            for (i = 0; i < l_b; i++) {
                sum = a[i] + b[i] + carry;
                carry = sum >= base ? 1 : 0;
                r[i] = sum - carry * base;
            }
            while (i < l_a) {
                sum = a[i] + carry;
                carry = sum === base ? 1 : 0;
                r[i++] = sum - carry * base;
            }
            if (carry > 0) r.push(carry);
            return r;
        }

        function addAny(a, b) {
            if (a.length >= b.length) return add(a, b);
            return add(b, a);
        }

        function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT
            var l = a.length,
                r = new Array(l),
                base = BASE,
                sum, i;
            for (i = 0; i < l; i++) {
                sum = a[i] - base + carry;
                carry = Math.floor(sum / base);
                r[i] = sum - carry * base;
                carry += 1;
            }
            while (carry > 0) {
                r[i++] = carry % base;
                carry = Math.floor(carry / base);
            }
            return r;
        }

        BigInteger.prototype.add = function (v) {
            var n = parseValue(v);
            if (this.sign !== n.sign) {
                return this.subtract(n.negate());
            }
            var a = this.value, b = n.value;
            if (n.isSmall) {
                return new BigInteger(addSmall(a, Math.abs(b)), this.sign);
            }
            return new BigInteger(addAny(a, b), this.sign);
        };
        BigInteger.prototype.plus = BigInteger.prototype.add;

        SmallInteger.prototype.add = function (v) {
            var n = parseValue(v);
            var a = this.value;
            if (a < 0 !== n.sign) {
                return this.subtract(n.negate());
            }
            var b = n.value;
            if (n.isSmall) {
                if (isPrecise(a + b)) return new SmallInteger(a + b);
                b = smallToArray(Math.abs(b));
            }
            return new BigInteger(addSmall(b, Math.abs(a)), a < 0);
        };
        SmallInteger.prototype.plus = SmallInteger.prototype.add;

        NativeBigInt.prototype.add = function (v) {
            return new NativeBigInt(this.value + parseValue(v).value);
        };
        NativeBigInt.prototype.plus = NativeBigInt.prototype.add;

        function subtract(a, b) { // assumes a and b are arrays with a >= b
            var a_l = a.length,
                b_l = b.length,
                r = new Array(a_l),
                borrow = 0,
                base = BASE,
                i, difference;
            for (i = 0; i < b_l; i++) {
                difference = a[i] - borrow - b[i];
                if (difference < 0) {
                    difference += base;
                    borrow = 1;
                } else borrow = 0;
                r[i] = difference;
            }
            for (i = b_l; i < a_l; i++) {
                difference = a[i] - borrow;
                if (difference < 0) difference += base;
                else {
                    r[i++] = difference;
                    break;
                }
                r[i] = difference;
            }
            for (; i < a_l; i++) {
                r[i] = a[i];
            }
            trim(r);
            return r;
        }

        function subtractAny(a, b, sign) {
            var value;
            if (compareAbs(a, b) >= 0) {
                value = subtract(a, b);
            } else {
                value = subtract(b, a);
                sign = !sign;
            }
            value = arrayToSmall(value);
            if (typeof value === "number") {
                if (sign) value = -value;
                return new SmallInteger(value);
            }
            return new BigInteger(value, sign);
        }

        function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT
            var l = a.length,
                r = new Array(l),
                carry = -b,
                base = BASE,
                i, difference;
            for (i = 0; i < l; i++) {
                difference = a[i] + carry;
                carry = Math.floor(difference / base);
                difference %= base;
                r[i] = difference < 0 ? difference + base : difference;
            }
            r = arrayToSmall(r);
            if (typeof r === "number") {
                if (sign) r = -r;
                return new SmallInteger(r);
            } return new BigInteger(r, sign);
        }

        BigInteger.prototype.subtract = function (v) {
            var n = parseValue(v);
            if (this.sign !== n.sign) {
                return this.add(n.negate());
            }
            var a = this.value, b = n.value;
            if (n.isSmall)
                return subtractSmall(a, Math.abs(b), this.sign);
            return subtractAny(a, b, this.sign);
        };
        BigInteger.prototype.minus = BigInteger.prototype.subtract;

        SmallInteger.prototype.subtract = function (v) {
            var n = parseValue(v);
            var a = this.value;
            if (a < 0 !== n.sign) {
                return this.add(n.negate());
            }
            var b = n.value;
            if (n.isSmall) {
                return new SmallInteger(a - b);
            }
            return subtractSmall(b, Math.abs(a), a >= 0);
        };
        SmallInteger.prototype.minus = SmallInteger.prototype.subtract;

        NativeBigInt.prototype.subtract = function (v) {
            return new NativeBigInt(this.value - parseValue(v).value);
        };
        NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;

        BigInteger.prototype.negate = function () {
            return new BigInteger(this.value, !this.sign);
        };
        SmallInteger.prototype.negate = function () {
            var sign = this.sign;
            var small = new SmallInteger(-this.value);
            small.sign = !sign;
            return small;
        };
        NativeBigInt.prototype.negate = function () {
            return new NativeBigInt(-this.value);
        };

        BigInteger.prototype.abs = function () {
            return new BigInteger(this.value, false);
        };
        SmallInteger.prototype.abs = function () {
            return new SmallInteger(Math.abs(this.value));
        };
        NativeBigInt.prototype.abs = function () {
            return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
        };


        function multiplyLong(a, b) {
            var a_l = a.length,
                b_l = b.length,
                l = a_l + b_l,
                r = createArray(l),
                base = BASE,
                product, carry, i, a_i, b_j;
            for (i = 0; i < a_l; ++i) {
                a_i = a[i];
                for (var j = 0; j < b_l; ++j) {
                    b_j = b[j];
                    product = a_i * b_j + r[i + j];
                    carry = Math.floor(product / base);
                    r[i + j] = product - carry * base;
                    r[i + j + 1] += carry;
                }
            }
            trim(r);
            return r;
        }

        function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE
            var l = a.length,
                r = new Array(l),
                base = BASE,
                carry = 0,
                product, i;
            for (i = 0; i < l; i++) {
                product = a[i] * b + carry;
                carry = Math.floor(product / base);
                r[i] = product - carry * base;
            }
            while (carry > 0) {
                r[i++] = carry % base;
                carry = Math.floor(carry / base);
            }
            return r;
        }

        function shiftLeft(x, n) {
            var r = [];
            while (n-- > 0) r.push(0);
            return r.concat(x);
        }

        function multiplyKaratsuba(x, y) {
            var n = Math.max(x.length, y.length);

            if (n <= 30) return multiplyLong(x, y);
            n = Math.ceil(n / 2);

            var b = x.slice(n),
                a = x.slice(0, n),
                d = y.slice(n),
                c = y.slice(0, n);

            var ac = multiplyKaratsuba(a, c),
                bd = multiplyKaratsuba(b, d),
                abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));

            var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));
            trim(product);
            return product;
        }

        // The following function is derived from a surface fit of a graph plotting the performance difference
        // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.
        function useKaratsuba(l1, l2) {
            return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;
        }

        BigInteger.prototype.multiply = function (v) {
            var n = parseValue(v),
                a = this.value, b = n.value,
                sign = this.sign !== n.sign,
                abs;
            if (n.isSmall) {
                if (b === 0) return Integer[0];
                if (b === 1) return this;
                if (b === -1) return this.negate();
                abs = Math.abs(b);
                if (abs < BASE) {
                    return new BigInteger(multiplySmall(a, abs), sign);
                }
                b = smallToArray(abs);
            }
            if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes
                return new BigInteger(multiplyKaratsuba(a, b), sign);
            return new BigInteger(multiplyLong(a, b), sign);
        };

        BigInteger.prototype.times = BigInteger.prototype.multiply;

        function multiplySmallAndArray(a, b, sign) { // a >= 0
            if (a < BASE) {
                return new BigInteger(multiplySmall(b, a), sign);
            }
            return new BigInteger(multiplyLong(b, smallToArray(a)), sign);
        }
        SmallInteger.prototype._multiplyBySmall = function (a) {
            if (isPrecise(a.value * this.value)) {
                return new SmallInteger(a.value * this.value);
            }
            return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);
        };
        BigInteger.prototype._multiplyBySmall = function (a) {
            if (a.value === 0) return Integer[0];
            if (a.value === 1) return this;
            if (a.value === -1) return this.negate();
            return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);
        };
        SmallInteger.prototype.multiply = function (v) {
            return parseValue(v)._multiplyBySmall(this);
        };
        SmallInteger.prototype.times = SmallInteger.prototype.multiply;

        NativeBigInt.prototype.multiply = function (v) {
            return new NativeBigInt(this.value * parseValue(v).value);
        };
        NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;

        function square(a) {
            //console.assert(2 * BASE * BASE < MAX_INT);
            var l = a.length,
                r = createArray(l + l),
                base = BASE,
                product, carry, i, a_i, a_j;
            for (i = 0; i < l; i++) {
                a_i = a[i];
                carry = 0 - a_i * a_i;
                for (var j = i; j < l; j++) {
                    a_j = a[j];
                    product = 2 * (a_i * a_j) + r[i + j] + carry;
                    carry = Math.floor(product / base);
                    r[i + j] = product - carry * base;
                }
                r[i + l] = carry;
            }
            trim(r);
            return r;
        }

        BigInteger.prototype.square = function () {
            return new BigInteger(square(this.value), false);
        };

        SmallInteger.prototype.square = function () {
            var value = this.value * this.value;
            if (isPrecise(value)) return new SmallInteger(value);
            return new BigInteger(square(smallToArray(Math.abs(this.value))), false);
        };

        NativeBigInt.prototype.square = function (v) {
            return new NativeBigInt(this.value * this.value);
        };

        function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.
            var a_l = a.length,
                b_l = b.length,
                base = BASE,
                result = createArray(b.length),
                divisorMostSignificantDigit = b[b_l - 1],
                // normalization
                lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),
                remainder = multiplySmall(a, lambda),
                divisor = multiplySmall(b, lambda),
                quotientDigit, shift, carry, borrow, i, l, q;
            if (remainder.length <= a_l) remainder.push(0);
            divisor.push(0);
            divisorMostSignificantDigit = divisor[b_l - 1];
            for (shift = a_l - b_l; shift >= 0; shift--) {
                quotientDigit = base - 1;
                if (remainder[shift + b_l] !== divisorMostSignificantDigit) {
                    quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
                }
                // quotientDigit <= base - 1
                carry = 0;
                borrow = 0;
                l = divisor.length;
                for (i = 0; i < l; i++) {
                    carry += quotientDigit * divisor[i];
                    q = Math.floor(carry / base);
                    borrow += remainder[shift + i] - (carry - q * base);
                    carry = q;
                    if (borrow < 0) {
                        remainder[shift + i] = borrow + base;
                        borrow = -1;
                    } else {
                        remainder[shift + i] = borrow;
                        borrow = 0;
                    }
                }
                while (borrow !== 0) {
                    quotientDigit -= 1;
                    carry = 0;
                    for (i = 0; i < l; i++) {
                        carry += remainder[shift + i] - base + divisor[i];
                        if (carry < 0) {
                            remainder[shift + i] = carry + base;
                            carry = 0;
                        } else {
                            remainder[shift + i] = carry;
                            carry = 1;
                        }
                    }
                    borrow += carry;
                }
                result[shift] = quotientDigit;
            }
            // denormalization
            remainder = divModSmall(remainder, lambda)[0];
            return [arrayToSmall(result), arrayToSmall(remainder)];
        }

        function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/
            // Performs faster than divMod1 on larger input sizes.
            var a_l = a.length,
                b_l = b.length,
                result = [],
                part = [],
                base = BASE,
                guess, xlen, highx, highy, check;
            while (a_l) {
                part.unshift(a[--a_l]);
                trim(part);
                if (compareAbs(part, b) < 0) {
                    result.push(0);
                    continue;
                }
                xlen = part.length;
                highx = part[xlen - 1] * base + part[xlen - 2];
                highy = b[b_l - 1] * base + b[b_l - 2];
                if (xlen > b_l) {
                    highx = (highx + 1) * base;
                }
                guess = Math.ceil(highx / highy);
                do {
                    check = multiplySmall(b, guess);
                    if (compareAbs(check, part) <= 0) break;
                    guess--;
                } while (guess);
                result.push(guess);
                part = subtract(part, check);
            }
            result.reverse();
            return [arrayToSmall(result), arrayToSmall(part)];
        }

        function divModSmall(value, lambda) {
            var length = value.length,
                quotient = createArray(length),
                base = BASE,
                i, q, remainder, divisor;
            remainder = 0;
            for (i = length - 1; i >= 0; --i) {
                divisor = remainder * base + value[i];
                q = truncate(divisor / lambda);
                remainder = divisor - q * lambda;
                quotient[i] = q | 0;
            }
            return [quotient, remainder | 0];
        }

        function divModAny(self, v) {
            var value, n = parseValue(v);
            if (supportsNativeBigInt) {
                return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];
            }
            var a = self.value, b = n.value;
            var quotient;
            if (b === 0) throw new Error("Cannot divide by zero");
            if (self.isSmall) {
                if (n.isSmall) {
                    return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];
                }
                return [Integer[0], self];
            }
            if (n.isSmall) {
                if (b === 1) return [self, Integer[0]];
                if (b == -1) return [self.negate(), Integer[0]];
                var abs = Math.abs(b);
                if (abs < BASE) {
                    value = divModSmall(a, abs);
                    quotient = arrayToSmall(value[0]);
                    var remainder = value[1];
                    if (self.sign) remainder = -remainder;
                    if (typeof quotient === "number") {
                        if (self.sign !== n.sign) quotient = -quotient;
                        return [new SmallInteger(quotient), new SmallInteger(remainder)];
                    }
                    return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];
                }
                b = smallToArray(abs);
            }
            var comparison = compareAbs(a, b);
            if (comparison === -1) return [Integer[0], self];
            if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];

            // divMod1 is faster on smaller input sizes
            if (a.length + b.length <= 200)
                value = divMod1(a, b);
            else value = divMod2(a, b);

            quotient = value[0];
            var qSign = self.sign !== n.sign,
                mod = value[1],
                mSign = self.sign;
            if (typeof quotient === "number") {
                if (qSign) quotient = -quotient;
                quotient = new SmallInteger(quotient);
            } else quotient = new BigInteger(quotient, qSign);
            if (typeof mod === "number") {
                if (mSign) mod = -mod;
                mod = new SmallInteger(mod);
            } else mod = new BigInteger(mod, mSign);
            return [quotient, mod];
        }

        BigInteger.prototype.divmod = function (v) {
            var result = divModAny(this, v);
            return {
                quotient: result[0],
                remainder: result[1]
            };
        };
        NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;


        BigInteger.prototype.divide = function (v) {
            return divModAny(this, v)[0];
        };
        NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {
            return new NativeBigInt(this.value / parseValue(v).value);
        };
        SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;

        BigInteger.prototype.mod = function (v) {
            return divModAny(this, v)[1];
        };
        NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {
            return new NativeBigInt(this.value % parseValue(v).value);
        };
        SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;

        BigInteger.prototype.pow = function (v) {
            var n = parseValue(v),
                a = this.value,
                b = n.value,
                value, x, y;
            if (b === 0) return Integer[1];
            if (a === 0) return Integer[0];
            if (a === 1) return Integer[1];
            if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];
            if (n.sign) {
                return Integer[0];
            }
            if (!n.isSmall) throw new Error("The exponent " + n.toString() + " is too large.");
            if (this.isSmall) {
                if (isPrecise(value = Math.pow(a, b)))
                    return new SmallInteger(truncate(value));
            }
            x = this;
            y = Integer[1];
            while (true) {
                if (b & 1 === 1) {
                    y = y.times(x);
                    --b;
                }
                if (b === 0) break;
                b /= 2;
                x = x.square();
            }
            return y;
        };
        SmallInteger.prototype.pow = BigInteger.prototype.pow;

        NativeBigInt.prototype.pow = function (v) {
            var n = parseValue(v);
            var a = this.value, b = n.value;
            var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);
            if (b === _0) return Integer[1];
            if (a === _0) return Integer[0];
            if (a === _1) return Integer[1];
            if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];
            if (n.isNegative()) return new NativeBigInt(_0);
            var x = this;
            var y = Integer[1];
            while (true) {
                if ((b & _1) === _1) {
                    y = y.times(x);
                    --b;
                }
                if (b === _0) break;
                b /= _2;
                x = x.square();
            }
            return y;
        };

        BigInteger.prototype.modPow = function (exp, mod) {
            exp = parseValue(exp);
            mod = parseValue(mod);
            if (mod.isZero()) throw new Error("Cannot take modPow with modulus 0");
            var r = Integer[1],
                base = this.mod(mod);
            if (exp.isNegative()) {
                exp = exp.multiply(Integer[-1]);
                base = base.modInv(mod);
            }
            while (exp.isPositive()) {
                if (base.isZero()) return Integer[0];
                if (exp.isOdd()) r = r.multiply(base).mod(mod);
                exp = exp.divide(2);
                base = base.square().mod(mod);
            }
            return r;
        };
        NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;

        function compareAbs(a, b) {
            if (a.length !== b.length) {
                return a.length > b.length ? 1 : -1;
            }
            for (var i = a.length - 1; i >= 0; i--) {
                if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;
            }
            return 0;
        }

        BigInteger.prototype.compareAbs = function (v) {
            var n = parseValue(v),
                a = this.value,
                b = n.value;
            if (n.isSmall) return 1;
            return compareAbs(a, b);
        };
        SmallInteger.prototype.compareAbs = function (v) {
            var n = parseValue(v),
                a = Math.abs(this.value),
                b = n.value;
            if (n.isSmall) {
                b = Math.abs(b);
                return a === b ? 0 : a > b ? 1 : -1;
            }
            return -1;
        };
        NativeBigInt.prototype.compareAbs = function (v) {
            var a = this.value;
            var b = parseValue(v).value;
            a = a >= 0 ? a : -a;
            b = b >= 0 ? b : -b;
            return a === b ? 0 : a > b ? 1 : -1;
        };

        BigInteger.prototype.compare = function (v) {
            // See discussion about comparison with Infinity:
            // https://github.com/peterolson/BigInteger.js/issues/61
            if (v === Infinity) {
                return -1;
            }
            if (v === -Infinity) {
                return 1;
            }

            var n = parseValue(v),
                a = this.value,
                b = n.value;
            if (this.sign !== n.sign) {
                return n.sign ? 1 : -1;
            }
            if (n.isSmall) {
                return this.sign ? -1 : 1;
            }
            return compareAbs(a, b) * (this.sign ? -1 : 1);
        };
        BigInteger.prototype.compareTo = BigInteger.prototype.compare;

        SmallInteger.prototype.compare = function (v) {
            if (v === Infinity) {
                return -1;
            }
            if (v === -Infinity) {
                return 1;
            }

            var n = parseValue(v),
                a = this.value,
                b = n.value;
            if (n.isSmall) {
                return a == b ? 0 : a > b ? 1 : -1;
            }
            if (a < 0 !== n.sign) {
                return a < 0 ? -1 : 1;
            }
            return a < 0 ? 1 : -1;
        };
        SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;

        NativeBigInt.prototype.compare = function (v) {
            if (v === Infinity) {
                return -1;
            }
            if (v === -Infinity) {
                return 1;
            }
            var a = this.value;
            var b = parseValue(v).value;
            return a === b ? 0 : a > b ? 1 : -1;
        };
        NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;

        BigInteger.prototype.equals = function (v) {
            return this.compare(v) === 0;
        };
        NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;

        BigInteger.prototype.notEquals = function (v) {
            return this.compare(v) !== 0;
        };
        NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;

        BigInteger.prototype.greater = function (v) {
            return this.compare(v) > 0;
        };
        NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;

        BigInteger.prototype.lesser = function (v) {
            return this.compare(v) < 0;
        };
        NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;

        BigInteger.prototype.greaterOrEquals = function (v) {
            return this.compare(v) >= 0;
        };
        NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;

        BigInteger.prototype.lesserOrEquals = function (v) {
            return this.compare(v) <= 0;
        };
        NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;

        BigInteger.prototype.isEven = function () {
            return (this.value[0] & 1) === 0;
        };
        SmallInteger.prototype.isEven = function () {
            return (this.value & 1) === 0;
        };
        NativeBigInt.prototype.isEven = function () {
            return (this.value & BigInt(1)) === BigInt(0);
        };

        BigInteger.prototype.isOdd = function () {
            return (this.value[0] & 1) === 1;
        };
        SmallInteger.prototype.isOdd = function () {
            return (this.value & 1) === 1;
        };
        NativeBigInt.prototype.isOdd = function () {
            return (this.value & BigInt(1)) === BigInt(1);
        };

        BigInteger.prototype.isPositive = function () {
            return !this.sign;
        };
        SmallInteger.prototype.isPositive = function () {
            return this.value > 0;
        };
        NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;

        BigInteger.prototype.isNegative = function () {
            return this.sign;
        };
        SmallInteger.prototype.isNegative = function () {
            return this.value < 0;
        };
        NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;

        BigInteger.prototype.isUnit = function () {
            return false;
        };
        SmallInteger.prototype.isUnit = function () {
            return Math.abs(this.value) === 1;
        };
        NativeBigInt.prototype.isUnit = function () {
            return this.abs().value === BigInt(1);
        };

        BigInteger.prototype.isZero = function () {
            return false;
        };
        SmallInteger.prototype.isZero = function () {
            return this.value === 0;
        };
        NativeBigInt.prototype.isZero = function () {
            return this.value === BigInt(0);
        };

        BigInteger.prototype.isDivisibleBy = function (v) {
            var n = parseValue(v);
            if (n.isZero()) return false;
            if (n.isUnit()) return true;
            if (n.compareAbs(2) === 0) return this.isEven();
            return this.mod(n).isZero();
        };
        NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;

        function isBasicPrime(v) {
            var n = v.abs();
            if (n.isUnit()) return false;
            if (n.equals(2) || n.equals(3) || n.equals(5)) return true;
            if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;
            if (n.lesser(49)) return true;
            // we don't know if it's prime: let the other functions figure it out
        }

        function millerRabinTest(n, a) {
            var nPrev = n.prev(),
                b = nPrev,
                r = 0,
                d, i, x;
            while (b.isEven()) b = b.divide(2), r++;
            next: for (i = 0; i < a.length; i++) {
                if (n.lesser(a[i])) continue;
                x = bigInt(a[i]).modPow(b, n);
                if (x.isUnit() || x.equals(nPrev)) continue;
                for (d = r - 1; d != 0; d--) {
                    x = x.square().mod(n);
                    if (x.isUnit()) return false;
                    if (x.equals(nPrev)) continue next;
                }
                return false;
            }
            return true;
        }

        // Set "strict" to true to force GRH-supported lower bound of 2*log(N)^2
        BigInteger.prototype.isPrime = function (strict) {
            var isPrime = isBasicPrime(this);
            if (isPrime !== undefined$1) return isPrime;
            var n = this.abs();
            var bits = n.bitLength();
            if (bits <= 64)
                return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
            var logN = Math.log(2) * bits.toJSNumber();
            var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);
            for (var a = [], i = 0; i < t; i++) {
                a.push(bigInt(i + 2));
            }
            return millerRabinTest(n, a);
        };
        NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;

        BigInteger.prototype.isProbablePrime = function (iterations, rng) {
            var isPrime = isBasicPrime(this);
            if (isPrime !== undefined$1) return isPrime;
            var n = this.abs();
            var t = iterations === undefined$1 ? 5 : iterations;
            for (var a = [], i = 0; i < t; i++) {
                a.push(bigInt.randBetween(2, n.minus(2), rng));
            }
            return millerRabinTest(n, a);
        };
        NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;

        BigInteger.prototype.modInv = function (n) {
            var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;
            while (!newR.isZero()) {
                q = r.divide(newR);
                lastT = t;
                lastR = r;
                t = newT;
                r = newR;
                newT = lastT.subtract(q.multiply(newT));
                newR = lastR.subtract(q.multiply(newR));
            }
            if (!r.isUnit()) throw new Error(this.toString() + " and " + n.toString() + " are not co-prime");
            if (t.compare(0) === -1) {
                t = t.add(n);
            }
            if (this.isNegative()) {
                return t.negate();
            }
            return t;
        };

        NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;

        BigInteger.prototype.next = function () {
            var value = this.value;
            if (this.sign) {
                return subtractSmall(value, 1, this.sign);
            }
            return new BigInteger(addSmall(value, 1), this.sign);
        };
        SmallInteger.prototype.next = function () {
            var value = this.value;
            if (value + 1 < MAX_INT) return new SmallInteger(value + 1);
            return new BigInteger(MAX_INT_ARR, false);
        };
        NativeBigInt.prototype.next = function () {
            return new NativeBigInt(this.value + BigInt(1));
        };

        BigInteger.prototype.prev = function () {
            var value = this.value;
            if (this.sign) {
                return new BigInteger(addSmall(value, 1), true);
            }
            return subtractSmall(value, 1, this.sign);
        };
        SmallInteger.prototype.prev = function () {
            var value = this.value;
            if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);
            return new BigInteger(MAX_INT_ARR, true);
        };
        NativeBigInt.prototype.prev = function () {
            return new NativeBigInt(this.value - BigInt(1));
        };

        var powersOfTwo = [1];
        while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
        var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];

        function shift_isSmall(n) {
            return Math.abs(n) <= BASE;
        }

        BigInteger.prototype.shiftLeft = function (v) {
            var n = parseValue(v).toJSNumber();
            if (!shift_isSmall(n)) {
                throw new Error(String(n) + " is too large for shifting.");
            }
            if (n < 0) return this.shiftRight(-n);
            var result = this;
            if (result.isZero()) return result;
            while (n >= powers2Length) {
                result = result.multiply(highestPower2);
                n -= powers2Length - 1;
            }
            return result.multiply(powersOfTwo[n]);
        };
        NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;

        BigInteger.prototype.shiftRight = function (v) {
            var remQuo;
            var n = parseValue(v).toJSNumber();
            if (!shift_isSmall(n)) {
                throw new Error(String(n) + " is too large for shifting.");
            }
            if (n < 0) return this.shiftLeft(-n);
            var result = this;
            while (n >= powers2Length) {
                if (result.isZero() || (result.isNegative() && result.isUnit())) return result;
                remQuo = divModAny(result, highestPower2);
                result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
                n -= powers2Length - 1;
            }
            remQuo = divModAny(result, powersOfTwo[n]);
            return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
        };
        NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;

        function bitwise(x, y, fn) {
            y = parseValue(y);
            var xSign = x.isNegative(), ySign = y.isNegative();
            var xRem = xSign ? x.not() : x,
                yRem = ySign ? y.not() : y;
            var xDigit = 0, yDigit = 0;
            var xDivMod = null, yDivMod = null;
            var result = [];
            while (!xRem.isZero() || !yRem.isZero()) {
                xDivMod = divModAny(xRem, highestPower2);
                xDigit = xDivMod[1].toJSNumber();
                if (xSign) {
                    xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers
                }

                yDivMod = divModAny(yRem, highestPower2);
                yDigit = yDivMod[1].toJSNumber();
                if (ySign) {
                    yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers
                }

                xRem = xDivMod[0];
                yRem = yDivMod[0];
                result.push(fn(xDigit, yDigit));
            }
            var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);
            for (var i = result.length - 1; i >= 0; i -= 1) {
                sum = sum.multiply(highestPower2).add(bigInt(result[i]));
            }
            return sum;
        }

        BigInteger.prototype.not = function () {
            return this.negate().prev();
        };
        NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;

        BigInteger.prototype.and = function (n) {
            return bitwise(this, n, function (a, b) { return a & b; });
        };
        NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;

        BigInteger.prototype.or = function (n) {
            return bitwise(this, n, function (a, b) { return a | b; });
        };
        NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;

        BigInteger.prototype.xor = function (n) {
            return bitwise(this, n, function (a, b) { return a ^ b; });
        };
        NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;

        var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;
        function roughLOB(n) { // get lowestOneBit (rough)
            // SmallInteger: return Min(lowestOneBit(n), 1 << 30)
            // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]
            var v = n.value,
                x = typeof v === "number" ? v | LOBMASK_I :
                    typeof v === "bigint" ? v | BigInt(LOBMASK_I) :
                        v[0] + v[1] * BASE | LOBMASK_BI;
            return x & -x;
        }

        function integerLogarithm(value, base) {
            if (base.compareTo(value) <= 0) {
                var tmp = integerLogarithm(value, base.square(base));
                var p = tmp.p;
                var e = tmp.e;
                var t = p.multiply(base);
                return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };
            }
            return { p: bigInt(1), e: 0 };
        }

        BigInteger.prototype.bitLength = function () {
            var n = this;
            if (n.compareTo(bigInt(0)) < 0) {
                n = n.negate().subtract(bigInt(1));
            }
            if (n.compareTo(bigInt(0)) === 0) {
                return bigInt(0);
            }
            return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));
        };
        NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;

        function max(a, b) {
            a = parseValue(a);
            b = parseValue(b);
            return a.greater(b) ? a : b;
        }
        function min(a, b) {
            a = parseValue(a);
            b = parseValue(b);
            return a.lesser(b) ? a : b;
        }
        function gcd(a, b) {
            a = parseValue(a).abs();
            b = parseValue(b).abs();
            if (a.equals(b)) return a;
            if (a.isZero()) return b;
            if (b.isZero()) return a;
            var c = Integer[1], d, t;
            while (a.isEven() && b.isEven()) {
                d = min(roughLOB(a), roughLOB(b));
                a = a.divide(d);
                b = b.divide(d);
                c = c.multiply(d);
            }
            while (a.isEven()) {
                a = a.divide(roughLOB(a));
            }
            do {
                while (b.isEven()) {
                    b = b.divide(roughLOB(b));
                }
                if (a.greater(b)) {
                    t = b; b = a; a = t;
                }
                b = b.subtract(a);
            } while (!b.isZero());
            return c.isUnit() ? a : a.multiply(c);
        }
        function lcm(a, b) {
            a = parseValue(a).abs();
            b = parseValue(b).abs();
            return a.divide(gcd(a, b)).multiply(b);
        }
        function randBetween(a, b, rng) {
            a = parseValue(a);
            b = parseValue(b);
            var usedRNG = rng || Math.random;
            var low = min(a, b), high = max(a, b);
            var range = high.subtract(low).add(1);
            if (range.isSmall) return low.add(Math.floor(usedRNG() * range));
            var digits = toBase(range, BASE).value;
            var result = [], restricted = true;
            for (var i = 0; i < digits.length; i++) {
                var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;
                var digit = truncate(usedRNG() * top);
                result.push(digit);
                if (digit < digits[i]) restricted = false;
            }
            return low.add(Integer.fromArray(result, BASE, false));
        }

        var parseBase = function (text, base, alphabet, caseSensitive) {
            alphabet = alphabet || DEFAULT_ALPHABET;
            text = String(text);
            if (!caseSensitive) {
                text = text.toLowerCase();
                alphabet = alphabet.toLowerCase();
            }
            var length = text.length;
            var i;
            var absBase = Math.abs(base);
            var alphabetValues = {};
            for (i = 0; i < alphabet.length; i++) {
                alphabetValues[alphabet[i]] = i;
            }
            for (i = 0; i < length; i++) {
                var c = text[i];
                if (c === "-") continue;
                if (c in alphabetValues) {
                    if (alphabetValues[c] >= absBase) {
                        if (c === "1" && absBase === 1) continue;
                        throw new Error(c + " is not a valid digit in base " + base + ".");
                    }
                }
            }
            base = parseValue(base);
            var digits = [];
            var isNegative = text[0] === "-";
            for (i = isNegative ? 1 : 0; i < text.length; i++) {
                var c = text[i];
                if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));
                else if (c === "<") {
                    var start = i;
                    do { i++; } while (text[i] !== ">" && i < text.length);
                    digits.push(parseValue(text.slice(start + 1, i)));
                }
                else throw new Error(c + " is not a valid character");
            }
            return parseBaseFromArray(digits, base, isNegative);
        };

        function parseBaseFromArray(digits, base, isNegative) {
            var val = Integer[0], pow = Integer[1], i;
            for (i = digits.length - 1; i >= 0; i--) {
                val = val.add(digits[i].times(pow));
                pow = pow.times(base);
            }
            return isNegative ? val.negate() : val;
        }

        function stringify(digit, alphabet) {
            alphabet = alphabet || DEFAULT_ALPHABET;
            if (digit < alphabet.length) {
                return alphabet[digit];
            }
            return "<" + digit + ">";
        }

        function toBase(n, base) {
            base = bigInt(base);
            if (base.isZero()) {
                if (n.isZero()) return { value: [0], isNegative: false };
                throw new Error("Cannot convert nonzero numbers to base 0.");
            }
            if (base.equals(-1)) {
                if (n.isZero()) return { value: [0], isNegative: false };
                if (n.isNegative())
                    return {
                        value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))
                            .map(Array.prototype.valueOf, [1, 0])
                        ),
                        isNegative: false
                    };

                var arr = Array.apply(null, Array(n.toJSNumber() - 1))
                    .map(Array.prototype.valueOf, [0, 1]);
                arr.unshift([1]);
                return {
                    value: [].concat.apply([], arr),
                    isNegative: false
                };
            }

            var neg = false;
            if (n.isNegative() && base.isPositive()) {
                neg = true;
                n = n.abs();
            }
            if (base.isUnit()) {
                if (n.isZero()) return { value: [0], isNegative: false };

                return {
                    value: Array.apply(null, Array(n.toJSNumber()))
                        .map(Number.prototype.valueOf, 1),
                    isNegative: neg
                };
            }
            var out = [];
            var left = n, divmod;
            while (left.isNegative() || left.compareAbs(base) >= 0) {
                divmod = left.divmod(base);
                left = divmod.quotient;
                var digit = divmod.remainder;
                if (digit.isNegative()) {
                    digit = base.minus(digit).abs();
                    left = left.next();
                }
                out.push(digit.toJSNumber());
            }
            out.push(left.toJSNumber());
            return { value: out.reverse(), isNegative: neg };
        }

        function toBaseString(n, base, alphabet) {
            var arr = toBase(n, base);
            return (arr.isNegative ? "-" : "") + arr.value.map(function (x) {
                return stringify(x, alphabet);
            }).join('');
        }

        BigInteger.prototype.toArray = function (radix) {
            return toBase(this, radix);
        };

        SmallInteger.prototype.toArray = function (radix) {
            return toBase(this, radix);
        };

        NativeBigInt.prototype.toArray = function (radix) {
            return toBase(this, radix);
        };

        BigInteger.prototype.toString = function (radix, alphabet) {
            if (radix === undefined$1) radix = 10;
            if (radix !== 10) return toBaseString(this, radix, alphabet);
            var v = this.value, l = v.length, str = String(v[--l]), zeros = "0000000", digit;
            while (--l >= 0) {
                digit = String(v[l]);
                str += zeros.slice(digit.length) + digit;
            }
            var sign = this.sign ? "-" : "";
            return sign + str;
        };

        SmallInteger.prototype.toString = function (radix, alphabet) {
            if (radix === undefined$1) radix = 10;
            if (radix != 10) return toBaseString(this, radix, alphabet);
            return String(this.value);
        };

        NativeBigInt.prototype.toString = SmallInteger.prototype.toString;

        NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); };

        BigInteger.prototype.valueOf = function () {
            return parseInt(this.toString(), 10);
        };
        BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;

        SmallInteger.prototype.valueOf = function () {
            return this.value;
        };
        SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
        NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {
            return parseInt(this.toString(), 10);
        };

        function parseStringValue(v) {
            if (isPrecise(+v)) {
                var x = +v;
                if (x === truncate(x))
                    return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);
                throw new Error("Invalid integer: " + v);
            }
            var sign = v[0] === "-";
            if (sign) v = v.slice(1);
            var split = v.split(/e/i);
            if (split.length > 2) throw new Error("Invalid integer: " + split.join("e"));
            if (split.length === 2) {
                var exp = split[1];
                if (exp[0] === "+") exp = exp.slice(1);
                exp = +exp;
                if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error("Invalid integer: " + exp + " is not a valid exponent.");
                var text = split[0];
                var decimalPlace = text.indexOf(".");
                if (decimalPlace >= 0) {
                    exp -= text.length - decimalPlace - 1;
                    text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);
                }
                if (exp < 0) throw new Error("Cannot include negative exponent part for integers");
                text += (new Array(exp + 1)).join("0");
                v = text;
            }
            var isValid = /^([0-9][0-9]*)$/.test(v);
            if (!isValid) throw new Error("Invalid integer: " + v);
            if (supportsNativeBigInt) {
                return new NativeBigInt(BigInt(sign ? "-" + v : v));
            }
            var r = [], max = v.length, l = LOG_BASE, min = max - l;
            while (max > 0) {
                r.push(+v.slice(min, max));
                min -= l;
                if (min < 0) min = 0;
                max -= l;
            }
            trim(r);
            return new BigInteger(r, sign);
        }

        function parseNumberValue(v) {
            if (supportsNativeBigInt) {
                return new NativeBigInt(BigInt(v));
            }
            if (isPrecise(v)) {
                if (v !== truncate(v)) throw new Error(v + " is not an integer.");
                return new SmallInteger(v);
            }
            return parseStringValue(v.toString());
        }

        function parseValue(v) {
            if (typeof v === "number") {
                return parseNumberValue(v);
            }
            if (typeof v === "string") {
                return parseStringValue(v);
            }
            if (typeof v === "bigint") {
                return new NativeBigInt(v);
            }
            return v;
        }
        // Pre-define numbers in range [-999,999]
        for (var i = 0; i < 1000; i++) {
            Integer[i] = parseValue(i);
            if (i > 0) Integer[-i] = parseValue(-i);
        }
        // Backwards compatibility
        Integer.one = Integer[1];
        Integer.zero = Integer[0];
        Integer.minusOne = Integer[-1];
        Integer.max = max;
        Integer.min = min;
        Integer.gcd = gcd;
        Integer.lcm = lcm;
        Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };
        Integer.randBetween = randBetween;

        Integer.fromArray = function (digits, base, isNegative) {
            return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);
        };

        return Integer;
    })();

    // Node.js check
    if (module.hasOwnProperty("exports")) {
        module.exports = bigInt;
    }
    });

    function fromString$2(s, radix) {
        if (typeof s == "string") {
            if (s.slice(0,2) == "0x") {
                return BigInteger(s.slice(2), 16);
            } else {
                return BigInteger(s,radix);
            }
        } else {
            return BigInteger(s, radix);
        }
    }

    const e$1 = fromString$2;

    function fromArray$2(a, radix) {
        return BigInteger.fromArray(a, radix);
    }

    function bitLength$1(a) {
        return BigInteger(a).bitLength();
    }

    function isNegative$1(a) {
        return BigInteger(a).isNegative();
    }

    function isZero$1(a) {
        return BigInteger(a).isZero();
    }

    function shiftLeft$1(a, n) {
        return BigInteger(a).shiftLeft(n);
    }

    function shiftRight$1(a, n) {
        return BigInteger(a).shiftRight(n);
    }

    const shl$1 = shiftLeft$1;
    const shr$1 = shiftRight$1;

    function isOdd$1(a) {
        return BigInteger(a).isOdd();
    }


    function naf$1(n) {
        let E = BigInteger(n);
        const res = [];
        while (E.gt(BigInteger.zero)) {
            if (E.isOdd()) {
                const z = 2 - E.mod(4).toJSNumber();
                res.push( z );
                E = E.minus(z);
            } else {
                res.push( 0 );
            }
            E = E.shiftRight(1);
        }
        return res;
    }

    function bits$1(n) {
        let E = BigInteger(n);
        const res = [];
        while (E.gt(BigInteger.zero)) {
            if (E.isOdd()) {
                res.push(1);
            } else {
                res.push( 0 );
            }
            E = E.shiftRight(1);
        }
        return res;
    }

    function toNumber$2(s) {
        if (!s.lt(BigInteger("9007199254740992", 10))) {
            throw new Error("Number too big");
        }
        return s.toJSNumber();
    }

    function toArray$1(s, radix) {
        return BigInteger(s).toArray(radix);
    }

    function add$1(a, b) {
        return BigInteger(a).add(BigInteger(b));
    }

    function sub$1(a, b) {
        return BigInteger(a).minus(BigInteger(b));
    }

    function neg$1(a) {
        return BigInteger.zero.minus(BigInteger(a));
    }

    function mul$1(a, b) {
        return BigInteger(a).times(BigInteger(b));
    }

    function square$1(a) {
        return BigInteger(a).square();
    }

    function pow$1(a, b) {
        return BigInteger(a).pow(BigInteger(b));
    }

    function exp$2(a, b) {
        return BigInteger(a).pow(BigInteger(b));
    }

    function abs$1(a) {
        return BigInteger(a).abs();
    }

    function div$1(a, b) {
        return BigInteger(a).divide(BigInteger(b));
    }

    function mod$1(a, b) {
        return BigInteger(a).mod(BigInteger(b));
    }

    function eq$1(a, b) {
        return BigInteger(a).eq(BigInteger(b));
    }

    function neq$1(a, b) {
        return BigInteger(a).neq(BigInteger(b));
    }

    function lt$1(a, b) {
        return BigInteger(a).lt(BigInteger(b));
    }

    function gt$1(a, b) {
        return BigInteger(a).gt(BigInteger(b));
    }

    function leq$1(a, b) {
        return BigInteger(a).leq(BigInteger(b));
    }

    function geq$1(a, b) {
        return BigInteger(a).geq(BigInteger(b));
    }

    function band$1(a, b) {
        return BigInteger(a).and(BigInteger(b));
    }

    function bor$1(a, b) {
        return BigInteger(a).or(BigInteger(b));
    }

    function bxor$1(a, b) {
        return BigInteger(a).xor(BigInteger(b));
    }

    function land$1(a, b) {
        return (!BigInteger(a).isZero()) && (!BigInteger(b).isZero());
    }

    function lor$1(a, b) {
        return (!BigInteger(a).isZero()) || (!BigInteger(b).isZero());
    }

    function lnot$1(a) {
        return BigInteger(a).isZero();
    }

    var Scalar_bigint = /*#__PURE__*/Object.freeze({
        __proto__: null,
        fromString: fromString$2,
        e: e$1,
        fromArray: fromArray$2,
        bitLength: bitLength$1,
        isNegative: isNegative$1,
        isZero: isZero$1,
        shiftLeft: shiftLeft$1,
        shiftRight: shiftRight$1,
        shl: shl$1,
        shr: shr$1,
        isOdd: isOdd$1,
        naf: naf$1,
        bits: bits$1,
        toNumber: toNumber$2,
        toArray: toArray$1,
        add: add$1,
        sub: sub$1,
        neg: neg$1,
        mul: mul$1,
        square: square$1,
        pow: pow$1,
        exp: exp$2,
        abs: abs$1,
        div: div$1,
        mod: mod$1,
        eq: eq$1,
        neq: neq$1,
        lt: lt$1,
        gt: gt$1,
        leq: leq$1,
        geq: geq$1,
        band: band$1,
        bor: bor$1,
        bxor: bxor$1,
        land: land$1,
        lor: lor$1,
        lnot: lnot$1
    });

    const supportsNativeBigInt$2 = typeof BigInt === "function";

    let Scalar$1 = {};
    if (supportsNativeBigInt$2) {
        Object.assign(Scalar$1, Scalar_native);
    } else {
        Object.assign(Scalar$1, Scalar_bigint);
    }


    // Returns a buffer with Little Endian Representation
    Scalar$1.toRprLE = function rprBE(buff, o, e, n8) {
        const s = "0000000" + e.toString(16);
        const v = new Uint32Array(buff.buffer, o, n8/4);
        const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;
        for (let i=0; i<l; i++) v[i] = parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16);
        for (let i=l; i<v.length; i++) v[i] = 0;
        for (let i=v.length*4; i<n8; i++) buff[i] = Scalar$1.toNumber(Scalar$1.band(Scalar$1.shiftRight(e, i*8), 0xFF));
    };

    // Returns a buffer with Big Endian Representation
    Scalar$1.toRprBE = function rprLEM(buff, o, e, n8) {
        const s = "0000000" + e.toString(16);
        const v = new DataView(buff.buffer, buff.byteOffset + o, n8);
        const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;
        for (let i=0; i<l; i++) v.setUint32(n8-i*4 -4, parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16), false);
        for (let i=0; i<n8/4-l; i++) v[i] = 0;
    };

    // Pases a buffer with Little Endian Representation
    Scalar$1.fromRprLE = function rprLEM(buff, o, n8) {
        n8 = n8 || buff.byteLength;
        o = o || 0;
        const v = new Uint32Array(buff.buffer, o, n8/4);
        const a = new Array(n8/4);
        v.forEach( (ch,i) => a[a.length-i-1] = ch.toString(16).padStart(8,"0") );
        return Scalar$1.fromString(a.join(""), 16);
    };

    // Pases a buffer with Big Endian Representation
    Scalar$1.fromRprBE = function rprLEM(buff, o, n8) {
        n8 = n8 || buff.byteLength;
        o = o || 0;
        const v = new DataView(buff.buffer, buff.byteOffset + o, n8);
        const a = new Array(n8/4);
        for (let i=0; i<n8/4; i++) {
            a[i] = v.getUint32(i*4, false).toString(16).padStart(8, "0");
        }
        return Scalar$1.fromString(a.join(""), 16);
    };

    Scalar$1.toString = function toString(a, radix) {
        return a.toString(radix);
    };

    Scalar$1.toLEBuff = function toLEBuff(a) {
        const buff = new Uint8Array(Math.floor((Scalar$1.bitLength(a) - 1) / 8) +1);
        Scalar$1.toRprLE(buff, 0, a, buff.byteLength);
        return buff;
    };


    Scalar$1.zero = Scalar$1.e(0);
    Scalar$1.one = Scalar$1.e(1);

    let {
        toRprLE,
        toRprBE,
        fromRprLE,
        fromRprBE,
        toString: toString$6,
        toLEBuff,
        zero,
        one,
        fromString: fromString$1,
        e,
        fromArray: fromArray$1,
        bitLength,
        isNegative,
        isZero,
        shiftLeft,
        shiftRight,
        shl,
        shr,
        isOdd,
        naf,
        bits,
        toNumber: toNumber$1,
        toArray,
        add,
        sub,
        neg,
        mul,
        square,
        pow,
        exp: exp$1,
        abs,
        div,
        mod,
        eq,
        neq,
        lt,
        gt,
        leq,
        geq,
        band,
        bor,
        bxor,
        land,
        lor,
        lnot,
    } = Scalar$1;

    var _Scalar = /*#__PURE__*/Object.freeze({
        __proto__: null,
        toRprLE: toRprLE,
        toRprBE: toRprBE,
        fromRprLE: fromRprLE,
        fromRprBE: fromRprBE,
        toString: toString$6,
        toLEBuff: toLEBuff,
        zero: zero,
        one: one,
        fromString: fromString$1,
        e: e,
        fromArray: fromArray$1,
        bitLength: bitLength,
        isNegative: isNegative,
        isZero: isZero,
        shiftLeft: shiftLeft,
        shiftRight: shiftRight,
        shl: shl,
        shr: shr,
        isOdd: isOdd,
        naf: naf,
        bits: bits,
        toNumber: toNumber$1,
        toArray: toArray,
        add: add,
        sub: sub,
        neg: neg,
        mul: mul,
        square: square,
        pow: pow,
        exp: exp$1,
        abs: abs,
        div: div,
        mod: mod,
        eq: eq,
        neq: neq,
        lt: lt,
        gt: gt,
        leq: leq,
        geq: geq,
        band: band,
        bor: bor,
        bxor: bxor,
        land: land,
        lor: lor,
        lnot: lnot
    });

    /*
        Copyright 2018 0kims association.

        This file is part of snarkjs.

        snarkjs is a free software: you can redistribute it and/or
        modify it under the terms of the GNU General Public License as published by the
        Free Software Foundation, either version 3 of the License, or (at your option)
        any later version.

        snarkjs is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details.

        You should have received a copy of the GNU General Public License along with
        snarkjs. If not, see <https://www.gnu.org/licenses/>.
    */

    const _revTable$2 = [];
    for (let i=0; i<256; i++) {
        _revTable$2[i] = _revSlow$2(i, 8);
    }

    function _revSlow$2(idx, bits) {
        let res =0;
        let a = idx;
        for (let i=0; i<bits; i++) {
            res <<= 1;
            res = res | (a &1);
            a >>=1;
        }
        return res;
    }

    /*
        Copyright 2018 0kims association.

        This file is part of snarkjs.

        snarkjs is a free software: you can redistribute it and/or
        modify it under the terms of the GNU General Public License as published by the
        Free Software Foundation, either version 3 of the License, or (at your option)
        any later version.

        snarkjs is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details.

        You should have received a copy of the GNU General Public License along with
        snarkjs. If not, see <https://www.gnu.org/licenses/>.
    */


    /*
    exports.mulScalar = (F, base, e) =>{
        let res = F.zero;
        let rem = bigInt(e);
        let exp = base;

        while (! rem.eq(bigInt.zero)) {
            if (rem.and(bigInt.one).eq(bigInt.one)) {
                res = F.add(res, exp);
            }
            exp = F.double(exp);
            rem = rem.shiftRight(1);
        }

        return res;
    };
    */


    function exp(F, base, e) {

        if (isZero(e)) return F.one;

        const n = bits(e);

        if (n.legth==0) return F.one;

        let res = base;

        for (let i=n.length-2; i>=0; i--) {

            res = F.square(res);

            if (n[i]) {
                res = F.mul(res, base);
            }
        }

        return res;
    }

    // Check here: https://eprint.iacr.org/2012/685.pdf

    function buildSqrt (F) {
        if ((F.m % 2) == 1) {
            if (eq(mod(F.p, 4), 1 )) {
                if (eq(mod(F.p, 8), 1 )) {
                    if (eq(mod(F.p, 16), 1 )) {
                        // alg7_muller(F);
                        alg5_tonelliShanks(F);
                    } else if (eq(mod(F.p, 16), 9 )) {
                        alg4_kong(F);
                    } else {
                        throw new Error("Field withot sqrt");
                    }
                } else if (eq(mod(F.p, 8), 5 )) {
                    alg3_atkin(F);
                } else {
                    throw new Error("Field withot sqrt");
                }
            } else if (eq(mod(F.p, 4), 3 )) {
                alg2_shanks(F);
            }
        } else {
            const pm2mod4 = mod(pow(F.p, F.m/2), 4);
            if (pm2mod4 == 1) {
                alg10_adj(F);
            } else if (pm2mod4 == 3) {
                alg9_adj(F);
            } else {
                alg8_complex(F);
            }

        }
    }


    function alg5_tonelliShanks(F) {
        F.sqrt_q = pow(F.p, F.m);

        F.sqrt_s = 0;
        F.sqrt_t = sub(F.sqrt_q, 1);

        while (!isOdd(F.sqrt_t)) {
            F.sqrt_s = F.sqrt_s + 1;
            F.sqrt_t = div(F.sqrt_t, 2);
        }

        let c0 = F.one;

        while (F.eq(c0, F.one)) {
            const c = F.random();
            F.sqrt_z = F.pow(c, F.sqrt_t);
            c0 = F.pow(F.sqrt_z, 2 ** (F.sqrt_s-1) );
        }

        F.sqrt_tm1d2 = div(sub(F.sqrt_t, 1),2);

        F.sqrt = function(a) {
            const F=this;
            if (F.isZero(a)) return F.zero;
            let w = F.pow(a, F.sqrt_tm1d2);
            const a0 = F.pow( F.mul(F.square(w), a), 2 ** (F.sqrt_s-1) );
            if (F.eq(a0, F.negone)) return null;

            let v = F.sqrt_s;
            let x = F.mul(a, w);
            let b = F.mul(x, w);
            let z = F.sqrt_z;
            while (!F.eq(b, F.one)) {
                let b2k = F.square(b);
                let k=1;
                while (!F.eq(b2k, F.one)) {
                    b2k = F.square(b2k);
                    k++;
                }

                w = z;
                for (let i=0; i<v-k-1; i++) {
                    w = F.square(w);
                }
                z = F.square(w);
                b = F.mul(b, z);
                x = F.mul(x, w);
                v = k;
            }
            return F.geq(x, F.zero) ? x : F.neg(x);
        };
    }

    function alg4_kong(F) {
        F.sqrt = function() {
            throw new Error("Sqrt alg 4 not implemented");
        };
    }

    function alg3_atkin(F) {
        F.sqrt = function() {
            throw new Error("Sqrt alg 3 not implemented");
        };
    }

    function alg2_shanks(F) {

        F.sqrt_q = pow(F.p, F.m);
        F.sqrt_e1 = div( sub(F.sqrt_q, 3) , 4);

        F.sqrt = function(a) {
            if (this.isZero(a)) return this.zero;

            // Test that have solution
            const a1 = this.pow(a, this.sqrt_e1);

            const a0 = this.mul(this.square(a1), a);

            if ( this.eq(a0, this.negone) ) return null;

            const x = this.mul(a1, a);

            return F.geq(x, F.zero) ? x : F.neg(x);
        };
    }

    function alg10_adj(F) {
        F.sqrt = function() {
            throw new Error("Sqrt alg 10 not implemented");
        };
    }

    function alg9_adj(F) {
        F.sqrt_q = pow(F.p, F.m/2);
        F.sqrt_e34 = div( sub(F.sqrt_q, 3) , 4);
        F.sqrt_e12 = div( sub(F.sqrt_q, 1) , 2);

        F.frobenius = function(n, x) {
            if ((n%2) == 1) {
                return F.conjugate(x);
            } else {
                return x;
            }
        };

        F.sqrt = function(a) {
            const F = this;
            const a1 = F.pow(a, F.sqrt_e34);
            const alfa = F.mul(F.square(a1), a);
            const a0 = F.mul(F.frobenius(1, alfa), alfa);
            if (F.eq(a0, F.negone)) return null;
            const x0 = F.mul(a1, a);
            let x;
            if (F.eq(alfa, F.negone)) {
                x = F.mul(x0, [F.F.zero, F.F.one]);
            } else {
                const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);
                x = F.mul(b, x0);
            }
            return F.geq(x, F.zero) ? x : F.neg(x);
        };
    }


    function alg8_complex(F) {
        F.sqrt = function() {
            throw new Error("Sqrt alg 8 not implemented");
        };
    }

    function quarterRound(st, a, b, c, d) {

        st[a] = (st[a] + st[b]) >>> 0;
        st[d] = (st[d] ^ st[a]) >>> 0;
        st[d] = ((st[d] << 16) | ((st[d]>>>16) & 0xFFFF)) >>> 0;

        st[c] = (st[c] + st[d]) >>> 0;
        st[b] = (st[b] ^ st[c]) >>> 0;
        st[b] = ((st[b] << 12) | ((st[b]>>>20) & 0xFFF)) >>> 0;

        st[a] = (st[a] + st[b]) >>> 0;
        st[d] = (st[d] ^ st[a]) >>> 0;
        st[d] = ((st[d] << 8) | ((st[d]>>>24) & 0xFF)) >>> 0;

        st[c] = (st[c] + st[d]) >>> 0;
        st[b] = (st[b] ^ st[c]) >>> 0;
        st[b] = ((st[b] << 7) | ((st[b]>>>25) & 0x7F)) >>> 0;
    }

    function doubleRound(st) {
        quarterRound(st, 0, 4, 8,12);
        quarterRound(st, 1, 5, 9,13);
        quarterRound(st, 2, 6,10,14);
        quarterRound(st, 3, 7,11,15);

        quarterRound(st, 0, 5,10,15);
        quarterRound(st, 1, 6,11,12);
        quarterRound(st, 2, 7, 8,13);
        quarterRound(st, 3, 4, 9,14);
    }

    class ChaCha {

        constructor(seed) {
            seed = seed || [0,0,0,0,0,0,0,0];
            this.state = [
                0x61707865,
                0x3320646E,
                0x79622D32,
                0x6B206574,
                seed[0],
                seed[1],
                seed[2],
                seed[3],
                seed[4],
                seed[5],
                seed[6],
                seed[7],
                0,
                0,
                0,
                0
            ];
            this.idx = 16;
            this.buff = new Array(16);
        }

        nextU32() {
            if (this.idx == 16) this.update();
            return this.buff[this.idx++];
        }

        nextU64() {
            return add(mul(this.nextU32(), 0x100000000), this.nextU32());
        }

        nextBool() {
            return (this.nextU32() & 1) == 1;
        }

        update() {
            // Copy the state
            for (let i=0; i<16; i++) this.buff[i] = this.state[i];

            // Apply the rounds
            for (let i=0; i<10; i++) doubleRound(this.buff);

            // Add to the initial
            for (let i=0; i<16; i++) this.buff[i] = (this.buff[i] + this.state[i]) >>> 0;

            this.idx = 0;

            this.state[12] = (this.state[12] + 1) >>> 0;
            if (this.state[12] != 0) return;
            this.state[13] = (this.state[13] + 1) >>> 0;
            if (this.state[13] != 0) return;
            this.state[14] = (this.state[14] + 1) >>> 0;
            if (this.state[14] != 0) return;
            this.state[15] = (this.state[15] + 1) >>> 0;
        }
    }

    var crypto = {};

    function getRandomBytes(n) {
        let array = new Uint8Array(n);
        { // Browser
            if (typeof globalThis.crypto !== "undefined") { // Supported
                globalThis.crypto.getRandomValues(array);
            } else { // fallback
                for (let i=0; i<n; i++) {
                    array[i] = (Math.random()*4294967296)>>>0;
                }
            }
        }
        return array;
    }

    function getRandomSeed() {
        const arr = getRandomBytes(32);
        const arrV = new Uint32Array(arr.buffer);
        const seed = [];
        for (let i=0; i<8; i++) {
            seed.push(arrV[i]);
        }
        return seed;
    }

    let threadRng = null;

    function getThreadRng() {
        if (threadRng) return threadRng;
        threadRng = new ChaCha(getRandomSeed());
        return threadRng;
    }

    /* global BigInt */

    class ZqField$1 {
        constructor(p) {
            this.type="F1";
            this.one = BigInt(1);
            this.zero = BigInt(0);
            this.p = BigInt(p);
            this.m = 1;
            this.negone = this.p-this.one;
            this.two = BigInt(2);
            this.half = this.p >> this.one;
            this.bitLength = bitLength(this.p);
            this.mask = (this.one << BigInt(this.bitLength)) - this.one;

            this.n64 = Math.floor((this.bitLength - 1) / 64)+1;
            this.n32 = this.n64*2;
            this.n8 = this.n64*8;
            this.R = this.e(this.one << BigInt(this.n64*64));
            this.Ri = this.inv(this.R);

            const e = this.negone >> this.one;
            this.nqr = this.two;
            let r = this.pow(this.nqr, e);
            while (!this.eq(r, this.negone)) {
                this.nqr = this.nqr + this.one;
                r = this.pow(this.nqr, e);
            }


            this.s = 0;
            this.t = this.negone;

            while ((this.t & this.one) == this.zero) {
                this.s = this.s + 1;
                this.t = this.t >> this.one;
            }

            this.nqr_to_t = this.pow(this.nqr, this.t);

            buildSqrt(this);
        }

        e(a,b) {
            let res;
            if (!b) {
                res = BigInt(a);
            } else if (b==16) {
                res = BigInt("0x"+a);
            }
            if (res < 0) {
                let nres = -res;
                if (nres >= this.p) nres = nres % this.p;
                return this.p - nres;
            } else {
                return (res>= this.p) ? res%this.p : res;
            }

        }

        add(a, b) {
            const res = a + b;
            return res >= this.p ? res-this.p : res;
        }

        sub(a, b) {
            return (a >= b) ? a-b : this.p-b+a;
        }

        neg(a) {
            return a ? this.p-a : a;
        }

        mul(a, b) {
            return (a*b)%this.p;
        }

        mulScalar(base, s) {
            return (base * this.e(s)) % this.p;
        }

        square(a) {
            return (a*a) % this.p;
        }

        eq(a, b) {
            return a==b;
        }

        neq(a, b) {
            return a!=b;
        }

        lt(a, b) {
            const aa = (a > this.half) ? a - this.p : a;
            const bb = (b > this.half) ? b - this.p : b;
            return aa < bb;
        }

        gt(a, b) {
            const aa = (a > this.half) ? a - this.p : a;
            const bb = (b > this.half) ? b - this.p : b;
            return aa > bb;
        }

        leq(a, b) {
            const aa = (a > this.half) ? a - this.p : a;
            const bb = (b > this.half) ? b - this.p : b;
            return aa <= bb;
        }

        geq(a, b) {
            const aa = (a > this.half) ? a - this.p : a;
            const bb = (b > this.half) ? b - this.p : b;
            return aa >= bb;
        }

        div(a, b) {
            return this.mul(a, this.inv(b));
        }

        idiv(a, b) {
            if (!b) throw new Error("Division by zero");
            return a / b;
        }

        inv(a) {
            if (!a) throw new Error("Division by zero");

            let t = this.zero;
            let r = this.p;
            let newt = this.one;
            let newr = a % this.p;
            while (newr) {
                let q = r/newr;
                [t, newt] = [newt, t-q*newt];
                [r, newr] = [newr, r-q*newr];
            }
            if (t<this.zero) t += this.p;
            return t;
        }

        mod(a, b) {
            return a % b;
        }

        pow(b, e) {
            return exp(this, b, e);
        }

        exp(b, e) {
            return exp(this, b, e);
        }

        band(a, b) {
            const res =  ((a & b) & this.mask);
            return res >= this.p ? res-this.p : res;
        }

        bor(a, b) {
            const res =  ((a | b) & this.mask);
            return res >= this.p ? res-this.p : res;
        }

        bxor(a, b) {
            const res =  ((a ^ b) & this.mask);
            return res >= this.p ? res-this.p : res;
        }

        bnot(a) {
            const res = a ^ this.mask;
            return res >= this.p ? res-this.p : res;
        }

        shl(a, b) {
            if (Number(b) < this.bitLength) {
                const res = (a << b) & this.mask;
                return res >= this.p ? res-this.p : res;
            } else {
                const nb = this.p - b;
                if (Number(nb) < this.bitLength) {
                    return a >> nb;
                } else {
                    return this.zero;
                }
            }
        }

        shr(a, b) {
            if (Number(b) < this.bitLength) {
                return a >> b;
            } else {
                const nb = this.p - b;
                if (Number(nb) < this.bitLength) {
                    const res = (a << nb) & this.mask;
                    return res >= this.p ? res-this.p : res;
                } else {
                    return 0;
                }
            }
        }

        land(a, b) {
            return (a && b) ? this.one : this.zero;
        }

        lor(a, b) {
            return (a || b) ? this.one : this.zero;
        }

        lnot(a) {
            return (a) ? this.zero : this.one;
        }

        sqrt_old(n) {

            if (n == this.zero) return this.zero;

            // Test that have solution
            const res = this.pow(n, this.negone >> this.one);
            if ( res != this.one ) return null;

            let m = this.s;
            let c = this.nqr_to_t;
            let t = this.pow(n, this.t);
            let r = this.pow(n, this.add(this.t, this.one) >> this.one );

            while ( t != this.one ) {
                let sq = this.square(t);
                let i = 1;
                while (sq != this.one ) {
                    i++;
                    sq = this.square(sq);
                }

                // b = c ^ m-i-1
                let b = c;
                for (let j=0; j< m-i-1; j ++) b = this.square(b);

                m = i;
                c = this.square(b);
                t = this.mul(t, c);
                r = this.mul(r, b);
            }

            if (r > (this.p >> this.one)) {
                r = this.neg(r);
            }

            return r;
        }

        normalize(a, b) {
            a = BigInt(a,b);
            if (a < 0) {
                let na = -a;
                if (na >= this.p) na = na % this.p;
                return this.p - na;
            } else {
                return (a>= this.p) ? a%this.p : a;
            }
        }

        random() {
            const nBytes = (this.bitLength*2 / 8);
            let res =this.zero;
            for (let i=0; i<nBytes; i++) {
                res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);
            }
            return res % this.p;
        }

        toString(a, base) {
            let vs;
            if (a > this.half) {
                const v = this.p-a;
                vs = "-"+v.toString(base);
            } else {
                vs = a.toString(base);
            }
            return vs;
        }

        isZero(a) {
            return a == this.zero;
        }

        fromRng(rng) {
            let v;
            do {
                v=this.zero;
                for (let i=0; i<this.n64; i++) {
                    v += rng.nextU64() << BigInt(64 *i);
                }
                v &= this.mask;
            } while (v >= this.p);
            v = (v * this.Ri) % this.p;   // Convert from montgomery
            return v;
        }

    }

    class ZqField {
        constructor(p) {
            this.type="F1";
            this.one = BigInteger.one;
            this.zero = BigInteger.zero;
            this.p = BigInteger(p);
            this.m = 1;
            this.negone = this.p.minus(BigInteger.one);
            this.two = BigInteger(2);
            this.half = this.p.shiftRight(1);
            this.bitLength = this.p.bitLength();
            this.mask = BigInteger.one.shiftLeft(this.bitLength).minus(BigInteger.one);

            this.n64 = Math.floor((this.bitLength - 1) / 64)+1;
            this.n32 = this.n64*2;
            this.n8 = this.n64*8;
            this.R = BigInteger.one.shiftLeft(this.n64*64);
            this.Ri = this.inv(this.R);

            const e = this.negone.shiftRight(this.one);
            this.nqr = this.two;
            let r = this.pow(this.nqr, e);
            while (!r.equals(this.negone)) {
                this.nqr = this.nqr.add(this.one);
                r = this.pow(this.nqr, e);
            }

            this.s = this.zero;
            this.t = this.negone;

            while (!this.t.isOdd()) {
                this.s = this.s.add(this.one);
                this.t = this.t.shiftRight(this.one);
            }

            this.nqr_to_t = this.pow(this.nqr, this.t);

            buildSqrt(this);
        }

        e(a,b) {

            const res = BigInteger(a,b);

            return this.normalize(res);

        }

        add(a, b) {
            let res = a.add(b);
            if (res.geq(this.p)) {
                res = res.minus(this.p);
            }
            return res;
        }

        sub(a, b) {
            if (a.geq(b)) {
                return a.minus(b);
            } else {
                return this.p.minus(b.minus(a));
            }
        }

        neg(a) {
            if (a.isZero()) return a;
            return this.p.minus(a);
        }

        mul(a, b) {
            return a.times(b).mod(this.p);
        }

        mulScalar(base, s) {
            return base.times(BigInteger(s)).mod(this.p);
        }

        square(a) {
            return a.square().mod(this.p);
        }

        eq(a, b) {
            return a.eq(b);
        }

        neq(a, b) {
            return a.neq(b);
        }

        lt(a, b) {
            const aa = a.gt(this.half) ? a.minus(this.p) : a;
            const bb = b.gt(this.half) ? b.minus(this.p) : b;
            return aa.lt(bb);
        }

        gt(a, b) {
            const aa = a.gt(this.half) ? a.minus(this.p) : a;
            const bb = b.gt(this.half) ? b.minus(this.p) : b;
            return aa.gt(bb);
        }

        leq(a, b) {
            const aa = a.gt(this.half) ? a.minus(this.p) : a;
            const bb = b.gt(this.half) ? b.minus(this.p) : b;
            return aa.leq(bb);
        }

        geq(a, b) {
            const aa = a.gt(this.half) ? a.minus(this.p) : a;
            const bb = b.gt(this.half) ? b.minus(this.p) : b;
            return aa.geq(bb);
        }

        div(a, b) {
            if (b.isZero()) throw new Error("Division by zero");
            return a.times(b.modInv(this.p)).mod(this.p);
        }

        idiv(a, b) {
            if (b.isZero()) throw new Error("Division by zero");
            return a.divide(b);
        }

        inv(a) {
            if (a.isZero()) throw new Error("Division by zero");
            return a.modInv(this.p);
        }

        mod(a, b) {
            return a.mod(b);
        }

        pow(a, b) {
            return a.modPow(b, this.p);
        }

        exp(a, b) {
            return a.modPow(b, this.p);
        }

        band(a, b) {
            return a.and(b).and(this.mask).mod(this.p);
        }

        bor(a, b) {
            return a.or(b).and(this.mask).mod(this.p);
        }

        bxor(a, b) {
            return a.xor(b).and(this.mask).mod(this.p);
        }

        bnot(a) {
            return a.xor(this.mask).mod(this.p);
        }

        shl(a, b) {
            if (b.lt(this.bitLength)) {
                return a.shiftLeft(b).and(this.mask).mod(this.p);
            } else {
                const nb = this.p.minus(b);
                if (nb.lt(this.bitLength)) {
                    return this.shr(a, nb);
                } else {
                    return BigInteger.zero;
                }
            }
        }

        shr(a, b) {
            if (b.lt(this.bitLength)) {
                return a.shiftRight(b);
            } else {
                const nb = this.p.minus(b);
                if (nb.lt(this.bitLength)) {
                    return this.shl(a, nb);
                } else {
                    return BigInteger.zero;
                }
            }
        }

        land(a, b) {
            return (a.isZero() || b.isZero()) ? BigInteger.zero : BigInteger.one;
        }

        lor(a, b) {
            return (a.isZero() && b.isZero()) ? BigInteger.zero : BigInteger.one;
        }

        lnot(a) {
            return a.isZero() ? BigInteger.one : BigInteger.zero;
        }

        sqrt_old(n) {

            if (n.equals(this.zero)) return this.zero;

            // Test that have solution
            const res = this.pow(n, this.negone.shiftRight(this.one));
            if (!res.equals(this.one)) return null;

            let m = parseInt(this.s);
            let c = this.nqr_to_t;
            let t = this.pow(n, this.t);
            let r = this.pow(n, this.add(this.t, this.one).shiftRight(this.one) );

            while (!t.equals(this.one)) {
                let sq = this.square(t);
                let i = 1;
                while (!sq.equals(this.one)) {
                    i++;
                    sq = this.square(sq);
                }

                // b = c ^ m-i-1
                let b = c;
                for (let j=0; j< m-i-1; j ++) b = this.square(b);

                m = i;
                c = this.square(b);
                t = this.mul(t, c);
                r = this.mul(r, b);
            }

            if (r.greater(this.p.shiftRight(this.one))) {
                r = this.neg(r);
            }

            return r;
        }

        normalize(a) {
            a = BigInteger(a);
            if (a.isNegative()) {
                return this.p.minus(a.abs().mod(this.p));
            } else {
                return a.mod(this.p);
            }
        }

        random() {
            let res = BigInteger(0);
            let n = BigInteger(this.p.square());
            while (!n.isZero()) {
                res = res.shiftLeft(8).add(BigInteger(getRandomBytes(1)[0]));
                n = n.shiftRight(8);
            }
            return res.mod(this.p);
        }

        toString(a, base) {
            let vs;
            if (!a.lesserOrEquals(this.p.shiftRight(BigInteger(1)))) {
                const v = this.p.minus(a);
                vs = "-"+v.toString(base);
            } else {
                vs = a.toString(base);
            }

            return vs;
        }

        isZero(a) {
            return a.isZero();
        }

        fromRng(rng) {
            let v;
            do {
                v = BigInteger(0);
                for (let i=0; i<this.n64; i++) {
                    v = v.add(v, rng.nextU64().shiftLeft(64*i));
                }
                v = v.and(this.mask);
            } while (v.geq(this.p));
            v = v.times(this.Ri).mod(this.q);
            return v;
        }


    }

    const supportsNativeBigInt$1 = typeof BigInt === "function";
    let _F1Field;
    if (supportsNativeBigInt$1) {
        _F1Field = ZqField$1;
    } else {
        _F1Field = ZqField;
    }

    class F1Field extends _F1Field {

        // Returns a buffer with Little Endian Representation
        toRprLE(buff, o, e) {
            toRprLE(buff, o, e, this.n64*8);
        }

        // Returns a buffer with Big Endian Representation
        toRprBE(buff, o, e) {
            toRprBE(buff, o, e, this.n64*8);
        }

        // Returns a buffer with Big Endian Montgomery Representation
        toRprBEM(buff, o, e) {
            return this.toRprBE(buff, o, this.mul(this.R, e));
        }

        toRprLEM(buff, o, e) {
            return this.toRprLE(buff, o, this.mul(this.R, e));
        }


        // Pases a buffer with Little Endian Representation
        fromRprLE(buff, o) {
            return fromRprLE(buff, o, this.n8);
        }

        // Pases a buffer with Big Endian Representation
        fromRprBE(buff, o) {
            return fromRprBE(buff, o, this.n8);
        }

        fromRprLEM(buff, o) {
            return this.mul(this.fromRprLE(buff, o), this.Ri);
        }

        fromRprBEM(buff, o) {
            return this.mul(this.fromRprBE(buff, o), this.Ri);
        }

    }

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var bigInt2BytesLE = function bigInt2BytesLE(_a, len) {
        const b = Array(len);
        let v = BigInteger(_a);
        for (let i=0; i<len; i++) {
            b[i] = v.and(0xFF).toJSNumber();
            v = v.shiftRight(8);
        }
        return b;
    };

    var bigInt2U32LE = function bigInt2BytesLE(_a, len) {
        const b = Array(len);
        let v = BigInteger(_a);
        for (let i=0; i<len; i++) {
            b[i] = v.and(0xFFFFFFFF).toJSNumber();
            v = v.shiftRight(32);
        }
        return b;
    };

    var isOcamNum = function(a) {
        if (!Array.isArray(a)) return false;
        if (a.length != 3) return false;
        if (typeof a[0] !== "number") return false;
        if (typeof a[1] !== "number") return false;
        if (!Array.isArray(a[2])) return false;
        return true;
    };

    var utils$3 = {
    	bigInt2BytesLE: bigInt2BytesLE,
    	bigInt2U32LE: bigInt2U32LE,
    	isOcamNum: isOcamNum
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var build_int = function buildInt(module, n64, _prefix) {

        const prefix = _prefix || "int";
        if (module.modules[prefix]) return prefix;  // already builded
        module.modules[prefix] = {};

        const n32 = n64*2;
        const n8 = n64*8;

        module.alloc(n8, utils$3.bigInt2BytesLE(1, n8));

        function buildCopy() {
            const f = module.addFunction(prefix+"_copy");
            f.addParam("px", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            for (let i=0; i<n64; i++) {
                f.addCode(
                    c.i64_store(
                        c.getLocal("pr"),
                        i*8,
                        c.i64_load(
                            c.getLocal("px"),
                            i*8
                        )
                    )
                );
            }
        }

        function buildZero() {
            const f = module.addFunction(prefix+"_zero");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            for (let i=0; i<n64; i++) {
                f.addCode(
                    c.i64_store(
                        c.getLocal("pr"),
                        i*8,
                        c.i64_const(0)
                    )
                );
            }
        }

        function buildOne() {
            const f = module.addFunction(prefix+"_one");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.i64_store(
                    c.getLocal("pr"),
                    0,
                    c.i64_const(1)
                )
            );
            for (let i=1; i<n64; i++) {
                f.addCode(
                    c.i64_store(
                        c.getLocal("pr"),
                        i*8,
                        c.i64_const(0)
                    )
                );
            }
        }

        function buildIsZero() {
            const f = module.addFunction(prefix+"_isZero");
            f.addParam("px", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            function getCompCode(n) {
                if (n==0) {
                    return  c.ret(c.i64_eqz(
                        c.i64_load(c.getLocal("px"))
                    ));
                }
                return c.if(
                    c.i64_eqz(
                        c.i64_load(c.getLocal("px"), n*8 )
                    ),
                    getCompCode(n-1),
                    c.ret(c.i32_const(0))
                );
            }

            f.addCode(getCompCode(n64-1));
            f.addCode(c.ret(c.i32_const(0)));
        }

        function buildEq() {
            const f = module.addFunction(prefix+"_eq");
            f.addParam("px", "i32");
            f.addParam("py", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            function getCompCode(n) {
                if (n==0) {
                    return  c.ret(c.i64_eq(
                        c.i64_load(c.getLocal("px")),
                        c.i64_load(c.getLocal("py"))
                    ));
                }
                return c.if(
                    c.i64_eq(
                        c.i64_load(c.getLocal("px"), n*8 ),
                        c.i64_load(c.getLocal("py"), n*8 )
                    ),
                    getCompCode(n-1),
                    c.ret(c.i32_const(0))
                );
            }

            f.addCode(getCompCode(n64-1));
            f.addCode(c.ret(c.i32_const(0)));
        }



        function buildGte() {
            const f = module.addFunction(prefix+"_gte");
            f.addParam("px", "i32");
            f.addParam("py", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            function getCompCode(n) {
                if (n==0) {
                    return  c.ret(c.i64_ge_u(
                        c.i64_load(c.getLocal("px")),
                        c.i64_load(c.getLocal("py"))
                    ));
                }
                return c.if(
                    c.i64_lt_u(
                        c.i64_load(c.getLocal("px"), n*8 ),
                        c.i64_load(c.getLocal("py"), n*8 )
                    ),
                    c.ret(c.i32_const(0)),
                    c.if(
                        c.i64_gt_u(
                            c.i64_load(c.getLocal("px"), n*8 ),
                            c.i64_load(c.getLocal("py"), n*8 )
                        ),
                        c.ret(c.i32_const(1)),
                        getCompCode(n-1)
                    )
                );
            }

            f.addCode(getCompCode(n64-1));
            f.addCode(c.ret(c.i32_const(0)));
        }



        function buildAdd() {

            const f = module.addFunction(prefix+"_add");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");
            f.setReturnType("i32");
            f.addLocal("c", "i64");

            const c = f.getCodeBuilder();

            f.addCode(c.setLocal(
                "c",
                c.i64_add(
                    c.i64_load32_u(c.getLocal("x")),
                    c.i64_load32_u(c.getLocal("y"))
                )
            ));

            f.addCode(c.i64_store32(
                c.getLocal("r"),
                c.getLocal("c"),
            ));

            for (let i=1; i<n32; i++) {
                f.addCode(c.setLocal( "c",
                    c.i64_add(
                        c.i64_add(
                            c.i64_load32_u(c.getLocal("x"), 4*i),
                            c.i64_load32_u(c.getLocal("y"), 4*i)
                        ),
                        c.i64_shr_u (c.getLocal("c"), c.i64_const(32))
                    )
                ));

                f.addCode(c.i64_store32(
                    c.getLocal("r"),
                    i*4,
                    c.getLocal("c")
                ));
            }

            f.addCode(c.i32_wrap_i64(c.i64_shr_u (c.getLocal("c"), c.i64_const(32))));
        }


        function buildSub() {

            const f = module.addFunction(prefix+"_sub");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");
            f.setReturnType("i32");
            f.addLocal("c", "i64");

            const c = f.getCodeBuilder();

            f.addCode(c.setLocal(
                "c",
                c.i64_sub(
                    c.i64_load32_u(c.getLocal("x")),
                    c.i64_load32_u(c.getLocal("y"))
                )
            ));

            f.addCode(c.i64_store32(
                c.getLocal("r"),
                c.i64_and(
                    c.getLocal("c"),
                    c.i64_const("0xFFFFFFFF")
                )
            ));

            for (let i=1; i<n32; i++) {
                f.addCode(c.setLocal( "c",
                    c.i64_add(
                        c.i64_sub(
                            c.i64_load32_u(c.getLocal("x"), 4*i),
                            c.i64_load32_u(c.getLocal("y"), 4*i)
                        ),
                        c.i64_shr_s (c.getLocal("c"), c.i64_const(32))
                    )
                ));

                f.addCode(c.i64_store32(
                    c.getLocal("r"),
                    i*4,
                    c.i64_and( c.getLocal("c"), c.i64_const("0xFFFFFFFF"))
                ));
            }

            f.addCode(c.i32_wrap_i64 ( c.i64_shr_s (c.getLocal("c"), c.i64_const(32))));
        }


        function buildMul() {

            const f = module.addFunction(prefix+"_mul");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");
            f.addLocal("c0", "i64");
            f.addLocal("c1", "i64");


            for (let i=0;i<n32; i++) {
                f.addLocal("x"+i, "i64");
                f.addLocal("y"+i, "i64");
            }

            const c = f.getCodeBuilder();

            const loadX = [];
            const loadY = [];
            function mulij(i, j) {
                let X,Y;
                if (!loadX[i]) {
                    X = c.teeLocal("x"+i, c.i64_load32_u( c.getLocal("x"), i*4));
                    loadX[i] = true;
                } else {
                    X = c.getLocal("x"+i);
                }
                if (!loadY[j]) {
                    Y = c.teeLocal("y"+j, c.i64_load32_u( c.getLocal("y"), j*4));
                    loadY[j] = true;
                } else {
                    Y = c.getLocal("y"+j);
                }

                return c.i64_mul( X, Y );
            }

            let c0 = "c0";
            let c1 = "c1";

            for (let k=0; k<n32*2-1; k++) {
                for (let i=Math.max(0, k-n32+1); (i<=k)&&(i<n32); i++) {
                    const j= k-i;

                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulij(i,j)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );

                }

                f.addCode(
                    c.i64_store32(
                        c.getLocal("r"),
                        k*4,
                        c.getLocal(c0)
                    )
                );
                [c0, c1] = [c1, c0];
                f.addCode(
                    c.setLocal(c1,
                        c.i64_shr_u(
                            c.getLocal(c0),
                            c.i64_const(32)
                        )
                    )
                );
            }
            f.addCode(
                c.i64_store32(
                    c.getLocal("r"),
                    n32*4*2-4,
                    c.getLocal(c0)
                )
            );

        }



        function buildSquare() {

            const f = module.addFunction(prefix+"_square");
            f.addParam("x", "i32");
            f.addParam("r", "i32");
            f.addLocal("c0", "i64");
            f.addLocal("c1", "i64");
            f.addLocal("c0_old", "i64");
            f.addLocal("c1_old", "i64");


            for (let i=0;i<n32; i++) {
                f.addLocal("x"+i, "i64");
            }

            const c = f.getCodeBuilder();

            const loadX = [];
            function mulij(i, j) {
                let X,Y;
                if (!loadX[i]) {
                    X = c.teeLocal("x"+i, c.i64_load32_u( c.getLocal("x"), i*4));
                    loadX[i] = true;
                } else {
                    X = c.getLocal("x"+i);
                }
                if (!loadX[j]) {
                    Y = c.teeLocal("x"+j, c.i64_load32_u( c.getLocal("x"), j*4));
                    loadX[j] = true;
                } else {
                    Y = c.getLocal("x"+j);
                }

                return c.i64_mul( X, Y );
            }

            let c0 = "c0";
            let c1 = "c1";
            let c0_old = "c0_old";
            let c1_old = "c1_old";

            for (let k=0; k<n32*2-1; k++) {
                f.addCode(
                    c.setLocal(c0, c.i64_const(0)),
                    c.setLocal(c1, c.i64_const(0)),
                );

                for (let i=Math.max(0, k-n32+1); (i<((k+1)>>1) )&&(i<n32); i++) {
                    const j= k-i;

                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulij(i,j)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }

                // Multiply by 2
                f.addCode(
                    c.setLocal(c0,
                        c.i64_shl(
                            c.i64_and(
                                c.getLocal(c0),
                                c.i64_const(0xFFFFFFFF)
                            ),
                            c.i64_const(1)
                        )
                    )
                );

                f.addCode(
                    c.setLocal(c1,
                        c.i64_add(
                            c.i64_shl(
                                c.getLocal(c1),
                                c.i64_const(1)
                            ),
                            c.i64_shr_u(
                                c.getLocal(c0),
                                c.i64_const(32)
                            )
                        )
                    )
                );

                if (k%2 == 0) {
                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulij(k>>1, k>>1)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }

                // Add the old carry

                if (k>0) {
                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                c.i64_and(
                                    c.getLocal(c0_old),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.i64_add(
                                    c.getLocal(c1),
                                    c.i64_shr_u(
                                        c.getLocal(c0),
                                        c.i64_const(32)
                                    )
                                ),
                                c.getLocal(c1_old)
                            )
                        )
                    );
                }

                f.addCode(
                    c.i64_store32(
                        c.getLocal("r"),
                        k*4,
                        c.getLocal(c0)
                    )
                );

                f.addCode(
                    c.setLocal(
                        c0_old,
                        c.getLocal(c1)
                    ),
                    c.setLocal(
                        c1_old,
                        c.i64_shr_u(
                            c.getLocal(c0_old),
                            c.i64_const(32)
                        )
                    )
                );

            }
            f.addCode(
                c.i64_store32(
                    c.getLocal("r"),
                    n32*4*2-4,
                    c.getLocal(c0_old)
                )
            );

        }


        function buildSquareOld() {
            const f = module.addFunction(prefix+"_squareOld");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(prefix + "_mul", c.getLocal("x"), c.getLocal("x"), c.getLocal("r")));
        }

        function _buildMul1() {
            const f = module.addFunction(prefix+"__mul1");
            f.addParam("px", "i32");
            f.addParam("y", "i64");
            f.addParam("pr", "i32");
            f.addLocal("c", "i64");

            const c = f.getCodeBuilder();

            f.addCode(c.setLocal(
                "c",
                c.i64_mul(
                    c.i64_load32_u(c.getLocal("px"), 0, 0),
                    c.getLocal("y")
                )
            ));

            f.addCode(c.i64_store32(
                c.getLocal("pr"),
                0,
                0,
                c.getLocal("c"),
            ));

            for (let i=1; i<n32; i++) {
                f.addCode(c.setLocal( "c",
                    c.i64_add(
                        c.i64_mul(
                            c.i64_load32_u(c.getLocal("px"), 4*i, 0),
                            c.getLocal("y")
                        ),
                        c.i64_shr_u (c.getLocal("c"), c.i64_const(32))
                    )
                ));

                f.addCode(c.i64_store32(
                    c.getLocal("pr"),
                    i*4,
                    0,
                    c.getLocal("c")
                ));
            }
        }

        function _buildAdd1() {
            const f = module.addFunction(prefix+"__add1");
            f.addParam("x", "i32");
            f.addParam("y", "i64");
            f.addLocal("c", "i64");
            f.addLocal("px", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.setLocal("px", c.getLocal("x")));

            f.addCode(c.setLocal(
                "c",
                c.i64_add(
                    c.i64_load32_u(c.getLocal("px"), 0, 0),
                    c.getLocal("y")
                )
            ));

            f.addCode(c.i64_store32(
                c.getLocal("px"),
                0,
                0,
                c.getLocal("c"),
            ));

            f.addCode(c.setLocal(
                "c",
                c.i64_shr_u(
                    c.getLocal("c"),
                    c.i64_const(32)
                )
            ));

            f.addCode(c.block(c.loop(
                c.br_if(
                    1,
                    c.i64_eqz(c.getLocal("c"))
                ),
                c.setLocal(
                    "px",
                    c.i32_add(
                        c.getLocal("px"),
                        c.i32_const(4)
                    )
                ),

                c.setLocal(
                    "c",
                    c.i64_add(
                        c.i64_load32_u(c.getLocal("px"), 0, 0),
                        c.getLocal("c")
                    )
                ),

                c.i64_store32(
                    c.getLocal("px"),
                    0,
                    0,
                    c.getLocal("c"),
                ),

                c.setLocal(
                    "c",
                    c.i64_shr_u(
                        c.getLocal("c"),
                        c.i64_const(32)
                    )
                ),

                c.br(0)
            )));
        }


        function buildDiv() {
            _buildMul1();
            _buildAdd1();

            const f = module.addFunction(prefix+"_div");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("c", "i32");
            f.addParam("r", "i32");
            f.addLocal("rr", "i32");
            f.addLocal("cc", "i32");
            f.addLocal("eX", "i32");
            f.addLocal("eY", "i32");
            f.addLocal("sy", "i64");
            f.addLocal("sx", "i64");
            f.addLocal("ec", "i32");

            const c = f.getCodeBuilder();

            const Y = c.i32_const(module.alloc(n8));
            const Caux = c.i32_const(module.alloc(n8));
            const Raux = c.i32_const(module.alloc(n8));
            const C = c.getLocal("cc");
            const R = c.getLocal("rr");
            const pr1 = module.alloc(n8*2);
            const R1 = c.i32_const(pr1);
            const R2 = c.i32_const(pr1+n8);

            // Ic c is 0 then store it in an auxiliary buffer
            f.addCode(c.if(
                c.getLocal("c"),
                c.setLocal("cc", c.getLocal("c")),
                c.setLocal("cc", Caux)
            ));

            // Ic r is 0 then store it in an auxiliary buffer
            f.addCode(c.if(
                c.getLocal("r"),
                c.setLocal("rr", c.getLocal("r")),
                c.setLocal("rr", Raux)
            ));

            // Copy
            f.addCode(c.call(prefix + "_copy", c.getLocal("x"), R));
            f.addCode(c.call(prefix + "_copy", c.getLocal("y"), Y));
            f.addCode(c.call(prefix + "_zero", C));
            f.addCode(c.call(prefix + "_zero", R1));


            f.addCode(c.setLocal("eX", c.i32_const(n8-1)));
            f.addCode(c.setLocal("eY", c.i32_const(n8-1)));

            // while (eY>3)&&(Y[eY]==0) ey--;
            f.addCode(c.block(c.loop(
                c.br_if(
                    1,
                    c.i32_or(
                        c.i32_load8_u(
                            c.i32_add(Y , c.getLocal("eY")),
                            0,
                            0
                        ),
                        c.i32_eq(
                            c.getLocal("eY"),
                            c.i32_const(3)
                        )
                    )
                ),
                c.setLocal("eY", c.i32_sub(c.getLocal("eY"), c.i32_const(1))),
                c.br(0)
            )));

            f.addCode(
                c.setLocal(
                    "sy",
                    c.i64_add(
                        c.i64_load32_u(
                            c.i32_sub(
                                c.i32_add( Y, c.getLocal("eY")),
                                c.i32_const(3)
                            ),
                            0,
                            0
                        ),
                        c.i64_const(1)
                    )
                )
            );

            // Force a divide by 0 if quotien is 0
            f.addCode(
                c.if(
                    c.i64_eq(
                        c.getLocal("sy"),
                        c.i64_const(1)
                    ),
                    c.drop(c.i64_div_u(c.i64_const(0), c.i64_const(0)))
                )
            );

            f.addCode(c.block(c.loop(

                // while (eX>7)&&(Y[eX]==0) ex--;
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_or(
                            c.i32_load8_u(
                                c.i32_add(R , c.getLocal("eX")),
                                0,
                                0
                            ),
                            c.i32_eq(
                                c.getLocal("eX"),
                                c.i32_const(7)
                            )
                        )
                    ),
                    c.setLocal("eX", c.i32_sub(c.getLocal("eX"), c.i32_const(1))),
                    c.br(0)
                )),

                c.setLocal(
                    "sx",
                    c.i64_load(
                        c.i32_sub(
                            c.i32_add( R, c.getLocal("eX")),
                            c.i32_const(7)
                        ),
                        0,
                        0
                    )
                ),

                c.setLocal(
                    "sx",
                    c.i64_div_u(
                        c.getLocal("sx"),
                        c.getLocal("sy")
                    )
                ),
                c.setLocal(
                    "ec",
                    c.i32_sub(
                        c.i32_sub(
                            c.getLocal("eX"),
                            c.getLocal("eY")
                        ),
                        c.i32_const(4)
                    )
                ),

                // While greater than 32 bits or ec is neg, shr and inc exp
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_and(
                            c.i64_eqz(
                                c.i64_and(
                                    c.getLocal("sx"),
                                    c.i64_const("0xFFFFFFFF00000000")
                                )
                            ),
                            c.i32_ge_s(
                                c.getLocal("ec"),
                                c.i32_const(0)
                            )
                        )
                    ),

                    c.setLocal(
                        "sx",
                        c.i64_shr_u(
                            c.getLocal("sx"),
                            c.i64_const(8)
                        )
                    ),

                    c.setLocal(
                        "ec",
                        c.i32_add(
                            c.getLocal("ec"),
                            c.i32_const(1)
                        )
                    ),
                    c.br(0)
                )),

                c.if(
                    c.i64_eqz(c.getLocal("sx")),
                    [
                        ...c.br_if(
                            2,
                            c.i32_eqz(c.call(prefix + "_gte", R, Y))
                        ),
                        ...c.setLocal("sx", c.i64_const(1)),
                        ...c.setLocal("ec", c.i32_const(0))
                    ]
                ),

                c.call(prefix + "__mul1", Y, c.getLocal("sx"), R2),
                c.drop(c.call(
                    prefix + "_sub",
                    R,
                    c.i32_sub(R2, c.getLocal("ec")),
                    R
                )),
                c.call(
                    prefix + "__add1",
                    c.i32_add(C, c.getLocal("ec")),
                    c.getLocal("sx")
                ),
                c.br(0)
            )));
        }

        function buildInverseMod() {

            const f = module.addFunction(prefix+"_inverseMod");
            f.addParam("px", "i32");
            f.addParam("pm", "i32");
            f.addParam("pr", "i32");
            f.addLocal("t", "i32");
            f.addLocal("newt", "i32");
            f.addLocal("r", "i32");
            f.addLocal("qq", "i32");
            f.addLocal("qr", "i32");
            f.addLocal("newr", "i32");
            f.addLocal("swp", "i32");
            f.addLocal("x", "i32");
            f.addLocal("signt", "i32");
            f.addLocal("signnewt", "i32");
            f.addLocal("signx", "i32");

            const c = f.getCodeBuilder();

            const aux1 = c.i32_const(module.alloc(n8));
            const aux2 = c.i32_const(module.alloc(n8));
            const aux3 = c.i32_const(module.alloc(n8));
            const aux4 = c.i32_const(module.alloc(n8));
            const aux5 = c.i32_const(module.alloc(n8));
            const aux6 = c.i32_const(module.alloc(n8));
            const mulBuff = c.i32_const(module.alloc(n8*2));
            const aux7 = c.i32_const(module.alloc(n8));

            f.addCode(
                c.setLocal("t", aux1),
                c.call(prefix + "_zero", aux1),
                c.setLocal("signt", c.i32_const(0)),
            );

            f.addCode(
                c.setLocal("r", aux2),
                c.call(prefix + "_copy", c.getLocal("pm"), aux2)
            );

            f.addCode(
                c.setLocal("newt", aux3),
                c.call(prefix + "_one", aux3),
                c.setLocal("signnewt", c.i32_const(0)),
            );

            f.addCode(
                c.setLocal("newr", aux4),
                c.call(prefix + "_copy", c.getLocal("px"), aux4)
            );




            f.addCode(c.setLocal("qq", aux5));
            f.addCode(c.setLocal("qr", aux6));
            f.addCode(c.setLocal("x", aux7));

            f.addCode(c.block(c.loop(
                c.br_if(
                    1,
                    c.call(prefix + "_isZero", c.getLocal("newr") )
                ),
                c.call(prefix + "_div", c.getLocal("r"), c.getLocal("newr"), c.getLocal("qq"), c.getLocal("qr")),

                c.call(prefix + "_mul", c.getLocal("qq"), c.getLocal("newt"), mulBuff),

                c.if(
                    c.getLocal("signt"),
                    c.if(
                        c.getLocal("signnewt"),
                        c.if (
                            c.call(prefix + "_gte", mulBuff, c.getLocal("t")),
                            [
                                ...c.drop(c.call(prefix + "_sub", mulBuff, c.getLocal("t"), c.getLocal("x"))),
                                ...c.setLocal("signx", c.i32_const(0))
                            ],
                            [
                                ...c.drop(c.call(prefix + "_sub", c.getLocal("t"), mulBuff, c.getLocal("x"))),
                                ...c.setLocal("signx", c.i32_const(1))
                            ],
                        ),
                        [
                            ...c.drop(c.call(prefix + "_add", mulBuff, c.getLocal("t"), c.getLocal("x"))),
                            ...c.setLocal("signx", c.i32_const(1))
                        ]
                    ),
                    c.if(
                        c.getLocal("signnewt"),
                        [
                            ...c.drop(c.call(prefix + "_add", mulBuff, c.getLocal("t"), c.getLocal("x"))),
                            ...c.setLocal("signx", c.i32_const(0))
                        ],
                        c.if (
                            c.call(prefix + "_gte", c.getLocal("t"), mulBuff),
                            [
                                ...c.drop(c.call(prefix + "_sub", c.getLocal("t"), mulBuff, c.getLocal("x"))),
                                ...c.setLocal("signx", c.i32_const(0))
                            ],
                            [
                                ...c.drop(c.call(prefix + "_sub", mulBuff, c.getLocal("t"), c.getLocal("x"))),
                                ...c.setLocal("signx", c.i32_const(1))
                            ]
                        )
                    )
                ),

                c.setLocal("swp", c.getLocal("t")),
                c.setLocal("t", c.getLocal("newt")),
                c.setLocal("newt", c.getLocal("x")),
                c.setLocal("x", c.getLocal("swp")),

                c.setLocal("signt", c.getLocal("signnewt")),
                c.setLocal("signnewt", c.getLocal("signx")),

                c.setLocal("swp", c.getLocal("r")),
                c.setLocal("r", c.getLocal("newr")),
                c.setLocal("newr", c.getLocal("qr")),
                c.setLocal("qr", c.getLocal("swp")),

                c.br(0)
            )));

            f.addCode(c.if(
                c.getLocal("signt"),
                c.drop(c.call(prefix + "_sub", c.getLocal("pm"), c.getLocal("t"), c.getLocal("pr"))),
                c.call(prefix + "_copy", c.getLocal("t"), c.getLocal("pr"))
            ));
        }


        buildCopy();
        buildZero();
        buildIsZero();
        buildOne();
        buildEq();
        buildGte();
        buildAdd();
        buildSub();
        buildMul();
        buildSquare();
        buildSquareOld();
        buildDiv();
        buildInverseMod();
        module.exportFunction(prefix+"_copy");
        module.exportFunction(prefix+"_zero");
        module.exportFunction(prefix+"_one");
        module.exportFunction(prefix+"_isZero");
        module.exportFunction(prefix+"_eq");
        module.exportFunction(prefix+"_gte");
        module.exportFunction(prefix+"_add");
        module.exportFunction(prefix+"_sub");
        module.exportFunction(prefix+"_mul");
        module.exportFunction(prefix+"_square");
        module.exportFunction(prefix+"_squareOld");
        module.exportFunction(prefix+"_div");
        module.exportFunction(prefix+"_inverseMod");

        return prefix;
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */
    var build_timesscalar = function buildTimesScalar(module, fnName, elementLen, opAB, opAA, opCopy, opInit) {

        const f = module.addFunction(fnName);
        f.addParam("base", "i32");
        f.addParam("scalar", "i32");
        f.addParam("scalarLength", "i32");
        f.addParam("r", "i32");
        f.addLocal("i", "i32");
        f.addLocal("b", "i32");

        const c = f.getCodeBuilder();

        const aux = c.i32_const(module.alloc(elementLen));

        f.addCode(
            c.if(
                c.i32_eqz(c.getLocal("scalarLength")),
                [
                    ...c.call(opInit, c.getLocal("r")),
                    ...c.ret([])
                ]
            )
        );
        f.addCode(c.call(opCopy, c.getLocal("base"), aux));
        f.addCode(c.call(opInit, c.getLocal("r")));
        f.addCode(c.setLocal("i", c.getLocal("scalarLength")));
        f.addCode(c.block(c.loop(
            c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),

            c.setLocal(
                "b",
                c.i32_load8_u(
                    c.i32_add(
                        c.getLocal("scalar"),
                        c.getLocal("i")
                    )
                )
            ),
            ...innerLoop(),
            c.br_if(1, c.i32_eqz ( c.getLocal("i") )),
            c.br(0)
        )));


        function innerLoop() {
            const code = [];
            for (let i=0; i<8; i++) {
                code.push(
                    ...c.call(opAA, c.getLocal("r"), c.getLocal("r")),
                    ...c.if(
                        c.i32_ge_u( c.getLocal("b"), c.i32_const(0x80 >> i)),
                        [
                            ...c.setLocal(
                                "b",
                                c.i32_sub(
                                    c.getLocal("b"),
                                    c.i32_const(0x80 >> i)
                                )
                            ),
                            ...c.call(opAB, c.getLocal("r"),aux, c.getLocal("r"))
                        ]
                    )
                );
            }
            return code;
        }

    };

    var build_batchinverse = buildBatchInverse;

    function buildBatchInverse(module, prefix) {


        const n8 = module.modules[prefix].n64*8;

        const f = module.addFunction(prefix+"_batchInverse");
        f.addParam("pIn", "i32");
        f.addParam("inStep", "i32");
        f.addParam("n", "i32");
        f.addParam("pOut", "i32");
        f.addParam("outStep", "i32");
        f.addLocal("itAux", "i32");
        f.addLocal("itIn", "i32");
        f.addLocal("itOut","i32");
        f.addLocal("i","i32");

        const c = f.getCodeBuilder();

        const AUX = c.i32_const(module.alloc(n8));


        // Alloc Working space for accumulated umltiplications
        f.addCode(
            c.setLocal("itAux", c.i32_load( c.i32_const(0) )),
            c.i32_store(
                c.i32_const(0),
                c.i32_add(
                    c.getLocal("itAux"),
                    c.i32_mul(
                        c.i32_add(
                            c.getLocal("n"),
                            c.i32_const(1)
                        ),
                        c.i32_const(n8)
                    )
                )
            )
        );

        f.addCode(

            // aux[0] = a;
            c.call(prefix+"_one", c.getLocal("itAux")),
            // for (i=0;i<n;i++) aux[i] = aux[i-1]*in[i]
            c.setLocal("itIn", c.getLocal("pIn")),
            c.setLocal("itAux", c.i32_add(c.getLocal("itAux"), c.i32_const(n8))),
            c.setLocal("i", c.i32_const(0)),

            c.block(c.loop(
                c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),
                c.if(
                    c.call(prefix+"_isZero", c.getLocal("itIn")),
                    c.call(
                        prefix + "_copy",
                        c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)),
                        c.getLocal("itAux")
                    ),
                    c.call(
                        prefix+"_mul",
                        c.getLocal("itIn"),
                        c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)),
                        c.getLocal("itAux")
                    )
                ),
                c.setLocal("itIn", c.i32_add(c.getLocal("itIn"), c.getLocal("inStep"))),
                c.setLocal("itAux", c.i32_add(c.getLocal("itAux"), c.i32_const(n8))),
                c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                c.br(0)
            )),

            // point to the last
            c.setLocal("itIn", c.i32_sub(c.getLocal("itIn"), c.getLocal("inStep"))),
            c.setLocal("itAux", c.i32_sub(c.getLocal("itAux"), c.i32_const(n8))),
            // itOut = pOut + (n-1)*stepOut   // Point to the last
            c.setLocal(
                "itOut",
                c.i32_add(
                    c.getLocal("pOut"),
                    c.i32_mul(
                        c.i32_sub(c.getLocal("n"), c.i32_const(1)),
                        c.getLocal("outStep"),
                    )
                )
            ),

            // aux[n-1] = 1/aux[n-1]
            c.call(prefix+"_inverse", c.getLocal("itAux"), c.getLocal("itAux") ),

            c.block(c.loop(
                c.br_if(1, c.i32_eqz( c.getLocal("i"))),
                c.if(
                    c.call(prefix+"_isZero", c.getLocal("itIn")),
                    [
                        ...c.call(
                            prefix + "_copy",
                            c.getLocal("itAux"),
                            c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)),
                        ),
                        ...c.call(
                            prefix + "_zero",
                            c.getLocal("itOut")
                        )
                    ],[
                        ...c.call(prefix + "_copy", c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)), AUX),
                        ...c.call(
                            prefix+"_mul",
                            c.getLocal("itAux"),
                            c.getLocal("itIn"),
                            c.i32_sub(c.getLocal("itAux"), c.i32_const(n8)),
                        ),
                        ...c.call(
                            prefix+"_mul",
                            c.getLocal("itAux"),
                            AUX,
                            c.getLocal("itOut")
                        )
                    ]
                ),
                c.setLocal("itIn", c.i32_sub(c.getLocal("itIn"), c.getLocal("inStep"))),
                c.setLocal("itOut", c.i32_sub(c.getLocal("itOut"), c.getLocal("outStep"))),
                c.setLocal("itAux", c.i32_sub(c.getLocal("itAux"), c.i32_const(n8))),
                c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),
                c.br(0)
            ))

        );


        // Recover Old memory
        f.addCode(
            c.i32_store(
                c.i32_const(0),
                c.getLocal("itAux")
            )
        );

    }

    var build_batchconvertion = buildBatchConvertion$1;

    function buildBatchConvertion$1(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {
        if (typeof reverse === "undefined") {
            // Set the reverse in a way that allows to use the same buffer as in/out.
            if (sizeIn < sizeOut) {
                reverse = true;
            } else {
                reverse = false;
            }
        }

        const f = module.addFunction(fnName);
        f.addParam("pIn", "i32");
        f.addParam("n", "i32");
        f.addParam("pOut", "i32");
        f.addLocal("i", "i32");
        f.addLocal("itIn", "i32");
        f.addLocal("itOut", "i32");

        const c = f.getCodeBuilder();

        if (reverse) {
            f.addCode(
                c.setLocal("itIn",
                    c.i32_add(
                        c.getLocal("pIn"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeIn)
                        )
                    )
                ),
                c.setLocal("itOut",
                    c.i32_add(
                        c.getLocal("pOut"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeOut)
                        )
                    )
                ),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                    c.call(internalFnName, c.getLocal("itIn"), c.getLocal("itOut")),

                    c.setLocal("itIn", c.i32_sub(c.getLocal("itIn"), c.i32_const(sizeIn))),
                    c.setLocal("itOut", c.i32_sub(c.getLocal("itOut"), c.i32_const(sizeOut))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
            );
        } else {
            f.addCode(
                c.setLocal("itIn", c.getLocal("pIn")),
                c.setLocal("itOut", c.getLocal("pOut")),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                    c.call(internalFnName, c.getLocal("itIn"), c.getLocal("itOut")),

                    c.setLocal("itIn", c.i32_add(c.getLocal("itIn"), c.i32_const(sizeIn))),
                    c.setLocal("itOut", c.i32_add(c.getLocal("itOut"), c.i32_const(sizeOut))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
            );
        }
    }

    var build_batchop = buildBatchConvertion;

    function buildBatchConvertion(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {
        if (typeof reverse === "undefined") {
            // Set the reverse in a way that allows to use the same buffer as in/out.
            if (sizeIn < sizeOut) {
                reverse = true;
            } else {
                reverse = false;
            }
        }

        const f = module.addFunction(fnName);
        f.addParam("pIn1", "i32");
        f.addParam("pIn2", "i32");
        f.addParam("n", "i32");
        f.addParam("pOut", "i32");
        f.addLocal("i", "i32");
        f.addLocal("itIn1", "i32");
        f.addLocal("itIn2", "i32");
        f.addLocal("itOut", "i32");

        const c = f.getCodeBuilder();

        if (reverse) {
            f.addCode(
                c.setLocal("itIn1",
                    c.i32_add(
                        c.getLocal("pIn1"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeIn)
                        )
                    )
                ),
                c.setLocal("itIn2",
                    c.i32_add(
                        c.getLocal("pIn2"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeIn)
                        )
                    )
                ),
                c.setLocal("itOut",
                    c.i32_add(
                        c.getLocal("pOut"),
                        c.i32_mul(
                            c.i32_sub(
                                c.getLocal("n"),
                                c.i32_const(1)
                            ),
                            c.i32_const(sizeOut)
                        )
                    )
                ),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                    c.call(internalFnName, c.getLocal("itIn1"), c.getLocal("itIn2"), c.getLocal("itOut")),

                    c.setLocal("itIn1", c.i32_sub(c.getLocal("itIn1"), c.i32_const(sizeIn))),
                    c.setLocal("itIn2", c.i32_sub(c.getLocal("itIn2"), c.i32_const(sizeIn))),
                    c.setLocal("itOut", c.i32_sub(c.getLocal("itOut"), c.i32_const(sizeOut))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
            );
        } else {
            f.addCode(
                c.setLocal("itIn1", c.getLocal("pIn1")),
                c.setLocal("itIn2", c.getLocal("pIn2")),
                c.setLocal("itOut", c.getLocal("pOut")),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                    c.call(internalFnName, c.getLocal("itIn1"), c.getLocal("itIn2"), c.getLocal("itOut")),

                    c.setLocal("itIn1", c.i32_add(c.getLocal("itIn1"), c.i32_const(sizeIn))),
                    c.setLocal("itIn2", c.i32_add(c.getLocal("itIn2"), c.i32_const(sizeIn))),
                    c.setLocal("itOut", c.i32_add(c.getLocal("itOut"), c.i32_const(sizeOut))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
            );
        }
    }

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var build_f1m = function buildF1m(module, _q, _prefix, _intPrefix) {
        const q = BigInteger(_q);
        const n64 = Math.floor((q.minus(1).bitLength() - 1)/64) +1;
        const n32 = n64*2;
        const n8 = n64*8;

        const prefix = _prefix || "f1m";
        if (module.modules[prefix]) return prefix;  // already builded

        const intPrefix = build_int(module, n64, _intPrefix);
        const pq = module.alloc(n8, utils$3.bigInt2BytesLE(q, n8));

        module.alloc(utils$3.bigInt2BytesLE(BigInteger.one.shiftLeft(n64*64).mod(q), n8));
        const pR2 = module.alloc(utils$3.bigInt2BytesLE(BigInteger.one.shiftLeft(n64*64).square().mod(q), n8));
        const pOne = module.alloc(utils$3.bigInt2BytesLE(BigInteger.one.shiftLeft(n64*64).mod(q), n8));
        const pZero = module.alloc(utils$3.bigInt2BytesLE(BigInteger.zero, n8));
        const _minusOne = q.minus(BigInteger.one);
        const _e = _minusOne.shiftRight(1); // e = (p-1)/2
        const pe = module.alloc(n8, utils$3.bigInt2BytesLE(_e, n8));

        const _ePlusOne = _e.add(BigInteger.one); // e = (p-1)/2
        const pePlusOne = module.alloc(n8, utils$3.bigInt2BytesLE(_ePlusOne, n8));

        module.modules[prefix] = {
            pq: pq,
            pR2: pR2,
            n64: n64,
            q: q,
            pOne: pOne,
            pZero: pZero,
            pePlusOne: pePlusOne
        };

        function buildOne() {
            const f = module.addFunction(prefix+"_one");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(intPrefix + "_copy", c.i32_const(pOne), c.getLocal("pr")));
        }

        function buildAdd() {
            const f = module.addFunction(prefix+"_add");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.if(
                    c.call(intPrefix+"_add", c.getLocal("x"),  c.getLocal("y"), c.getLocal("r")),
                    c.drop(c.call(intPrefix+"_sub", c.getLocal("r"), c.i32_const(pq), c.getLocal("r"))),
                    c.if(
                        c.call(intPrefix+"_gte", c.getLocal("r"), c.i32_const(pq)  ),
                        c.drop(c.call(intPrefix+"_sub", c.getLocal("r"), c.i32_const(pq), c.getLocal("r"))),
                    )
                )
            );
        }

        function buildSub() {
            const f = module.addFunction(prefix+"_sub");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.if(
                    c.call(intPrefix+"_sub", c.getLocal("x"),  c.getLocal("y"), c.getLocal("r")),
                    c.drop(c.call(intPrefix+"_add", c.getLocal("r"),  c.i32_const(pq), c.getLocal("r")))
                )
            );
        }

        function buildNeg() {
            const f = module.addFunction(prefix+"_neg");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.call(prefix + "_sub", c.i32_const(pZero), c.getLocal("x"), c.getLocal("r"))
            );
        }


        function buildIsNegative() {
            const f = module.addFunction(prefix+"_isNegative");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8));

            f.addCode(
                c.call(prefix + "_fromMontgomery", c.getLocal("x"), AUX),
                c.call(intPrefix + "_gte", AUX, c.i32_const(pePlusOne) )
            );
        }


    /*
        function buildIsNegative() {
            const f = module.addFunction(prefix+"_isNegative");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8));

            f.addCode(
                c.call(prefix + "_fromMontgomery", c.getLocal("x"), AUX),
                c.i32_and(
                    c.i32_load(AUX),
                    c.i32_const(1)
                )
            );
        }
    */

        function buildSign() {
            const f = module.addFunction(prefix+"_sign");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if (
                    c.call(intPrefix + "_isZero", c.getLocal("x")),
                    c.ret(c.i32_const(0))
                ),
                c.call(prefix + "_fromMontgomery", c.getLocal("x"), AUX),
                c.if(
                    c.call(intPrefix + "_gte", AUX, c.i32_const(pePlusOne)),
                    c.ret(c.i32_const(-1))
                ),
                c.ret(c.i32_const(1))
            );
        }


        function buildMReduct() {
            const carries = module.alloc(n32*n32*8);

            const f = module.addFunction(prefix+"_mReduct");
            f.addParam("t", "i32");
            f.addParam("r", "i32");
            f.addLocal("np32", "i64");
            f.addLocal("c", "i64");
            f.addLocal("m", "i64");

            const c = f.getCodeBuilder();

            const np32 = BigInteger("100000000",16).minus( q.modInv(BigInteger("100000000",16))).toJSNumber();

            f.addCode(c.setLocal("np32", c.i64_const(np32)));

            for (let i=0; i<n32; i++) {
                f.addCode(c.setLocal("c", c.i64_const(0)));

                f.addCode(
                    c.setLocal(
                        "m",
                        c.i64_and(
                            c.i64_mul(
                                c.i64_load32_u(c.getLocal("t"), i*4),
                                c.getLocal("np32")
                            ),
                            c.i64_const("0xFFFFFFFF")
                        )
                    )
                );

                for (let j=0; j<n32; j++) {

                    f.addCode(
                        c.setLocal("c",
                            c.i64_add(
                                c.i64_add(
                                    c.i64_load32_u(c.getLocal("t"), (i+j)*4),
                                    c.i64_shr_u(c.getLocal("c"), c.i64_const(32))
                                ),
                                c.i64_mul(
                                    c.i64_load32_u(c.i32_const(pq), j*4),
                                    c.getLocal("m")
                                )
                            )
                        )
                    );

                    f.addCode(
                        c.i64_store32(
                            c.getLocal("t"),
                            (i+j)*4,
                            c.getLocal("c")
                        )
                    );
                }

                f.addCode(
                    c.i64_store32(
                        c.i32_const(carries),
                        i*4,
                        c.i64_shr_u(c.getLocal("c"), c.i64_const(32))
                    )
                );
            }

            f.addCode(
                c.call(
                    prefix+"_add",
                    c.i32_const(carries),
                    c.i32_add(
                        c.getLocal("t"),
                        c.i32_const(n32*4)
                    ),
                    c.getLocal("r")
                )
            );
        }



        function buildMul() {

            const f = module.addFunction(prefix+"_mul");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");
            f.addLocal("c0", "i64");
            f.addLocal("c1", "i64");
            f.addLocal("np32", "i64");


            for (let i=0;i<n32; i++) {
                f.addLocal("x"+i, "i64");
                f.addLocal("y"+i, "i64");
                f.addLocal("m"+i, "i64");
                f.addLocal("q"+i, "i64");
            }

            const c = f.getCodeBuilder();

            const np32 = BigInteger("100000000",16).minus( q.modInv(BigInteger("100000000",16))).toJSNumber();

            f.addCode(c.setLocal("np32", c.i64_const(np32)));


            const loadX = [];
            const loadY = [];
            const loadQ = [];
            function mulij(i, j) {
                let X,Y;
                if (!loadX[i]) {
                    X = c.teeLocal("x"+i, c.i64_load32_u( c.getLocal("x"), i*4));
                    loadX[i] = true;
                } else {
                    X = c.getLocal("x"+i);
                }
                if (!loadY[j]) {
                    Y = c.teeLocal("y"+j, c.i64_load32_u( c.getLocal("y"), j*4));
                    loadY[j] = true;
                } else {
                    Y = c.getLocal("y"+j);
                }

                return c.i64_mul( X, Y );
            }

            function mulqm(i, j) {
                let Q,M;
                if (!loadQ[i]) {
                    Q = c.teeLocal("q"+i, c.i64_load32_u(c.i32_const(0), pq+i*4 ));
                    loadQ[i] = true;
                } else {
                    Q = c.getLocal("q"+i);
                }
                M = c.getLocal("m"+j);

                return c.i64_mul( Q, M );
            }


            let c0 = "c0";
            let c1 = "c1";

            for (let k=0; k<n32*2-1; k++) {
                for (let i=Math.max(0, k-n32+1); (i<=k)&&(i<n32); i++) {
                    const j= k-i;

                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulij(i,j)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }


                for (let i=Math.max(1, k-n32+1); (i<=k)&&(i<n32); i++) {
                    const j= k-i;

                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulqm(i,j)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }
                if (k<n32) {
                    f.addCode(
                        c.setLocal(
                            "m"+k,
                            c.i64_and(
                                c.i64_mul(
                                    c.i64_and(
                                        c.getLocal(c0),
                                        c.i64_const(0xFFFFFFFF)
                                    ),
                                    c.getLocal("np32")
                                ),
                                c.i64_const("0xFFFFFFFF")
                            )
                        )
                    );


                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulqm(0,k)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }


                if (k>=n32) {
                    f.addCode(
                        c.i64_store32(
                            c.getLocal("r"),
                            (k-n32)*4,
                            c.getLocal(c0)
                        )
                    );
                }
                [c0, c1] = [c1, c0];
                f.addCode(
                    c.setLocal(c1,
                        c.i64_shr_u(
                            c.getLocal(c0),
                            c.i64_const(32)
                        )
                    )
                );
            }
            f.addCode(
                c.i64_store32(
                    c.getLocal("r"),
                    n32*4-4,
                    c.getLocal(c0)
                )
            );

            f.addCode(
                c.if(
                    c.i32_wrap_i64(c.getLocal(c1)),
                    c.drop(c.call(intPrefix+"_sub", c.getLocal("r"), c.i32_const(pq), c.getLocal("r"))),
                    c.if(
                        c.call(intPrefix+"_gte", c.getLocal("r"), c.i32_const(pq)  ),
                        c.drop(c.call(intPrefix+"_sub", c.getLocal("r"), c.i32_const(pq), c.getLocal("r"))),
                    )
                )
            );
        }


        function buildSquare() {

            const f = module.addFunction(prefix+"_square");
            f.addParam("x", "i32");
            f.addParam("r", "i32");
            f.addLocal("c0", "i64");
            f.addLocal("c1", "i64");
            f.addLocal("c0_old", "i64");
            f.addLocal("c1_old", "i64");
            f.addLocal("np32", "i64");


            for (let i=0;i<n32; i++) {
                f.addLocal("x"+i, "i64");
                f.addLocal("m"+i, "i64");
                f.addLocal("q"+i, "i64");
            }

            const c = f.getCodeBuilder();

            const np32 = BigInteger("100000000",16).minus( q.modInv(BigInteger("100000000",16))).toJSNumber();

            f.addCode(c.setLocal("np32", c.i64_const(np32)));


            const loadX = [];
            const loadQ = [];
            function mulij(i, j) {
                let X,Y;
                if (!loadX[i]) {
                    X = c.teeLocal("x"+i, c.i64_load32_u( c.getLocal("x"), i*4));
                    loadX[i] = true;
                } else {
                    X = c.getLocal("x"+i);
                }
                if (!loadX[j]) {
                    Y = c.teeLocal("x"+j, c.i64_load32_u( c.getLocal("x"), j*4));
                    loadX[j] = true;
                } else {
                    Y = c.getLocal("x"+j);
                }

                return c.i64_mul( X, Y );
            }

            function mulqm(i, j) {
                let Q,M;
                if (!loadQ[i]) {
                    Q = c.teeLocal("q"+i, c.i64_load32_u(c.i32_const(0), pq+i*4 ));
                    loadQ[i] = true;
                } else {
                    Q = c.getLocal("q"+i);
                }
                M = c.getLocal("m"+j);

                return c.i64_mul( Q, M );
            }


            let c0 = "c0";
            let c1 = "c1";
            let c0_old = "c0_old";
            let c1_old = "c1_old";

            for (let k=0; k<n32*2-1; k++) {
                f.addCode(
                    c.setLocal(c0, c.i64_const(0)),
                    c.setLocal(c1, c.i64_const(0)),
                );
                for (let i=Math.max(0, k-n32+1); (i<((k+1)>>1) )&&(i<n32); i++) {
                    const j= k-i;

                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulij(i,j)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }

                // Multiply by 2
                f.addCode(
                    c.setLocal(c0,
                        c.i64_shl(
                            c.i64_and(
                                c.getLocal(c0),
                                c.i64_const(0xFFFFFFFF)
                            ),
                            c.i64_const(1)
                        )
                    )
                );

                f.addCode(
                    c.setLocal(c1,
                        c.i64_add(
                            c.i64_shl(
                                c.getLocal(c1),
                                c.i64_const(1)
                            ),
                            c.i64_shr_u(
                                c.getLocal(c0),
                                c.i64_const(32)
                            )
                        )
                    )
                );

                if (k%2 == 0) {
                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulij(k>>1, k>>1)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }

                // Add the old carry

                if (k>0) {
                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                c.i64_and(
                                    c.getLocal(c0_old),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.i64_add(
                                    c.getLocal(c1),
                                    c.i64_shr_u(
                                        c.getLocal(c0),
                                        c.i64_const(32)
                                    )
                                ),
                                c.getLocal(c1_old)
                            )
                        )
                    );
                }


                for (let i=Math.max(1, k-n32+1); (i<=k)&&(i<n32); i++) {
                    const j= k-i;

                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulqm(i,j)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }
                if (k<n32) {
                    f.addCode(
                        c.setLocal(
                            "m"+k,
                            c.i64_and(
                                c.i64_mul(
                                    c.i64_and(
                                        c.getLocal(c0),
                                        c.i64_const(0xFFFFFFFF)
                                    ),
                                    c.getLocal("np32")
                                ),
                                c.i64_const("0xFFFFFFFF")
                            )
                        )
                    );


                    f.addCode(
                        c.setLocal(c0,
                            c.i64_add(
                                c.i64_and(
                                    c.getLocal(c0),
                                    c.i64_const(0xFFFFFFFF)
                                ),
                                mulqm(0,k)
                            )
                        )
                    );

                    f.addCode(
                        c.setLocal(c1,
                            c.i64_add(
                                c.getLocal(c1),
                                c.i64_shr_u(
                                    c.getLocal(c0),
                                    c.i64_const(32)
                                )
                            )
                        )
                    );
                }

                if (k>=n32) {
                    f.addCode(
                        c.i64_store32(
                            c.getLocal("r"),
                            (k-n32)*4,
                            c.getLocal(c0)
                        )
                    );
                }
                f.addCode(
                    c.setLocal(
                        c0_old,
                        c.getLocal(c1)
                    ),
                    c.setLocal(
                        c1_old,
                        c.i64_shr_u(
                            c.getLocal(c0_old),
                            c.i64_const(32)
                        )
                    )
                );
            }
            f.addCode(
                c.i64_store32(
                    c.getLocal("r"),
                    n32*4-4,
                    c.getLocal(c0_old)
                )
            );

            f.addCode(
                c.if(
                    c.i32_wrap_i64(c.getLocal(c1_old)),
                    c.drop(c.call(intPrefix+"_sub", c.getLocal("r"), c.i32_const(pq), c.getLocal("r"))),
                    c.if(
                        c.call(intPrefix+"_gte", c.getLocal("r"), c.i32_const(pq)  ),
                        c.drop(c.call(intPrefix+"_sub", c.getLocal("r"), c.i32_const(pq), c.getLocal("r"))),
                    )
                )
            );
        }


        function buildSquareOld() {
            const f = module.addFunction(prefix+"_squareOld");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(prefix + "_mul", c.getLocal("x"), c.getLocal("x"), c.getLocal("r")));
        }

        function buildToMontgomery() {
            const f = module.addFunction(prefix+"_toMontgomery");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();
            f.addCode(c.call(prefix+"_mul", c.getLocal("x"), c.i32_const(pR2), c.getLocal("r")));
        }

        function buildFromMontgomery() {

            const pAux2 = module.alloc(n8*2);

            const f = module.addFunction(prefix+"_fromMontgomery");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();
            f.addCode(c.call(intPrefix + "_copy", c.getLocal("x"), c.i32_const(pAux2) ));
            f.addCode(c.call(intPrefix + "_zero", c.i32_const(pAux2 + n8) ));
            f.addCode(c.call(prefix+"_mReduct", c.i32_const(pAux2), c.getLocal("r")));
        }

        function buildInverse() {

            const f = module.addFunction(prefix+ "_inverse");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();
            f.addCode(c.call(prefix + "_fromMontgomery", c.getLocal("x"), c.getLocal("r")));
            f.addCode(c.call(intPrefix + "_inverseMod", c.getLocal("r"), c.i32_const(pq), c.getLocal("r")));
            f.addCode(c.call(prefix + "_toMontgomery", c.getLocal("r"), c.getLocal("r")));
        }

        // Calculate various valuse needed for sqrt


        let _nqr = BigInteger(2);
        if (q.isPrime()) {
            while (!_nqr.modPow(_e, q).equals(_minusOne)) _nqr = _nqr.add(BigInteger.one);
        }

        module.alloc(utils$3.bigInt2BytesLE(_nqr.shiftLeft(n64*64).mod(q), n8));

        let s2 = 0;
        let _t = _minusOne;

        while ((!_t.isOdd())&&(!_t.isZero())) {
            s2++;
            _t = _t.shiftRight(1);
        }
        const pt = module.alloc(n8, utils$3.bigInt2BytesLE(_t, n8));

        const _nqrToT = _nqr.modPow(_t, q);
        const pNqrToT = module.alloc(utils$3.bigInt2BytesLE(_nqrToT.shiftLeft(n64*64).mod(q), n8));

        const _tPlusOneOver2 = _t.add(1).shiftRight(1);
        const ptPlusOneOver2 = module.alloc(n8, utils$3.bigInt2BytesLE(_tPlusOneOver2, n8));

        function buildSqrt() {

            const f = module.addFunction(prefix+ "_sqrt");
            f.addParam("n", "i32");
            f.addParam("r", "i32");
            f.addLocal("m", "i32");
            f.addLocal("i", "i32");
            f.addLocal("j", "i32");

            const c = f.getCodeBuilder();

            const ONE = c.i32_const(pOne);
            const C = c.i32_const(module.alloc(n8));
            const T = c.i32_const(module.alloc(n8));
            const R = c.i32_const(module.alloc(n8));
            const SQ = c.i32_const(module.alloc(n8));
            const B = c.i32_const(module.alloc(n8));

            f.addCode(

                // If (n==0) return 0
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("n")),
                    c.ret(
                        c.call(prefix + "_zero", c.getLocal("r"))
                    )
                ),

                c.setLocal("m", c.i32_const(s2)),
                c.call(prefix + "_copy", c.i32_const(pNqrToT), C),
                c.call(prefix + "_exp", c.getLocal("n"), c.i32_const(pt), c.i32_const(n8), T),
                c.call(prefix + "_exp", c.getLocal("n"), c.i32_const(ptPlusOneOver2), c.i32_const(n8), R),

                c.block(c.loop(
                    c.br_if(1, c.call(prefix + "_eq", T, ONE)),

                    c.call(prefix + "_square", T, SQ),
                    c.setLocal("i", c.i32_const(1)),
                    c.block(c.loop(
                        c.br_if(1, c.call(prefix + "_eq", SQ, ONE)),
                        c.call(prefix + "_square", SQ, SQ),
                        c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                        c.br(0)
                    )),

                    c.call(prefix + "_copy", C, B),
                    c.setLocal("j", c.i32_sub(c.i32_sub( c.getLocal("m"), c.getLocal("i")), c.i32_const(1)) ),
                    c.block(c.loop(
                        c.br_if(1, c.i32_eqz(c.getLocal("j"))),
                        c.call(prefix + "_square", B, B),
                        c.setLocal("j", c.i32_sub(c.getLocal("j"), c.i32_const(1))),
                        c.br(0)
                    )),

                    c.setLocal("m", c.getLocal("i")),
                    c.call(prefix + "_square", B, C),
                    c.call(prefix + "_mul", T, C, T),
                    c.call(prefix + "_mul", R, B, R),

                    c.br(0)
                )),

                c.if(
                    c.call(prefix + "_isNegative", R),
                    c.call(prefix + "_neg", R, c.getLocal("r")),
                    c.call(prefix + "_copy", R, c.getLocal("r")),
                )
            );
        }

        function buildIsSquare() {
            const f = module.addFunction(prefix+"_isSquare");
            f.addParam("n", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const ONE = c.i32_const(pOne);
            const AUX = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("n")),
                    c.ret(c.i32_const(1))
                ),
                c.call(prefix + "_exp", c.getLocal("n"), c.i32_const(pe), c.i32_const(n8), AUX),
                c.call(prefix + "_eq", AUX, ONE)
            );
        }


        function buildLoad() {
            const f = module.addFunction(prefix+"_load");
            f.addParam("scalar", "i32");
            f.addParam("scalarLen", "i32");
            f.addParam("r", "i32");
            f.addLocal("p", "i32");
            f.addLocal("l", "i32");
            f.addLocal("i", "i32");
            f.addLocal("j", "i32");
            const c = f.getCodeBuilder();

            const R = c.i32_const(module.alloc(n8));
            const pAux = module.alloc(n8);
            const AUX = c.i32_const(pAux);

            f.addCode(
                c.call(intPrefix + "_zero", c.getLocal("r")),
                c.setLocal("i", c.i32_const(n8)),
                c.setLocal("p", c.getLocal("scalar")),
                c.block(c.loop(
                    c.br_if(1, c.i32_gt_u(c.getLocal("i"), c.getLocal("scalarLen"))),

                    c.if(
                        c.i32_eq(c.getLocal("i"), c.i32_const(n8)),
                        c.call(prefix + "_one", R),
                        c.call(prefix + "_mul", R, c.i32_const(pR2), R)
                    ),
                    c.call(prefix + "_mul", c.getLocal("p"), R, AUX),
                    c.call(prefix + "_add", c.getLocal("r"), AUX, c.getLocal("r")),

                    c.setLocal("p", c.i32_add(c.getLocal("p"), c.i32_const(n8))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(n8))),
                    c.br(0)
                )),

                c.setLocal("l", c.i32_rem_u( c.getLocal("scalarLen"), c.i32_const(n8))),
                c.if(c.i32_eqz(c.getLocal("l")), c.ret([])),
                c.call(intPrefix + "_zero", AUX),
                c.setLocal("j", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq(c.getLocal("j"), c.getLocal("l"))),

                    c.i32_store8(
                        c.getLocal("j"),
                        pAux,
                        c.i32_load8_u(c.getLocal("p")),
                    ),
                    c.setLocal("p", c.i32_add(c.getLocal("p"), c.i32_const(1))),
                    c.setLocal("j", c.i32_add(c.getLocal("j"), c.i32_const(1))),
                    c.br(0)
                )),

                c.if(
                    c.i32_eq(c.getLocal("i"), c.i32_const(n8)),
                    c.call(prefix + "_one", R),
                    c.call(prefix + "_mul", R, c.i32_const(pR2), R)
                ),
                c.call(prefix + "_mul", AUX, R, AUX),
                c.call(prefix + "_add", c.getLocal("r"), AUX, c.getLocal("r")),
            );
        }

        function buildTimesScalar() {
            const f = module.addFunction(prefix+"_timesScalar");
            f.addParam("x", "i32");
            f.addParam("scalar", "i32");
            f.addParam("scalarLen", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8));

            f.addCode(
                c.call(prefix + "_load", c.getLocal("scalar"), c.getLocal("scalarLen"), AUX),
                c.call(prefix + "_toMontgomery", AUX, AUX),
                c.call(prefix + "_mul", c.getLocal("x"), AUX, c.getLocal("r")),
            );
        }

        function buildIsOne() {
            const f = module.addFunction(prefix+"_isOne");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();
            f.addCode(
                c.ret(c.call(intPrefix + "_eq", c.getLocal("x"), c.i32_const(pOne)))
            );
        }


        module.exportFunction(intPrefix + "_copy", prefix+"_copy");
        module.exportFunction(intPrefix + "_zero", prefix+"_zero");
        module.exportFunction(intPrefix + "_isZero", prefix+"_isZero");
        module.exportFunction(intPrefix + "_eq", prefix+"_eq");

        buildIsOne();
        buildAdd();
        buildSub();
        buildNeg();
        buildMReduct();
        buildMul();
        buildSquare();
        buildSquareOld();
        buildToMontgomery();
        buildFromMontgomery();
        buildIsNegative();
        buildSign();
        buildInverse();
        buildOne();
        buildLoad();
        buildTimesScalar();
        build_batchinverse(module, prefix);
        build_batchconvertion(module, prefix + "_batchToMontgomery", prefix + "_toMontgomery", n8, n8);
        build_batchconvertion(module, prefix + "_batchFromMontgomery", prefix + "_fromMontgomery", n8, n8);
        build_batchconvertion(module, prefix + "_batchNeg", prefix + "_neg", n8, n8);
        build_batchop(module, prefix + "_batchAdd", prefix + "_add", n8, n8);
        build_batchop(module, prefix + "_batchSub", prefix + "_sub", n8, n8);
        build_batchop(module, prefix + "_batchMul", prefix + "_mul", n8, n8);

        module.exportFunction(prefix + "_add");
        module.exportFunction(prefix + "_sub");
        module.exportFunction(prefix + "_neg");
        module.exportFunction(prefix + "_isNegative");
        module.exportFunction(prefix + "_isOne");
        module.exportFunction(prefix + "_sign");
        module.exportFunction(prefix + "_mReduct");
        module.exportFunction(prefix + "_mul");
        module.exportFunction(prefix + "_square");
        module.exportFunction(prefix + "_squareOld");
        module.exportFunction(prefix + "_fromMontgomery");
        module.exportFunction(prefix + "_toMontgomery");
        module.exportFunction(prefix + "_inverse");
        module.exportFunction(prefix + "_one");
        module.exportFunction(prefix + "_load");
        module.exportFunction(prefix + "_timesScalar");
        build_timesscalar(
            module,
            prefix + "_exp",
            n8,
            prefix + "_mul",
            prefix + "_square",
            intPrefix + "_copy",
            prefix + "_one",
        );
        module.exportFunction(prefix + "_exp");
        module.exportFunction(prefix + "_batchInverse");
        if (q.isPrime()) {
            buildSqrt();
            buildIsSquare();
            module.exportFunction(prefix + "_sqrt");
            module.exportFunction(prefix + "_isSquare");
        }
        module.exportFunction(prefix + "_batchToMontgomery");
        module.exportFunction(prefix + "_batchFromMontgomery");
        // console.log(module.functionIdxByName);

        return prefix;
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var build_f1 = function buildF1(module, _q, _prefix, _f1mPrefix, _intPrefix) {

        const q = BigInteger(_q);
        const n64 = Math.floor((q.minus(1).bitLength() - 1)/64) +1;
        const n8 = n64*8;

        const prefix = _prefix || "f1";
        if (module.modules[prefix]) return prefix;  // already builded
        module.modules[prefix] = {
            n64: n64
        };

        const intPrefix = _intPrefix || "int";
        const f1mPrefix = build_f1m(module, q, _f1mPrefix, intPrefix);


        const pR2 =     module.modules[f1mPrefix].pR2;
        const pq =     module.modules[f1mPrefix].pq;
        const pePlusOne = module.modules[f1mPrefix].pePlusOne;

        function buildMul() {
            const pAux1 = module.alloc(n8);

            const f = module.addFunction(prefix+ "_mul");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();
            f.addCode(c.call(f1mPrefix + "_mul", c.getLocal("x"), c.getLocal("y"), c.i32_const(pAux1)));
            f.addCode(c.call(f1mPrefix + "_mul", c.i32_const(pAux1), c.i32_const(pR2), c.getLocal("r")));
        }

        function buildSquare() {
            const f = module.addFunction(prefix+"_square");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(prefix + "_mul", c.getLocal("x"), c.getLocal("x"), c.getLocal("r")));
        }


        function buildInverse() {

            const f = module.addFunction(prefix+ "_inverse");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();
            f.addCode(c.call(intPrefix + "_inverseMod", c.getLocal("x"), c.i32_const(pq), c.getLocal("r")));
        }

        function buildIsNegative() {
            const f = module.addFunction(prefix+"_isNegative");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.call(intPrefix + "_gte", c.getLocal("x"), c.i32_const(pePlusOne) )
            );
        }


        buildMul();
        buildSquare();
        buildInverse();
        buildIsNegative();
        module.exportFunction(f1mPrefix + "_add", prefix + "_add");
        module.exportFunction(f1mPrefix + "_sub", prefix + "_sub");
        module.exportFunction(f1mPrefix + "_neg", prefix + "_neg");
        module.exportFunction(prefix + "_mul");
        module.exportFunction(prefix + "_square");
        module.exportFunction(prefix + "_inverse");
        module.exportFunction(prefix + "_isNegative");
        module.exportFunction(f1mPrefix + "_copy", prefix+"_copy");
        module.exportFunction(f1mPrefix + "_zero", prefix+"_zero");
        module.exportFunction(f1mPrefix + "_one", prefix+"_one");
        module.exportFunction(f1mPrefix + "_isZero", prefix+"_isZero");
        module.exportFunction(f1mPrefix + "_eq", prefix+"_eq");

        return prefix;
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var build_f2m = function buildF2m(module, mulNonResidueFn, prefix, f1mPrefix) {

        if (module.modules[prefix]) return prefix;  // already builded

        const f1n8 = module.modules[f1mPrefix].n64*8;
        const q = module.modules[f1mPrefix].q;

        module.modules[prefix] = {
            n64: module.modules[f1mPrefix].n64*2
        };

        function buildAdd() {
            const f = module.addFunction(prefix+"_add");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const y0 = c.getLocal("y");
            const y1 = c.i32_add(c.getLocal("y"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_add", x0, y0, r0),
                c.call(f1mPrefix+"_add", x1, y1, r1),
            );
        }

        function buildTimesScalar() {
            const f = module.addFunction(prefix+"_timesScalar");
            f.addParam("x", "i32");
            f.addParam("scalar", "i32");
            f.addParam("scalarLen", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_timesScalar", x0, c.getLocal("scalar"), c.getLocal("scalarLen"), r0),
                c.call(f1mPrefix+"_timesScalar", x1, c.getLocal("scalar"), c.getLocal("scalarLen"), r1),
            );
        }

        function buildSub() {
            const f = module.addFunction(prefix+"_sub");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const y0 = c.getLocal("y");
            const y1 = c.i32_add(c.getLocal("y"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_sub", x0, y0, r0),
                c.call(f1mPrefix+"_sub", x1, y1, r1),
            );
        }

        function buildNeg() {
            const f = module.addFunction(prefix+"_neg");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_neg", x0, r0),
                c.call(f1mPrefix+"_neg", x1, r1),
            );
        }

        function buildConjugate() {
            const f = module.addFunction(prefix+"_conjugate");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_copy", x0, r0),
                c.call(f1mPrefix+"_neg", x1, r1),
            );
        }


        function buildIsNegative() {
            const f = module.addFunction(prefix+"_isNegative");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));

            f.addCode(
                c.if(
                    c.call(f1mPrefix+"_isZero", x1),
                    c.ret(c.call(f1mPrefix+"_isNegative", x0))
                ),
                c.ret(c.call(f1mPrefix+"_isNegative", x1))
            );
        }

        function buildMul() {
            const f = module.addFunction(prefix+"_mul");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const y0 = c.getLocal("y");
            const y1 = c.i32_add(c.getLocal("y"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            const A = c.i32_const(module.alloc(f1n8));
            const B = c.i32_const(module.alloc(f1n8));
            const C = c.i32_const(module.alloc(f1n8));
            const D = c.i32_const(module.alloc(f1n8));


            f.addCode(
                c.call(f1mPrefix + "_mul", x0, y0, A),             // A = x0*y0
                c.call(f1mPrefix + "_mul", x1, y1, B),             // B = x1*y1

                c.call(f1mPrefix + "_add", x0, x1, C),             // C = x0 + x1
                c.call(f1mPrefix + "_add", y0, y1, D),             // D = y0 + y1
                c.call(f1mPrefix + "_mul", C, D, C),               // C = (x0 + x1)*(y0 + y1) = x0*y0+x0*y1+x1*y0+x1*y1

                //  c.call(f1mPrefix + "_mul", B, c.i32_const(pNonResidue), r0),  // r0 = nr*(x1*y1)
                c.call(mulNonResidueFn, B, r0),  // r0 = nr*(x1*y1)
                c.call(f1mPrefix + "_add", A, r0, r0),             // r0 = x0*y0 + nr*(x1*y1)
                c.call(f1mPrefix + "_add", A, B, r1),             // r1 = x0*y0+x1*y1
                c.call(f1mPrefix + "_sub", C, r1, r1)              // r1 = x0*y0+x0*y1+x1*y0+x1*y1 - x0*y0+x1*y1 = x0*y1+x1*y0
            );

        }

        function buildMul1() {
            const f = module.addFunction(prefix+"_mul1");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const y = c.getLocal("y");
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));


            f.addCode(
                c.call(f1mPrefix + "_mul", x0, y, r0),             // A = x0*y
                c.call(f1mPrefix + "_mul", x1, y, r1),             // B = x1*y
            );
        }

        function buildSquare() {
            const f = module.addFunction(prefix+"_square");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            const AB = c.i32_const(module.alloc(f1n8));
            const APB = c.i32_const(module.alloc(f1n8));
            const APNB = c.i32_const(module.alloc(f1n8));
            const ABPNAB = c.i32_const(module.alloc(f1n8));


            f.addCode(
                // AB = x0*y1
                c.call(f1mPrefix + "_mul", x0, x1, AB),

                // APB = x0+y1
                c.call(f1mPrefix + "_add", x0, x1, APB),

                // APBN0 = x0 + nr*x1
                c.call(mulNonResidueFn, x1, APNB),
                c.call(f1mPrefix + "_add", x0, APNB, APNB),

                // ABPNAB = ab + nr*ab
                c.call(mulNonResidueFn, AB, ABPNAB),
                c.call(f1mPrefix + "_add", ABPNAB, AB, ABPNAB),

                // r0 = APB * APNB - ABPNAB
                c.call(f1mPrefix + "_mul", APB, APNB, r0),
                c.call(f1mPrefix + "_sub", r0, ABPNAB, r0),

                // r1 = AB + AB
                c.call(f1mPrefix + "_add", AB, AB, r1),
            );

        }


        function buildToMontgomery() {
            const f = module.addFunction(prefix+"_toMontgomery");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_toMontgomery", x0, r0),
                c.call(f1mPrefix+"_toMontgomery", x1, r1)
            );
        }

        function buildFromMontgomery() {
            const f = module.addFunction(prefix+"_fromMontgomery");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_fromMontgomery", x0, r0),
                c.call(f1mPrefix+"_fromMontgomery", x1, r1)
            );
        }

        function buildCopy() {
            const f = module.addFunction(prefix+"_copy");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_copy", x0, r0),
                c.call(f1mPrefix+"_copy", x1, r1)
            );
        }

        function buildZero() {
            const f = module.addFunction(prefix+"_zero");
            f.addParam("x", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_zero", x0),
                c.call(f1mPrefix+"_zero", x1)
            );
        }

        function buildOne() {
            const f = module.addFunction(prefix+"_one");
            f.addParam("x", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_one", x0),
                c.call(f1mPrefix+"_zero", x1)
            );
        }

        function buildEq() {
            const f = module.addFunction(prefix+"_eq");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const y0 = c.getLocal("y");
            const y1 = c.i32_add(c.getLocal("y"), c.i32_const(f1n8));

            f.addCode(
                c.i32_and(
                    c.call(f1mPrefix+"_eq", x0, y0),
                    c.call(f1mPrefix+"_eq", x1, y1)
                )
            );
        }

        function buildIsZero() {
            const f = module.addFunction(prefix+"_isZero");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));

            f.addCode(
                c.i32_and(
                    c.call(f1mPrefix+"_isZero", x0),
                    c.call(f1mPrefix+"_isZero", x1)
                )
            );
        }

        function buildInverse() {
            const f = module.addFunction(prefix+"_inverse");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));

            const t0 = c.i32_const(module.alloc(f1n8));
            const t1 = c.i32_const(module.alloc(f1n8));
            const t2 = c.i32_const(module.alloc(f1n8));
            const t3 = c.i32_const(module.alloc(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_square", x0, t0),
                c.call(f1mPrefix+"_square", x1, t1),
                // c.call(f1mPrefix+"_mul", t1, c.i32_const(pNonResidue), t2),
                c.call(mulNonResidueFn, t1, t2),

                c.call(f1mPrefix+"_sub", t0, t2, t2),
                c.call(f1mPrefix+"_inverse", t2, t3),

                c.call(f1mPrefix+"_mul", x0, t3, r0),
                c.call(f1mPrefix+"_mul", x1, t3, r1),
                c.call(f1mPrefix+"_neg", r1, r1),
            );
        }


        function buildSign() {
            const f = module.addFunction(prefix+"_sign");
            f.addParam("x", "i32");
            f.addLocal("s", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));

            f.addCode(
                c.setLocal("s" , c.call( f1mPrefix + "_sign", x1)),
                c.if(
                    c.getLocal("s"),
                    c.ret(c.getLocal("s"))
                ),
                c.ret(c.call( f1mPrefix + "_sign", x0))
            );
        }

        function buildIsOne() {
            const f = module.addFunction(prefix+"_isOne");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));

            f.addCode(
                c.ret(c.i32_and(
                    c.call(f1mPrefix + "_isOne", x0),
                    c.call(f1mPrefix + "_isZero", x1),
                ))
            );
        }


        // Check here: https://eprint.iacr.org/2012/685.pdf
        // Alg 9adj
        function buildSqrt() {

            const f = module.addFunction(prefix+"_sqrt");
            f.addParam("a", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const e34 = c.i32_const(module.alloc(utils$3.bigInt2BytesLE(BigInteger(q).minus(BigInteger(3)).divide(4), f1n8 )));
            const e12 = c.i32_const(module.alloc(utils$3.bigInt2BytesLE(BigInteger(q).minus(BigInteger(1)).divide(2), f1n8 )));

            const a = c.getLocal("a");
            const a1 = c.i32_const(module.alloc(f1n8*2));
            const alpha = c.i32_const(module.alloc(f1n8*2));
            const a0 = c.i32_const(module.alloc(f1n8*2));
            const pn1 = module.alloc(f1n8*2);
            const n1 = c.i32_const(pn1);
            const n1a = c.i32_const(pn1);
            const n1b = c.i32_const(pn1+f1n8);
            const x0 = c.i32_const(module.alloc(f1n8*2));
            const b = c.i32_const(module.alloc(f1n8*2));

            f.addCode(

                c.call(prefix + "_one", n1),
                c.call(prefix + "_neg", n1, n1),

                // const a1 = F.pow(a, F.sqrt_e34);
                c.call(prefix + "_exp", a, e34, c.i32_const(f1n8), a1),

                // const a1 = F.pow(a, F.sqrt_e34);
                c.call(prefix + "_square", a1, alpha),
                c.call(prefix + "_mul", a, alpha, alpha),

                // const a0 = F.mul(F.frobenius(1, alfa), alfa);
                c.call(prefix + "_conjugate", alpha, a0),
                c.call(prefix + "_mul", a0, alpha, a0),

                // if (F.eq(a0, F.negone)) return null;
                c.if(c.call(prefix + "_eq",a0,n1), c.unreachable() ),

                // const x0 = F.mul(a1, a);
                c.call(prefix + "_mul", a1, a, x0),

                // if (F.eq(alfa, F.negone)) {
                c.if(
                    c.call(prefix + "_eq", alpha, n1),
                    [
                        // x = F.mul(x0, [F.F.zero, F.F.one]);
                        ...c.call(f1mPrefix + "_zero", n1a),
                        ...c.call(f1mPrefix + "_one", n1b),
                        ...c.call(prefix + "_mul", n1, x0, c.getLocal("pr")),
                    ],
                    [
                        // const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);
                        ...c.call(prefix + "_one", b),
                        ...c.call(prefix + "_add", b, alpha, b),
                        ...c.call(prefix + "_exp", b, e12, c.i32_const(f1n8), b),

                        // x = F.mul(b, x0);
                        ...c.call(prefix + "_mul", b, x0, c.getLocal("pr")),
                    ]
                )
            );

        }


        function buildIsSquare() {

            const f = module.addFunction(prefix+"_isSquare");
            f.addParam("a", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const e34 = c.i32_const(module.alloc(utils$3.bigInt2BytesLE(BigInteger(q).minus(BigInteger(3)).divide(4), f1n8 )));

            const a = c.getLocal("a");
            const a1 = c.i32_const(module.alloc(f1n8*2));
            const alpha = c.i32_const(module.alloc(f1n8*2));
            const a0 = c.i32_const(module.alloc(f1n8*2));
            const pn1 = module.alloc(f1n8*2);
            const n1 = c.i32_const(pn1);

            f.addCode(

                c.call(prefix + "_one", n1),
                c.call(prefix + "_neg", n1, n1),

                // const a1 = F.pow(a, F.sqrt_e34);
                c.call(prefix + "_exp", a, e34, c.i32_const(f1n8), a1),

                // const a1 = F.pow(a, F.sqrt_e34);
                c.call(prefix + "_square", a1, alpha),
                c.call(prefix + "_mul", a, alpha, alpha),

                // const a0 = F.mul(F.frobenius(1, alfa), alfa);
                c.call(prefix + "_conjugate", alpha, a0),
                c.call(prefix + "_mul", a0, alpha, a0),

                // if (F.eq(a0, F.negone)) return null;
                c.if(
                    c.call(
                        prefix + "_eq",
                        a0,
                        n1
                    ),
                    c.ret(c.i32_const(0))
                ),
                c.ret(c.i32_const(1))
            );

        }


        buildIsZero();
        buildIsOne();
        buildZero();
        buildOne();
        buildCopy();
        buildMul();
        buildMul1();
        buildSquare();
        buildAdd();
        buildSub();
        buildNeg();
        buildConjugate();
        buildToMontgomery();
        buildFromMontgomery();
        buildEq();
        buildInverse();
        buildTimesScalar();
        buildSign();
        buildIsNegative();

        module.exportFunction(prefix + "_isZero");
        module.exportFunction(prefix + "_isOne");
        module.exportFunction(prefix + "_zero");
        module.exportFunction(prefix + "_one");
        module.exportFunction(prefix + "_copy");
        module.exportFunction(prefix + "_mul");
        module.exportFunction(prefix + "_mul1");
        module.exportFunction(prefix + "_square");
        module.exportFunction(prefix + "_add");
        module.exportFunction(prefix + "_sub");
        module.exportFunction(prefix + "_neg");
        module.exportFunction(prefix + "_sign");
        module.exportFunction(prefix + "_conjugate");
        module.exportFunction(prefix + "_fromMontgomery");
        module.exportFunction(prefix + "_toMontgomery");
        module.exportFunction(prefix + "_eq");
        module.exportFunction(prefix + "_inverse");
        build_batchinverse(module, prefix);
        build_timesscalar(
            module,
            prefix + "_exp",
            f1n8*2,
            prefix + "_mul",
            prefix + "_square",
            prefix + "_copy",
            prefix + "_one",
        );
        buildSqrt();
        buildIsSquare();

        module.exportFunction(prefix + "_exp");
        module.exportFunction(prefix + "_timesScalar");
        module.exportFunction(prefix + "_batchInverse");
        module.exportFunction(prefix + "_sqrt");
        module.exportFunction(prefix + "_isSquare");
        module.exportFunction(prefix + "_isNegative");


        return prefix;
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var build_f3m = function buildF3m(module, mulNonResidueFn, prefix, f1mPrefix) {

        if (module.modules[prefix]) return prefix;  // already builded

        const f1n8 = module.modules[f1mPrefix].n64*8;
        module.modules[prefix] = {
            n64: module.modules[f1mPrefix].n64*3
        };

        function buildAdd() {
            const f = module.addFunction(prefix+"_add");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const y0 = c.getLocal("y");
            const y1 = c.i32_add(c.getLocal("y"), c.i32_const(f1n8));
            const y2 = c.i32_add(c.getLocal("y"), c.i32_const(2*f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(2*f1n8));

            f.addCode(
                c.call(f1mPrefix+"_add", x0, y0, r0),
                c.call(f1mPrefix+"_add", x1, y1, r1),
                c.call(f1mPrefix+"_add", x2, y2, r2),
            );
        }

        function buildTimesScalar() {
            const f = module.addFunction(prefix+"_timesScalar");
            f.addParam("x", "i32");
            f.addParam("scalar", "i32");
            f.addParam("scalarLen", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(2*f1n8));

            f.addCode(
                c.call(f1mPrefix+"_timesScalar", x0, c.getLocal("scalar"), c.getLocal("scalarLen"), r0),
                c.call(f1mPrefix+"_timesScalar", x1, c.getLocal("scalar"), c.getLocal("scalarLen"), r1),
                c.call(f1mPrefix+"_timesScalar", x2, c.getLocal("scalar"), c.getLocal("scalarLen"), r2),
            );
        }


        function buildSub() {
            const f = module.addFunction(prefix+"_sub");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const y0 = c.getLocal("y");
            const y1 = c.i32_add(c.getLocal("y"), c.i32_const(f1n8));
            const y2 = c.i32_add(c.getLocal("y"), c.i32_const(2*f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(2*f1n8));

            f.addCode(
                c.call(f1mPrefix+"_sub", x0, y0, r0),
                c.call(f1mPrefix+"_sub", x1, y1, r1),
                c.call(f1mPrefix+"_sub", x2, y2, r2),
            );
        }

        function buildNeg() {
            const f = module.addFunction(prefix+"_neg");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(2*f1n8));

            f.addCode(
                c.call(f1mPrefix+"_neg", x0, r0),
                c.call(f1mPrefix+"_neg", x1, r1),
                c.call(f1mPrefix+"_neg", x2, r2),
            );
        }

        function buildIsNegative() {
            const f = module.addFunction(prefix+"_isNegative");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));

            f.addCode(
                c.if(
                    c.call(f1mPrefix+"_isZero", x2),
                    c.if(
                        c.call(f1mPrefix+"_isZero", x1),
                        c.ret(c.call(f1mPrefix+"_isNegative", x0)),
                        c.ret(c.call(f1mPrefix+"_isNegative", x1))
                    )
                ),
                c.ret(c.call(f1mPrefix+"_isNegative", x2))
            );
        }


        function buildMul() {
            const f = module.addFunction(prefix+"_mul");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.addParam("r", "i32");

            const cd = f.getCodeBuilder();

            const a = cd.getLocal("x");
            const b = cd.i32_add(cd.getLocal("x"), cd.i32_const(f1n8));
            const c = cd.i32_add(cd.getLocal("x"), cd.i32_const(2*f1n8));
            const A = cd.getLocal("y");
            const B = cd.i32_add(cd.getLocal("y"), cd.i32_const(f1n8));
            const C = cd.i32_add(cd.getLocal("y"), cd.i32_const(2*f1n8));
            const r0 = cd.getLocal("r");
            const r1 = cd.i32_add(cd.getLocal("r"), cd.i32_const(f1n8));
            const r2 = cd.i32_add(cd.getLocal("r"), cd.i32_const(2*f1n8));

            const aA = cd.i32_const(module.alloc(f1n8));
            const bB = cd.i32_const(module.alloc(f1n8));
            const cC = cd.i32_const(module.alloc(f1n8));
            const a_b = cd.i32_const(module.alloc(f1n8));
            const A_B = cd.i32_const(module.alloc(f1n8));
            const a_c = cd.i32_const(module.alloc(f1n8));
            const A_C = cd.i32_const(module.alloc(f1n8));
            const b_c = cd.i32_const(module.alloc(f1n8));
            const B_C = cd.i32_const(module.alloc(f1n8));
            const aA_bB = cd.i32_const(module.alloc(f1n8));
            const aA_cC = cd.i32_const(module.alloc(f1n8));
            const bB_cC = cd.i32_const(module.alloc(f1n8));
            const AUX = cd.i32_const(module.alloc(f1n8));


            f.addCode(
                cd.call(f1mPrefix + "_mul", a, A, aA),
                cd.call(f1mPrefix + "_mul", b, B, bB),
                cd.call(f1mPrefix + "_mul", c, C, cC),

                cd.call(f1mPrefix + "_add", a, b, a_b),
                cd.call(f1mPrefix + "_add", A, B, A_B),
                cd.call(f1mPrefix + "_add", a, c, a_c),
                cd.call(f1mPrefix + "_add", A, C, A_C),
                cd.call(f1mPrefix + "_add", b, c, b_c),
                cd.call(f1mPrefix + "_add", B, C, B_C),

                cd.call(f1mPrefix + "_add", aA, bB, aA_bB),
                cd.call(f1mPrefix + "_add", aA, cC, aA_cC),
                cd.call(f1mPrefix + "_add", bB, cC, bB_cC),

                cd.call(f1mPrefix + "_mul", b_c, B_C, r0),
                cd.call(f1mPrefix + "_sub", r0, bB_cC, r0),
                cd.call(mulNonResidueFn, r0, r0),
                cd.call(f1mPrefix + "_add", aA, r0, r0),

                cd.call(f1mPrefix + "_mul", a_b, A_B, r1),
                cd.call(f1mPrefix + "_sub", r1, aA_bB, r1),
                cd.call(mulNonResidueFn, cC, AUX),
                cd.call(f1mPrefix + "_add", r1, AUX, r1),

                cd.call(f1mPrefix + "_mul", a_c, A_C, r2),
                cd.call(f1mPrefix + "_sub", r2, aA_cC, r2),
                cd.call(f1mPrefix + "_add", r2, bB, r2),
            );

        }

        function buildSquare() {
            const f = module.addFunction(prefix+"_square");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const A = c.getLocal("x");
            const B = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const C = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(2*f1n8));

            const s0 = c.i32_const(module.alloc(f1n8));
            const ab = c.i32_const(module.alloc(f1n8));
            const s1 = c.i32_const(module.alloc(f1n8));
            const s2 = c.i32_const(module.alloc(f1n8));
            const bc = c.i32_const(module.alloc(f1n8));
            const s3 = c.i32_const(module.alloc(f1n8));
            const s4 = c.i32_const(module.alloc(f1n8));


            f.addCode(

                c.call(f1mPrefix + "_square", A, s0),
                c.call(f1mPrefix + "_mul", A, B, ab),
                c.call(f1mPrefix + "_add", ab, ab, s1),

                c.call(f1mPrefix + "_sub", A, B, s2),
                c.call(f1mPrefix + "_add", s2, C, s2),
                c.call(f1mPrefix + "_square", s2, s2),

                c.call(f1mPrefix + "_mul", B, C, bc),
                c.call(f1mPrefix + "_add", bc, bc, s3),

                c.call(f1mPrefix + "_square", C, s4),

                c.call(mulNonResidueFn, s3, r0),
                c.call(f1mPrefix + "_add", s0, r0, r0),

                c.call(mulNonResidueFn, s4, r1),
                c.call(f1mPrefix + "_add", s1, r1, r1),

                c.call(f1mPrefix + "_add", s0, s4, r2),
                c.call(f1mPrefix + "_sub", s3, r2, r2),
                c.call(f1mPrefix + "_add", s2, r2, r2),
                c.call(f1mPrefix + "_add", s1, r2, r2),
            );

        }


        function buildToMontgomery() {
            const f = module.addFunction(prefix+"_toMontgomery");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(2*f1n8));

            f.addCode(
                c.call(f1mPrefix+"_toMontgomery", x0, r0),
                c.call(f1mPrefix+"_toMontgomery", x1, r1),
                c.call(f1mPrefix+"_toMontgomery", x2, r2)
            );
        }

        function buildFromMontgomery() {
            const f = module.addFunction(prefix+"_fromMontgomery");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(2*f1n8));

            f.addCode(
                c.call(f1mPrefix+"_fromMontgomery", x0, r0),
                c.call(f1mPrefix+"_fromMontgomery", x1, r1),
                c.call(f1mPrefix+"_fromMontgomery", x2, r2)
            );
        }

        function buildCopy() {
            const f = module.addFunction(prefix+"_copy");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(2*f1n8));

            f.addCode(
                c.call(f1mPrefix+"_copy", x0, r0),
                c.call(f1mPrefix+"_copy", x1, r1),
                c.call(f1mPrefix+"_copy", x2, r2),
            );
        }

        function buildZero() {
            const f = module.addFunction(prefix+"_zero");
            f.addParam("x", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));

            f.addCode(
                c.call(f1mPrefix+"_zero", x0),
                c.call(f1mPrefix+"_zero", x1),
                c.call(f1mPrefix+"_zero", x2),
            );
        }

        function buildOne() {
            const f = module.addFunction(prefix+"_one");
            f.addParam("x", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));

            f.addCode(
                c.call(f1mPrefix+"_one", x0),
                c.call(f1mPrefix+"_zero", x1),
                c.call(f1mPrefix+"_zero", x2),
            );
        }

        function buildEq() {
            const f = module.addFunction(prefix+"_eq");
            f.addParam("x", "i32");
            f.addParam("y", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const y0 = c.getLocal("y");
            const y1 = c.i32_add(c.getLocal("y"), c.i32_const(f1n8));
            const y2 = c.i32_add(c.getLocal("y"), c.i32_const(2*f1n8));

            f.addCode(
                c.i32_and(
                    c.i32_and(
                        c.call(f1mPrefix+"_eq", x0, y0),
                        c.call(f1mPrefix+"_eq", x1, y1),
                    ),
                    c.call(f1mPrefix+"_eq", x2, y2)
                )
            );
        }

        function buildIsZero() {
            const f = module.addFunction(prefix+"_isZero");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));

            f.addCode(
                c.i32_and(
                    c.i32_and(
                        c.call(f1mPrefix+"_isZero", x0),
                        c.call(f1mPrefix+"_isZero", x1)
                    ),
                    c.call(f1mPrefix+"_isZero", x2)
                )
            );
        }

        function buildInverse() {
            const f = module.addFunction(prefix+"_inverse");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));
            const r0 = c.getLocal("r");
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(f1n8));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(2*f1n8));

            const t0 = c.i32_const(module.alloc(f1n8));
            const t1 = c.i32_const(module.alloc(f1n8));
            const t2 = c.i32_const(module.alloc(f1n8));
            const t3 = c.i32_const(module.alloc(f1n8));
            const t4 = c.i32_const(module.alloc(f1n8));
            const t5 = c.i32_const(module.alloc(f1n8));
            const c0 = c.i32_const(module.alloc(f1n8));
            const c1 = c.i32_const(module.alloc(f1n8));
            const c2 = c.i32_const(module.alloc(f1n8));
            const t6 = c.i32_const(module.alloc(f1n8));
            const AUX = c.i32_const(module.alloc(f1n8));

            f.addCode(
                c.call(f1mPrefix+"_square", x0, t0),
                c.call(f1mPrefix+"_square", x1, t1),
                c.call(f1mPrefix+"_square", x2, t2),
                c.call(f1mPrefix+"_mul", x0, x1, t3),
                c.call(f1mPrefix+"_mul", x0, x2, t4),
                c.call(f1mPrefix+"_mul", x1, x2, t5),

                c.call(mulNonResidueFn, t5, c0),
                c.call(f1mPrefix+"_sub", t0, c0, c0),

                c.call(mulNonResidueFn, t2, c1),
                c.call(f1mPrefix+"_sub", c1, t3, c1),

                c.call(f1mPrefix+"_sub", t1, t4, c2),

                c.call(f1mPrefix+"_mul", x2, c1, t6),
                c.call(f1mPrefix+"_mul", x1, c2, AUX),
                c.call(f1mPrefix+"_add", t6, AUX, t6),
                c.call(mulNonResidueFn, t6, t6),
                c.call(f1mPrefix+"_mul", x0, c0, AUX),
                c.call(f1mPrefix+"_add", AUX, t6, t6),

                c.call(f1mPrefix+"_inverse", t6, t6),

                c.call(f1mPrefix+"_mul", t6, c0, r0),
                c.call(f1mPrefix+"_mul", t6, c1, r1),
                c.call(f1mPrefix+"_mul", t6, c2, r2)
            );
        }


        function buildSign() {
            const f = module.addFunction(prefix+"_sign");
            f.addParam("x", "i32");
            f.addLocal("s", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(2*f1n8));

            f.addCode(
                c.setLocal("s" , c.call( f1mPrefix + "_sign", x2)),
                c.if(
                    c.getLocal("s"),
                    c.ret(c.getLocal("s"))
                ),
                c.setLocal("s" , c.call( f1mPrefix + "_sign", x1)),
                c.if(
                    c.getLocal("s"),
                    c.ret(c.getLocal("s"))
                ),
                c.ret(c.call( f1mPrefix + "_sign", x0))
            );
        }

        function buildIsOne() {
            const f = module.addFunction(prefix+"_isOne");
            f.addParam("x", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(f1n8*2));

            f.addCode(
                c.ret(
                    c.i32_and(
                        c.i32_and(
                            c.call(f1mPrefix + "_isOne", x0),
                            c.call(f1mPrefix + "_isZero", x1)
                        ),
                        c.call(f1mPrefix + "_isZero", x2)
                    )
                )
            );
        }

        buildIsZero();
        buildIsOne();
        buildZero();
        buildOne();
        buildCopy();
        buildMul();
        buildSquare();
        buildAdd();
        buildSub();
        buildNeg();
        buildSign();
        buildToMontgomery();
        buildFromMontgomery();
        buildEq();
        buildInverse();
        buildTimesScalar();
        buildIsNegative();

        module.exportFunction(prefix + "_isZero");
        module.exportFunction(prefix + "_isOne");
        module.exportFunction(prefix + "_zero");
        module.exportFunction(prefix + "_one");
        module.exportFunction(prefix + "_copy");
        module.exportFunction(prefix + "_mul");
        module.exportFunction(prefix + "_square");
        module.exportFunction(prefix + "_add");
        module.exportFunction(prefix + "_sub");
        module.exportFunction(prefix + "_neg");
        module.exportFunction(prefix + "_sign");
        module.exportFunction(prefix + "_fromMontgomery");
        module.exportFunction(prefix + "_toMontgomery");
        module.exportFunction(prefix + "_eq");
        module.exportFunction(prefix + "_inverse");
        build_batchinverse(module, prefix);
        build_timesscalar(
            module,
            prefix + "_exp",
            f1n8*3,
            prefix + "_mul",
            prefix + "_square",
            prefix + "_copy",
            prefix + "_one"
        );
        module.exportFunction(prefix + "_exp");
        module.exportFunction(prefix + "_timesScalar");
        module.exportFunction(prefix + "_batchInverse");
        module.exportFunction(prefix + "_isNegative");

        return prefix;
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */
    var build_timesscalarnaf = function buildTimesScalarNAF(module, fnName, elementLen, opAB, opAA, opAmB, opCopy, opInit) {

        const f = module.addFunction(fnName);
        f.addParam("base", "i32");
        f.addParam("scalar", "i32");
        f.addParam("scalarLength", "i32");
        f.addParam("r", "i32");
        f.addLocal("old0", "i32");
        f.addLocal("nbits", "i32");
        f.addLocal("i", "i32");
        f.addLocal("last", "i32");
        f.addLocal("cur", "i32");
        f.addLocal("carry", "i32");
        f.addLocal("p", "i32");

        const c = f.getCodeBuilder();

        const aux = c.i32_const(module.alloc(elementLen));

        function getBit(IDX) {
            return c.i32_and(
                c.i32_shr_u(
                    c.i32_load(
                        c.i32_add(
                            c.getLocal("scalar"),
                            c.i32_and(
                                c.i32_shr_u(
                                    IDX,
                                    c.i32_const(3)
                                ),
                                c.i32_const(0xFFFFFFFC)
                            )
                        )
                    ),
                    c.i32_and(
                        IDX,
                        c.i32_const(0x1F)
                    )
                ),
                c.i32_const(1)
            );
        }

        function pushBit(b) {
            return [
                ...c.i32_store8(
                    c.getLocal("p"),
                    c.i32_const(b)
                ),
                ...c.setLocal(
                    "p",
                    c.i32_add(
                        c.getLocal("p"),
                        c.i32_const(1)
                    )
                )
            ];
        }

        f.addCode(
            c.if(
                c.i32_eqz(c.getLocal("scalarLength")),
                [
                    ...c.call(opInit, c.getLocal("r")),
                    ...c.ret([])
                ]
            ),
            c.setLocal("nbits", c.i32_shl(c.getLocal("scalarLength"), c.i32_const(3))),
            c.setLocal("old0", c.i32_load(c.i32_const(0))),
            c.setLocal("p", c.getLocal("old0")),
            c.i32_store(
                c.i32_const(0),
                c.i32_and(
                    c.i32_add(
                        c.i32_add(
                            c.getLocal("old0"),
                            c.i32_const(32)
                        ),
                        c.getLocal("nbits")
                    ),
                    c.i32_const(0xFFFFFFF8)
                )
            ),
            c.setLocal("i", c.i32_const(1)),

            c.setLocal("last",getBit(c.i32_const(0))),
            c.setLocal("carry",c.i32_const(0)),

            c.block(c.loop(
                c.br_if(1, c.i32_eq( c.getLocal("i"), c.getLocal("nbits"))),

                c.setLocal("cur", getBit(c.getLocal("i"))),
                c.if( c.getLocal("last"),
                    c.if( c.getLocal("cur"),
                        c.if(c.getLocal("carry"),
                            [
                                ...c.setLocal("last", c.i32_const(0)),
                                ...c.setLocal("carry", c.i32_const(1)),
                                ...pushBit(1)
                            ]
                            ,
                            [
                                ...c.setLocal("last", c.i32_const(0)),
                                ...c.setLocal("carry", c.i32_const(1)),
                                ...pushBit(255)
                            ],
                        ),
                        c.if(c.getLocal("carry"),
                            [
                                ...c.setLocal("last", c.i32_const(0)),
                                ...c.setLocal("carry", c.i32_const(1)),
                                ...pushBit(255)
                            ]
                            ,
                            [
                                ...c.setLocal("last", c.i32_const(0)),
                                ...c.setLocal("carry", c.i32_const(0)),
                                ...pushBit(1)
                            ],
                        ),
                    ),
                    c.if( c.getLocal("cur"),
                        c.if(c.getLocal("carry"),
                            [
                                ...c.setLocal("last", c.i32_const(0)),
                                ...c.setLocal("carry", c.i32_const(1)),
                                ...pushBit(0)
                            ]
                            ,
                            [
                                ...c.setLocal("last", c.i32_const(1)),
                                ...c.setLocal("carry", c.i32_const(0)),
                                ...pushBit(0)
                            ],
                        ),
                        c.if(c.getLocal("carry"),
                            [
                                ...c.setLocal("last", c.i32_const(1)),
                                ...c.setLocal("carry", c.i32_const(0)),
                                ...pushBit(0)
                            ]
                            ,
                            [
                                ...c.setLocal("last", c.i32_const(0)),
                                ...c.setLocal("carry", c.i32_const(0)),
                                ...pushBit(0)
                            ],
                        ),
                    )
                ),
                c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                c.br(0)
            )),

            c.if( c.getLocal("last"),
                c.if(c.getLocal("carry"),
                    [
                        ...pushBit(255),
                        ...pushBit(0),
                        ...pushBit(1)
                    ]
                    ,
                    [
                        ...pushBit(1)
                    ],
                ),
                c.if(c.getLocal("carry"),
                    [
                        ...pushBit(0),
                        ...pushBit(1)
                    ]
                ),
            ),

            c.setLocal("p", c.i32_sub(c.getLocal("p"), c.i32_const(1))),

            // p already points to the last bit

            c.call(opCopy, c.getLocal("base"), aux),

            c.call(opInit, c.getLocal("r")),

            c.block(c.loop(


                c.call(opAA, c.getLocal("r"), c.getLocal("r")),


                c.setLocal("cur",
                    c.i32_load8_u(
                        c.getLocal("p")
                    )
                ),

                c.if(
                    c.getLocal("cur"),
                    c.if(
                        c.i32_eq(c.getLocal("cur"), c.i32_const(1)),
                        c.call(opAB,  c.getLocal("r"), aux, c.getLocal("r")),
                        c.call(opAmB, c.getLocal("r"), aux, c.getLocal("r")),
                    )
                ),

                c.br_if(1, c.i32_eq( c.getLocal("old0"), c.getLocal("p"))),
                c.setLocal("p", c.i32_sub(c.getLocal("p"), c.i32_const(1))),
                c.br(0)

            )),

            c.i32_store( c.i32_const(0), c.getLocal("old0"))

        );

    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */
    var build_multiexp = function buildMultiexp(module, prefix, fnName, opAdd, n8b) {

        const n64g = module.modules[prefix].n64;
        const n8g = n64g*8;

        function buildGetChunk() {
            const f = module.addFunction(fnName + "_getChunk");
            f.addParam("pScalar", "i32");
            f.addParam("scalarSize", "i32");  // Number of bytes of the scalar
            f.addParam("startBit", "i32");  // Bit to start extract
            f.addParam("chunkSize", "i32");  // Chunk size in bits
            f.addLocal("bitsToEnd", "i32");
            f.addLocal("mask", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.setLocal("bitsToEnd",
                    c.i32_sub(
                        c.i32_mul(
                            c.getLocal("scalarSize"),
                            c.i32_const(8)
                        ),
                        c.getLocal("startBit")
                    )
                ),
                c.if(
                    c.i32_gt_s(
                        c.getLocal("chunkSize"),
                        c.getLocal("bitsToEnd")
                    ),
                    c.setLocal(
                        "mask",
                        c.i32_sub(
                            c.i32_shl(
                                c.i32_const(1),
                                c.getLocal("bitsToEnd")
                            ),
                            c.i32_const(1)
                        )
                    ),
                    c.setLocal(
                        "mask",
                        c.i32_sub(
                            c.i32_shl(
                                c.i32_const(1),
                                c.getLocal("chunkSize")
                            ),
                            c.i32_const(1)
                        )
                    )
                ),
                c.i32_and(
                    c.i32_shr_u(
                        c.i32_load(
                            c.i32_add(
                                c.getLocal("pScalar"),
                                c.i32_shr_u(
                                    c.getLocal("startBit"),
                                    c.i32_const(3)
                                )
                            ),
                            0,  // offset
                            0   // align to byte.
                        ),
                        c.i32_and(
                            c.getLocal("startBit"),
                            c.i32_const(0x7)
                        )
                    ),
                    c.getLocal("mask")
                )
            );
        }

        function buildMutiexpChunk() {
            const f = module.addFunction(fnName + "_chunk");
            f.addParam("pBases", "i32");
            f.addParam("pScalars", "i32");
            f.addParam("scalarSize", "i32");  // Number of points
            f.addParam("n", "i32");  // Number of points
            f.addParam("startBit", "i32");  // bit where it starts the chunk
            f.addParam("chunkSize", "i32");  // bit where it starts the chunk
            f.addParam("pr", "i32");
            f.addLocal("nChunks", "i32");
            f.addLocal("itScalar", "i32");
            f.addLocal("endScalar", "i32");
            f.addLocal("itBase", "i32");
            f.addLocal("i", "i32");
            f.addLocal("j", "i32");
            f.addLocal("nTable", "i32");
            f.addLocal("pTable", "i32");
            f.addLocal("idx", "i32");
            f.addLocal("pIdxTable", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.if(
                    c.i32_eqz(c.getLocal("n")),
                    [
                        ...c.call(prefix + "_zero", c.getLocal("pr")),
                        ...c.ret([])
                    ]
                ),

                // Allocate memory

                c.setLocal(
                    "nTable",
                    c.i32_shl(
                        c.i32_const(1),
                        c.getLocal("chunkSize")
                    )
                ),
                c.setLocal("pTable", c.i32_load( c.i32_const(0) )),
                c.i32_store(
                    c.i32_const(0),
                    c.i32_add(
                        c.getLocal("pTable"),
                        c.i32_mul(
                            c.getLocal("nTable"),
                            c.i32_const(n8g)
                        )
                    )
                ),

                // Reset Table
                c.setLocal("j", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("j"),
                            c.getLocal("nTable")
                        )
                    ),

                    c.call(
                        prefix + "_zero",
                        c.i32_add(
                            c.getLocal("pTable"),
                            c.i32_mul(
                                c.getLocal("j"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.setLocal("j", c.i32_add(c.getLocal("j"), c.i32_const(1))),
                    c.br(0)
                )),

                // Distribute elements
                c.setLocal("itBase", c.getLocal("pBases")),
                c.setLocal("itScalar", c.getLocal("pScalars")),
                c.setLocal("endScalar",
                    c.i32_add(
                        c.getLocal("pScalars"),
                        c.i32_mul(
                            c.getLocal("n"),
                            c.getLocal("scalarSize")
                        )
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("itScalar"),
                            c.getLocal("endScalar")
                        )
                    ),

                    c.setLocal(
                        "idx",
                        c.call(fnName + "_getChunk",
                            c.getLocal("itScalar"),
                            c.getLocal("scalarSize"),
                            c.getLocal("startBit"),
                            c.getLocal("chunkSize")
                        )
                    ),

                    c.if(
                        c.getLocal("idx"),
                        [
                            ...c.setLocal(
                                "pIdxTable",
                                c.i32_add(
                                    c.getLocal("pTable"),
                                    c.i32_mul(
                                        c.i32_sub(
                                            c.getLocal("idx"),
                                            c.i32_const(1)
                                        ),
                                        c.i32_const(n8g)
                                    )
                                )
                            ),
                            ...c.call(
                                opAdd,
                                c.getLocal("pIdxTable"),
                                c.getLocal("itBase"),
                                c.getLocal("pIdxTable"),
                            )
                        ]
                    ),

                    c.setLocal("itScalar", c.i32_add(c.getLocal("itScalar"), c.getLocal("scalarSize"))),
                    c.setLocal("itBase", c.i32_add(c.getLocal("itBase"), c.i32_const(n8b))),
                    c.br(0)
                )),

                c.call(fnName + "_reduceTable", c.getLocal("pTable"), c.getLocal("chunkSize")),
                c.call(
                    prefix + "_copy",
                    c.getLocal("pTable"),
                    c.getLocal("pr")
                ),


                c.i32_store(
                    c.i32_const(0),
                    c.getLocal("pTable")
                )

            );
        }

        function buildMultiexp() {
            const f = module.addFunction(fnName);
            f.addParam("pBases", "i32");
            f.addParam("pScalars", "i32");
            f.addParam("scalarSize", "i32");  // Number of points
            f.addParam("n", "i32");  // Number of points
            f.addParam("pr", "i32");
            f.addLocal("chunkSize", "i32");
            f.addLocal("nChunks", "i32");
            f.addLocal("itScalar", "i32");
            f.addLocal("endScalar", "i32");
            f.addLocal("itBase", "i32");
            f.addLocal("itBit", "i32");
            f.addLocal("i", "i32");
            f.addLocal("j", "i32");
            f.addLocal("nTable", "i32");
            f.addLocal("pTable", "i32");
            f.addLocal("idx", "i32");
            f.addLocal("pIdxTable", "i32");

            const c = f.getCodeBuilder();

            const aux = c.i32_const(module.alloc(n8g));

            const pTSizes = module.alloc([
                17, 17, 17, 17,   17, 17, 17, 17,
                17, 17, 16, 16,   15, 14, 13, 13,
                12, 11, 10,  9,    8,  7,  7,  6,
                5 ,  4,  3,  2,    1,  1,  1,  1
            ]);

            f.addCode(
                c.call(prefix + "_zero", c.getLocal("pr")),
                c.if(
                    c.i32_eqz(c.getLocal("n")),
                    c.ret([])
                ),
                c.setLocal("chunkSize", c.i32_load8_u( c.i32_clz(c.getLocal("n")),  pTSizes )),
                c.setLocal(
                    "nChunks",
                    c.i32_add(
                        c.i32_div_u(
                            c.i32_sub(
                                c.i32_shl(
                                    c.getLocal("scalarSize"),
                                    c.i32_const(3)
                                ),
                                c.i32_const(1)
                            ),
                            c.getLocal("chunkSize")
                        ),
                        c.i32_const(1)
                    )
                ),


                // Allocate memory

                c.setLocal(
                    "itBit",
                    c.i32_mul(
                        c.i32_sub(
                            c.getLocal("nChunks"),
                            c.i32_const(1)
                        ),
                        c.getLocal("chunkSize")
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_lt_s(
                            c.getLocal("itBit"),
                            c.i32_const(0)
                        )
                    ),

                    // Double nChunk times
                    c.if(
                        c.i32_eqz(c.call(prefix + "_isZero", c.getLocal("pr"))),
                        [
                            ...c.setLocal("j", c.i32_const(0)),
                            ...c.block(c.loop(
                                c.br_if(
                                    1,
                                    c.i32_eq(
                                        c.getLocal("j"),
                                        c.getLocal("chunkSize")
                                    )
                                ),

                                c.call(prefix + "_double", c.getLocal("pr"), c.getLocal("pr")),

                                c.setLocal("j", c.i32_add(c.getLocal("j"), c.i32_const(1))),
                                c.br(0)
                            ))
                        ]
                    ),

                    c.call(
                        fnName + "_chunk",
                        c.getLocal("pBases"),
                        c.getLocal("pScalars"),
                        c.getLocal("scalarSize"),
                        c.getLocal("n"),
                        c.getLocal("itBit"),
                        c.getLocal("chunkSize"),
                        aux
                    ),

                    c.call(
                        prefix + "_add",
                        c.getLocal("pr"),
                        aux,
                        c.getLocal("pr")
                    ),
                    c.setLocal("itBit", c.i32_sub(c.getLocal("itBit"), c.getLocal("chunkSize"))),
                    c.br(0)
                ))
            );
        }

        function buildReduceTable() {
            const f = module.addFunction(fnName + "_reduceTable");
            f.addParam("pTable", "i32");
            f.addParam("p", "i32");  // Number of bits of the table
            f.addLocal("half", "i32");
            f.addLocal("it1", "i32");
            f.addLocal("it2", "i32");
            f.addLocal("pAcc", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.if(
                    c.i32_eq(c.getLocal("p"), c.i32_const(1)),
                    c.ret([])
                ),
                c.setLocal(
                    "half",
                    c.i32_shl(
                        c.i32_const(1),
                        c.i32_sub(
                            c.getLocal("p"),
                            c.i32_const(1)
                        )
                    )
                ),

                c.setLocal("it1", c.getLocal("pTable")),
                c.setLocal(
                    "it2",
                    c.i32_add(
                        c.getLocal("pTable"),
                        c.i32_mul(
                            c.getLocal("half"),
                            c.i32_const(n8g)
                        )
                    )
                ),
                c.setLocal("pAcc",
                    c.i32_sub(
                        c.getLocal("it2"),
                        c.i32_const(n8g)
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("it1"),
                            c.getLocal("pAcc")
                        )
                    ),
                    c.call(
                        prefix + "_add",
                        c.getLocal("it1"),
                        c.getLocal("it2"),
                        c.getLocal("it1")
                    ),
                    c.call(
                        prefix + "_add",
                        c.getLocal("pAcc"),
                        c.getLocal("it2"),
                        c.getLocal("pAcc")
                    ),
                    c.setLocal("it1", c.i32_add(c.getLocal("it1"), c.i32_const(n8g))),
                    c.setLocal("it2", c.i32_add(c.getLocal("it2"), c.i32_const(n8g))),
                    c.br(0)
                )),

                c.call(
                    fnName + "_reduceTable",
                    c.getLocal("pTable"),
                    c.i32_sub(
                        c.getLocal("p"),
                        c.i32_const(1)
                    )
                ),

                c.setLocal("p", c.i32_sub(c.getLocal("p"), c.i32_const(1))),
                c.block(c.loop(
                    c.br_if(1, c.i32_eqz(c.getLocal("p"))),
                    c.call(prefix + "_double", c.getLocal("pAcc"), c.getLocal("pAcc")),
                    c.setLocal("p", c.i32_sub(c.getLocal("p"), c.i32_const(1))),
                    c.br(0)
                )),

                c.call(prefix + "_add", c.getLocal("pTable"), c.getLocal("pAcc"), c.getLocal("pTable"))
            );
        }

        buildGetChunk();
        buildReduceTable();
        buildMutiexpChunk();
        buildMultiexp();

        module.exportFunction(fnName);
        module.exportFunction(fnName +"_chunk");


    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    //const buildTimesScalar = require("./build_timesscalar");



    var build_curve_jacobian_a0 = function buildCurve(module, prefix, prefixField, pB) {


        const n64 = module.modules[prefixField].n64;
        const n8 = n64*8;

        if (module.modules[prefix]) return prefix;  // already builded
        module.modules[prefix] = {
            n64: n64*3
        };

        function buildIsZero() {
            const f = module.addFunction(prefix + "_isZero");
            f.addParam("p1", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(
                prefixField + "_isZero",
                c.i32_add(
                    c.getLocal("p1"),
                    c.i32_const(n8*2)
                )
            ));
        }
        function buildIsZeroAffine() {
            const f = module.addFunction(prefix + "_isZeroAffine");
            f.addParam("p1", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.i32_and(
                    c.call(
                        prefixField + "_isZero",
                        c.getLocal("p1")
                    ),
                    c.call(
                        prefixField + "_isZero",
                        c.i32_add(
                            c.getLocal("p1"),
                            c.i32_const(n8)
                        )
                    )
                )
            );
        }

        function buildCopy() {
            const f = module.addFunction(prefix + "_copy");
            f.addParam("ps", "i32");
            f.addParam("pd", "i32");

            const c = f.getCodeBuilder();

            for (let i=0; i<n64*3; i++) {
                f.addCode(
                    c.i64_store(
                        c.getLocal("pd"),
                        i*8,
                        c.i64_load(
                            c.getLocal("ps"),
                            i*8
                        )
                    )
                );
            }
        }


        function buildCopyAffine() {
            const f = module.addFunction(prefix + "_copyAffine");
            f.addParam("ps", "i32");
            f.addParam("pd", "i32");

            const c = f.getCodeBuilder();

            for (let i=0; i<n64*2; i++) {
                f.addCode(
                    c.i64_store(
                        c.getLocal("pd"),
                        i*8,
                        c.i64_load(
                            c.getLocal("ps"),
                            i*8
                        )
                    )
                );
            }

        }


        function buildZero() {
            const f = module.addFunction(prefix + "_zero");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(
                prefixField + "_zero",
                c.getLocal("pr")
            ));

            f.addCode(c.call(
                prefixField + "_one",
                c.i32_add(
                    c.getLocal("pr"),
                    c.i32_const(n8)
                )
            ));

            f.addCode(c.call(
                prefixField + "_zero",
                c.i32_add(
                    c.getLocal("pr"),
                    c.i32_const(n8*2)
                )
            ));
        }


        function buildZeroAffine() {
            const f = module.addFunction(prefix + "_zeroAffine");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(
                prefixField + "_zero",
                c.getLocal("pr")
            ));

            f.addCode(c.call(
                prefixField + "_zero",
                c.i32_add(
                    c.getLocal("pr"),
                    c.i32_const(n8)
                )
            ));
        }

        function buildEq() {
            const f = module.addFunction(prefix + "_eq");
            f.addParam("p1", "i32");
            f.addParam("p2", "i32");
            f.setReturnType("i32");
            f.addLocal("z1", "i32");
            f.addLocal("z2", "i32");

            const c = f.getCodeBuilder();

            const x1 = c.getLocal("p1");
            const y1 = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            f.addCode(c.setLocal("z1", c.i32_add(c.getLocal("p1"), c.i32_const(n8*2))));
            const z1 = c.getLocal("z1");
            const x2 = c.getLocal("p2");
            const y2 = c.i32_add(c.getLocal("p2"), c.i32_const(n8));
            f.addCode(c.setLocal("z2", c.i32_add(c.getLocal("p2"), c.i32_const(n8*2))));
            const z2 = c.getLocal("z2");

            const Z1Z1 = c.i32_const(module.alloc(n8));
            const Z2Z2 = c.i32_const(module.alloc(n8));
            const U1 = c.i32_const(module.alloc(n8));
            const U2 = c.i32_const(module.alloc(n8));
            const Z1_cubed = c.i32_const(module.alloc(n8));
            const Z2_cubed = c.i32_const(module.alloc(n8));
            const S1 = c.i32_const(module.alloc(n8));
            const S2 = c.i32_const(module.alloc(n8));


            f.addCode(
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("p1")),
                    c.ret( c.call(prefix + "_isZero", c.getLocal("p2"))),
                ),
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("p2")),
                    c.ret(c.i32_const(0))
                ),
                c.if(
                    c.call(prefixField + "_isOne", z1),
                    c.ret(c.call(prefix + "_eqMixed", c.getLocal("p2"), c.getLocal("p1")))
                ),
                c.if(
                    c.call(prefixField + "_isOne", z2),
                    c.ret(c.call(prefix + "_eqMixed", c.getLocal("p1"), c.getLocal("p2")))
                ),

                c.call(prefixField + "_square", z1, Z1Z1),
                c.call(prefixField + "_square", z2, Z2Z2),
                c.call(prefixField + "_mul", x1, Z2Z2, U1),
                c.call(prefixField + "_mul", x2, Z1Z1, U2),
                c.call(prefixField + "_mul", z1, Z1Z1, Z1_cubed),
                c.call(prefixField + "_mul", z2, Z2Z2, Z2_cubed),
                c.call(prefixField + "_mul", y1, Z2_cubed, S1),
                c.call(prefixField + "_mul", y2, Z1_cubed, S2),

                c.if(
                    c.call(prefixField + "_eq", U1, U2),
                    c.if(
                        c.call(prefixField + "_eq", S1, S2),
                        c.ret(c.i32_const(1))
                    )
                ),
                c.ret(c.i32_const(0))
            );
        }


        function buildEqMixed() {
            const f = module.addFunction(prefix + "_eqMixed");
            f.addParam("p1", "i32");
            f.addParam("p2", "i32");
            f.setReturnType("i32");
            f.addLocal("z1", "i32");

            const c = f.getCodeBuilder();

            const x1 = c.getLocal("p1");
            const y1 = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            f.addCode(c.setLocal("z1", c.i32_add(c.getLocal("p1"), c.i32_const(n8*2))));
            const z1 = c.getLocal("z1");
            const x2 = c.getLocal("p2");
            const y2 = c.i32_add(c.getLocal("p2"), c.i32_const(n8));

            const Z1Z1 = c.i32_const(module.alloc(n8));
            const U2 = c.i32_const(module.alloc(n8));
            const Z1_cubed = c.i32_const(module.alloc(n8));
            const S2 = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("p1")),
                    c.ret( c.call(prefix + "_isZeroAffine", c.getLocal("p2"))),
                ),
                c.if(
                    c.call(prefix + "_isZeroAffine", c.getLocal("p2")),
                    c.ret(c.i32_const(0))
                ),
                c.if(
                    c.call(prefixField + "_isOne", z1),
                    c.ret(c.call(prefix + "_eqAffine", c.getLocal("p1"), c.getLocal("p2")))
                ),
                c.call(prefixField + "_square", z1, Z1Z1),
                c.call(prefixField + "_mul", x2, Z1Z1, U2),
                c.call(prefixField + "_mul", z1, Z1Z1, Z1_cubed),
                c.call(prefixField + "_mul", y2, Z1_cubed, S2),

                c.if(
                    c.call(prefixField + "_eq", x1, U2),
                    c.if(
                        c.call(prefixField + "_eq", y1, S2),
                        c.ret(c.i32_const(1))
                    )
                ),
                c.ret(c.i32_const(0))
            );
        }

        function buildDouble() {
            const f = module.addFunction(prefix + "_double");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("p1");
            const y = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            const z = c.i32_add(c.getLocal("p1"), c.i32_const(n8*2));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));
            const z3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8*2));

            const A = c.i32_const(module.alloc(n8));
            const B = c.i32_const(module.alloc(n8));
            const C = c.i32_const(module.alloc(n8));
            const D = c.i32_const(module.alloc(n8));
            const E = c.i32_const(module.alloc(n8));
            const F = c.i32_const(module.alloc(n8));
            const G = c.i32_const(module.alloc(n8));
            const eightC = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("p1")),
                    [
                        ...c.call(prefix + "_copy", c.getLocal("p1"), c.getLocal("pr")),
                        ...c.ret([])
                    ]
                ),
                c.if(
                    c.call(prefixField + "_isOne", z),
                    [
                        ...c.ret(c.call(prefix + "_doubleAffine", c.getLocal("p1"), c.getLocal("pr"))),
                        ...c.ret([])
                    ]
                ),

                c.call(prefixField + "_square", x, A),
                c.call(prefixField + "_square", y, B),
                c.call(prefixField + "_square", B, C),

                c.call(prefixField + "_add", x, B, D),
                c.call(prefixField + "_square", D, D),
                c.call(prefixField + "_sub", D, A, D),
                c.call(prefixField + "_sub", D, C, D),
                c.call(prefixField + "_add", D, D, D),

                c.call(prefixField + "_add", A, A, E),
                c.call(prefixField + "_add", E, A, E),
                c.call(prefixField + "_square", E, F),

                c.call(prefixField + "_mul", y, z, G),

                c.call(prefixField + "_add", D, D, x3),
                c.call(prefixField + "_sub", F, x3, x3),

                c.call(prefixField + "_add", C, C, eightC),
                c.call(prefixField + "_add", eightC, eightC, eightC),
                c.call(prefixField + "_add", eightC, eightC, eightC),

                c.call(prefixField + "_sub", D, x3, y3),
                c.call(prefixField + "_mul", y3, E, y3),
                c.call(prefixField + "_sub", y3, eightC, y3),

                c.call(prefixField + "_add", G, G, z3),
            );
        }


        function buildDoubleAffine() {
            const f = module.addFunction(prefix + "_doubleAffine");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("p1");
            const y = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));
            const z3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8*2));

            const XX = c.i32_const(module.alloc(n8));
            const YY = c.i32_const(module.alloc(n8));
            const YYYY = c.i32_const(module.alloc(n8));
            const S = c.i32_const(module.alloc(n8));
            const M = c.i32_const(module.alloc(n8));
            const eightYYYY = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZeroAffine", c.getLocal("p1")),
                    [
                        ...c.call(prefix + "_toJacobian", c.getLocal("p1"), c.getLocal("pr")),
                        ...c.ret([])
                    ]
                ),

                // XX = X1^2
                c.call(prefixField + "_square", x, XX),

                // YY = Y1^2
                c.call(prefixField + "_square", y, YY),

                // YYYY = YY^2
                c.call(prefixField + "_square", YY, YYYY),

                // S = 2*((X1+YY)^2-XX-YYYY)
                c.call(prefixField + "_add", x, YY, S),
                c.call(prefixField + "_square", S, S),
                c.call(prefixField + "_sub", S, XX, S),
                c.call(prefixField + "_sub", S, YYYY, S),
                c.call(prefixField + "_add", S, S, S),

                // M = 3*XX+a  (Hera a=0)
                c.call(prefixField + "_add", XX, XX, M),
                c.call(prefixField + "_add", M, XX, M),

                // Z3 = 2*Y1
                c.call(prefixField + "_add", y, y, z3),

                // T = M^2-2*S
                // X3 = T
                c.call(prefixField + "_square", M, x3),
                c.call(prefixField + "_sub", x3, S, x3),
                c.call(prefixField + "_sub", x3, S, x3),

                // Y3 = M*(S-T)-8*YYYY
                c.call(prefixField + "_add", YYYY, YYYY, eightYYYY),
                c.call(prefixField + "_add", eightYYYY, eightYYYY, eightYYYY),
                c.call(prefixField + "_add", eightYYYY, eightYYYY, eightYYYY),
                c.call(prefixField + "_sub", S, x3, y3),
                c.call(prefixField + "_mul", y3, M, y3),
                c.call(prefixField + "_sub", y3, eightYYYY, y3),
            );
        }


        function buildEqAffine() {
            const f = module.addFunction(prefix + "_eqAffine");
            f.addParam("p1", "i32");
            f.addParam("p2", "i32");
            f.setReturnType("i32");
            f.addLocal("z1", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.ret(c.i32_and(
                    c.call(
                        prefixField + "_eq",
                        c.getLocal("p1"),
                        c.getLocal("p2")
                    ),
                    c.call(
                        prefixField + "_eq",
                        c.i32_add(c.getLocal("p1"), c.i32_const(n8)),
                        c.i32_add(c.getLocal("p2"), c.i32_const(n8))
                    )
                ))
            );
        }

        function buildToMontgomery() {
            const f = module.addFunction(prefix + "_toMontgomery");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(
                prefixField + "_toMontgomery",
                c.getLocal("p1"),
                c.getLocal("pr")
            ));
            for (let i=1; i<3; i++) {
                f.addCode(c.call(
                    prefixField + "_toMontgomery",
                    c.i32_add(c.getLocal("p1"), c.i32_const(i*n8)),
                    c.i32_add(c.getLocal("pr"), c.i32_const(i*n8))
                ));
            }
        }

        function buildToMontgomeryAffine() {
            const f = module.addFunction(prefix + "_toMontgomeryAffine");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(
                prefixField + "_toMontgomery",
                c.getLocal("p1"),
                c.getLocal("pr")
            ));
            for (let i=1; i<2; i++) {
                f.addCode(c.call(
                    prefixField + "_toMontgomery",
                    c.i32_add(c.getLocal("p1"), c.i32_const(i*n8)),
                    c.i32_add(c.getLocal("pr"), c.i32_const(i*n8))
                ));
            }
        }

        function buildFromMontgomery() {
            const f = module.addFunction(prefix + "_fromMontgomery");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(
                prefixField + "_fromMontgomery",
                c.getLocal("p1"),
                c.getLocal("pr")
            ));
            for (let i=1; i<3; i++) {
                f.addCode(c.call(
                    prefixField + "_fromMontgomery",
                    c.i32_add(c.getLocal("p1"), c.i32_const(i*n8)),
                    c.i32_add(c.getLocal("pr"), c.i32_const(i*n8))
                ));
            }
        }


        function buildFromMontgomeryAffine() {
            const f = module.addFunction(prefix + "_fromMontgomeryAffine");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(c.call(
                prefixField + "_fromMontgomery",
                c.getLocal("p1"),
                c.getLocal("pr")
            ));
            for (let i=1; i<2; i++) {
                f.addCode(c.call(
                    prefixField + "_fromMontgomery",
                    c.i32_add(c.getLocal("p1"), c.i32_const(i*n8)),
                    c.i32_add(c.getLocal("pr"), c.i32_const(i*n8))
                ));
            }
        }

        function buildAdd() {

            const f = module.addFunction(prefix + "_add");
            f.addParam("p1", "i32");
            f.addParam("p2", "i32");
            f.addParam("pr", "i32");
            f.addLocal("z1", "i32");
            f.addLocal("z2", "i32");

            const c = f.getCodeBuilder();

            const x1 = c.getLocal("p1");
            const y1 = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            f.addCode(c.setLocal("z1", c.i32_add(c.getLocal("p1"), c.i32_const(n8*2))));
            const z1 = c.getLocal("z1");
            const x2 = c.getLocal("p2");
            const y2 = c.i32_add(c.getLocal("p2"), c.i32_const(n8));
            f.addCode(c.setLocal("z2", c.i32_add(c.getLocal("p2"), c.i32_const(n8*2))));
            const z2 = c.getLocal("z2");
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));
            const z3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8*2));

            const Z1Z1 = c.i32_const(module.alloc(n8));
            const Z2Z2 = c.i32_const(module.alloc(n8));
            const U1 = c.i32_const(module.alloc(n8));
            const U2 = c.i32_const(module.alloc(n8));
            const Z1_cubed = c.i32_const(module.alloc(n8));
            const Z2_cubed = c.i32_const(module.alloc(n8));
            const S1 = c.i32_const(module.alloc(n8));
            const S2 = c.i32_const(module.alloc(n8));
            const H = c.i32_const(module.alloc(n8));
            const S2_minus_S1 = c.i32_const(module.alloc(n8));
            const I = c.i32_const(module.alloc(n8));
            const J = c.i32_const(module.alloc(n8));
            const r = c.i32_const(module.alloc(n8));
            const r2 = c.i32_const(module.alloc(n8));
            const V = c.i32_const(module.alloc(n8));
            const V2 = c.i32_const(module.alloc(n8));
            const S1_J2 = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("p1")),
                    [
                        ...c.call(prefix + "_copy", c.getLocal("p2"), c.getLocal("pr")),
                        ...c.ret([])
                    ]
                ),
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("p2")),
                    [
                        ...c.call(prefix + "_copy", c.getLocal("p1"), c.getLocal("pr")),
                        ...c.ret([])
                    ]
                ),
                c.if(
                    c.call(prefixField + "_isOne", z1),
                    [
                        ...c.call(prefix + "_addMixed", x2, x1, x3),
                        ...c.ret([])
                    ]
                ),
                c.if(
                    c.call(prefixField + "_isOne", z2),
                    [
                        ...c.call(prefix + "_addMixed", x1, x2, x3),
                        ...c.ret([])
                    ]
                ),
                c.call(prefixField + "_square", z1, Z1Z1),
                c.call(prefixField + "_square", z2, Z2Z2),
                c.call(prefixField + "_mul", x1, Z2Z2, U1),
                c.call(prefixField + "_mul", x2, Z1Z1, U2),
                c.call(prefixField + "_mul", z1, Z1Z1, Z1_cubed),
                c.call(prefixField + "_mul", z2, Z2Z2, Z2_cubed),
                c.call(prefixField + "_mul", y1, Z2_cubed, S1),
                c.call(prefixField + "_mul", y2, Z1_cubed, S2),

                c.if(
                    c.call(prefixField + "_eq", U1, U2),
                    c.if(
                        c.call(prefixField + "_eq", S1, S2),
                        [
                            ...c.call(prefix + "_double", c.getLocal("p1"), c.getLocal("pr")),
                            ...c.ret([])
                        ]
                    )
                ),

                c.call(prefixField + "_sub", U2, U1, H),
                c.call(prefixField + "_sub", S2, S1, S2_minus_S1),
                c.call(prefixField + "_add", H, H, I),
                c.call(prefixField + "_square", I, I),
                c.call(prefixField + "_mul", H, I, J),
                c.call(prefixField + "_add", S2_minus_S1, S2_minus_S1, r),
                c.call(prefixField + "_mul", U1, I, V),
                c.call(prefixField + "_square", r, r2),
                c.call(prefixField + "_add", V, V, V2),

                c.call(prefixField + "_sub", r2, J, x3),
                c.call(prefixField + "_sub", x3, V2, x3),

                c.call(prefixField + "_mul", S1, J, S1_J2),
                c.call(prefixField + "_add", S1_J2, S1_J2, S1_J2),

                c.call(prefixField + "_sub", V, x3, y3),
                c.call(prefixField + "_mul", y3, r, y3),
                c.call(prefixField + "_sub", y3, S1_J2, y3),

                c.call(prefixField + "_add", z1, z2, z3),
                c.call(prefixField + "_square", z3, z3),
                c.call(prefixField + "_sub", z3, Z1Z1, z3),
                c.call(prefixField + "_sub", z3, Z2Z2, z3),
                c.call(prefixField + "_mul", z3, H, z3),
            );

        }


        function buildAddMixed() {

            const f = module.addFunction(prefix + "_addMixed");
            f.addParam("p1", "i32");
            f.addParam("p2", "i32");
            f.addParam("pr", "i32");
            f.addLocal("z1", "i32");

            const c = f.getCodeBuilder();

            const x1 = c.getLocal("p1");
            const y1 = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            f.addCode(c.setLocal("z1", c.i32_add(c.getLocal("p1"), c.i32_const(n8*2))));
            const z1 = c.getLocal("z1");
            const x2 = c.getLocal("p2");
            const y2 = c.i32_add(c.getLocal("p2"), c.i32_const(n8));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));
            const z3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8*2));

            const Z1Z1 = c.i32_const(module.alloc(n8));
            const U2 = c.i32_const(module.alloc(n8));
            const Z1_cubed = c.i32_const(module.alloc(n8));
            const S2 = c.i32_const(module.alloc(n8));
            const H = c.i32_const(module.alloc(n8));
            const HH = c.i32_const(module.alloc(n8));
            const S2_minus_y1 = c.i32_const(module.alloc(n8));
            const I = c.i32_const(module.alloc(n8));
            const J = c.i32_const(module.alloc(n8));
            const r = c.i32_const(module.alloc(n8));
            const r2 = c.i32_const(module.alloc(n8));
            const V = c.i32_const(module.alloc(n8));
            const V2 = c.i32_const(module.alloc(n8));
            const y1_J2 = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("p1")),
                    [
                        ...c.call(prefix + "_copyAffine", c.getLocal("p2"), c.getLocal("pr")),
                        ...c.call(prefixField + "_one", c.i32_add(c.getLocal("pr") , c.i32_const(n8*2))),
                        ...c.ret([])
                    ]
                ),
                c.if(
                    c.call(prefix + "_isZeroAffine", c.getLocal("p2")),
                    [
                        ...c.call(prefix + "_copy", c.getLocal("p1"), c.getLocal("pr")),
                        ...c.ret([])
                    ]
                ),
                c.if(
                    c.call(prefixField + "_isOne", z1),
                    [
                        ...c.call(prefix + "_addAffine", x1, x2, x3),
                        ...c.ret([])
                    ]
                ),
                c.call(prefixField + "_square", z1, Z1Z1),
                c.call(prefixField + "_mul", x2, Z1Z1, U2),
                c.call(prefixField + "_mul", z1, Z1Z1, Z1_cubed),
                c.call(prefixField + "_mul", y2, Z1_cubed, S2),

                c.if(
                    c.call(prefixField + "_eq", x1, U2),
                    c.if(
                        c.call(prefixField + "_eq", y1, S2),
                        [
                            ...c.call(prefix + "_doubleAffine", c.getLocal("p2"), c.getLocal("pr")),
                            ...c.ret([])
                        ]
                    )
                ),

                c.call(prefixField + "_sub", U2, x1, H),
                c.call(prefixField + "_sub", S2, y1, S2_minus_y1),
                c.call(prefixField + "_square", H, HH),
                c.call(prefixField + "_add", HH , HH, I),
                c.call(prefixField + "_add", I , I, I),
                c.call(prefixField + "_mul", H, I, J),
                c.call(prefixField + "_add", S2_minus_y1, S2_minus_y1, r),
                c.call(prefixField + "_mul", x1, I, V),
                c.call(prefixField + "_square", r, r2),
                c.call(prefixField + "_add", V, V, V2),

                c.call(prefixField + "_sub", r2, J, x3),
                c.call(prefixField + "_sub", x3, V2, x3),

                c.call(prefixField + "_mul", y1, J, y1_J2),
                c.call(prefixField + "_add", y1_J2, y1_J2, y1_J2),

                c.call(prefixField + "_sub", V, x3, y3),
                c.call(prefixField + "_mul", y3, r, y3),
                c.call(prefixField + "_sub", y3, y1_J2, y3),

                c.call(prefixField + "_add", z1, H, z3),
                c.call(prefixField + "_square", z3, z3),
                c.call(prefixField + "_sub", z3, Z1Z1, z3),
                c.call(prefixField + "_sub", z3, HH, z3),
            );
        }


        function buildAddAffine() {

            const f = module.addFunction(prefix + "_addAffine");
            f.addParam("p1", "i32");
            f.addParam("p2", "i32");
            f.addParam("pr", "i32");
            f.addLocal("z1", "i32");

            const c = f.getCodeBuilder();

            const x1 = c.getLocal("p1");
            const y1 = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            f.addCode(c.setLocal("z1", c.i32_add(c.getLocal("p1"), c.i32_const(n8*2))));
            const x2 = c.getLocal("p2");
            const y2 = c.i32_add(c.getLocal("p2"), c.i32_const(n8));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));
            const z3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8*2));

            const H = c.i32_const(module.alloc(n8));
            const HH = c.i32_const(module.alloc(n8));
            const y2_minus_y1 = c.i32_const(module.alloc(n8));
            const I = c.i32_const(module.alloc(n8));
            const J = c.i32_const(module.alloc(n8));
            const r = c.i32_const(module.alloc(n8));
            const r2 = c.i32_const(module.alloc(n8));
            const V = c.i32_const(module.alloc(n8));
            const V2 = c.i32_const(module.alloc(n8));
            const y1_J2 = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZeroAffine", c.getLocal("p1")),
                    [
                        ...c.call(prefix + "_copyAffine", c.getLocal("p2"), c.getLocal("pr")),
                        ...c.call(prefixField + "_one", c.i32_add(c.getLocal("pr") , c.i32_const(n8*2))),
                        ...c.ret([])
                    ]
                ),
                c.if(
                    c.call(prefix + "_isZeroAffine", c.getLocal("p2")),
                    [
                        ...c.call(prefix + "_copyAffine", c.getLocal("p1"), c.getLocal("pr")),
                        ...c.call(prefixField + "_one", c.i32_add(c.getLocal("pr") , c.i32_const(n8*2))),
                        ...c.ret([])
                    ]
                ),


                c.if(
                    c.call(prefixField + "_eq", x1, x2),
                    c.if(
                        c.call(prefixField + "_eq", y1, y2),
                        [
                            ...c.call(prefix + "_doubleAffine", c.getLocal("p2"), c.getLocal("pr")),
                            ...c.ret([])
                        ]
                    )
                ),

                c.call(prefixField + "_sub", x2, x1, H),
                c.call(prefixField + "_sub", y2, y1, y2_minus_y1),
                c.call(prefixField + "_square", H, HH),
                c.call(prefixField + "_add", HH , HH, I),
                c.call(prefixField + "_add", I , I, I),
                c.call(prefixField + "_mul", H, I, J),
                c.call(prefixField + "_add", y2_minus_y1, y2_minus_y1, r),
                c.call(prefixField + "_mul", x1, I, V),
                c.call(prefixField + "_square", r, r2),
                c.call(prefixField + "_add", V, V, V2),

                c.call(prefixField + "_sub", r2, J, x3),
                c.call(prefixField + "_sub", x3, V2, x3),

                c.call(prefixField + "_mul", y1, J, y1_J2),
                c.call(prefixField + "_add", y1_J2, y1_J2, y1_J2),

                c.call(prefixField + "_sub", V, x3, y3),
                c.call(prefixField + "_mul", y3, r, y3),
                c.call(prefixField + "_sub", y3, y1_J2, y3),

                c.call(prefixField + "_add", H, H, z3),
            );
        }

        function buildNeg() {
            const f = module.addFunction(prefix + "_neg");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("p1");
            const y = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            const z = c.i32_add(c.getLocal("p1"), c.i32_const(n8*2));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));
            const z3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8*2));

            f.addCode(
                c.call(prefixField + "_copy", x, x3),
                c.call(prefixField + "_neg", y, y3),
                c.call(prefixField + "_copy", z, z3)
            );
        }


        function buildNegAffine() {
            const f = module.addFunction(prefix + "_negAffine");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("p1");
            const y = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));

            f.addCode(
                c.call(prefixField + "_copy", x, x3),
                c.call(prefixField + "_neg", y, y3),
            );
        }


        function buildSub() {
            const f = module.addFunction(prefix + "_sub");
            f.addParam("p1", "i32");
            f.addParam("p2", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8*3));

            f.addCode(
                c.call(prefix + "_neg", c.getLocal("p2"), AUX),
                c.call(prefix + "_add", c.getLocal("p1"), AUX, c.getLocal("pr")),
            );
        }

        function buildSubMixed() {
            const f = module.addFunction(prefix + "_subMixed");
            f.addParam("p1", "i32");
            f.addParam("p2", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8*3));

            f.addCode(
                c.call(prefix + "_negAffine", c.getLocal("p2"), AUX),
                c.call(prefix + "_addMixed", c.getLocal("p1"), AUX, c.getLocal("pr")),
            );
        }


        function buildSubAffine() {
            const f = module.addFunction(prefix + "_subAffine");
            f.addParam("p1", "i32");
            f.addParam("p2", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8*3));

            f.addCode(
                c.call(prefix + "_negAffine", c.getLocal("p2"), AUX),
                c.call(prefix + "_addAffine", c.getLocal("p1"), AUX, c.getLocal("pr")),
            );
        }

        // This sets Z to One
        function buildNormalize() {
            const f = module.addFunction(prefix + "_normalize");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("p1");
            const y = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            const z = c.i32_add(c.getLocal("p1"), c.i32_const(n8*2));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));
            const z3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8*2));


            const Z_inv = c.i32_const(module.alloc(n8));
            const Z2_inv = c.i32_const(module.alloc(n8));
            const Z3_inv = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("p1")),
                    c.call(prefix + "_zero", c.getLocal("pr")),
                    [
                        ...c.call(prefixField + "_inverse", z, Z_inv),
                        ...c.call(prefixField + "_square", Z_inv, Z2_inv),
                        ...c.call(prefixField + "_mul", Z_inv, Z2_inv, Z3_inv),
                        ...c.call(prefixField + "_mul", x, Z2_inv, x3),
                        ...c.call(prefixField + "_mul", y, Z3_inv, y3),
                        ...c.call(prefixField + "_one", z3),
                    ]
                )
            );
        }


        // Does not set Z.
        function buildToAffine() {
            const f = module.addFunction(prefix + "_toAffine");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("p1");
            const y = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            const z = c.i32_add(c.getLocal("p1"), c.i32_const(n8*2));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));


            const Z_inv = c.i32_const(module.alloc(n8));
            const Z2_inv = c.i32_const(module.alloc(n8));
            const Z3_inv = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("p1")),
                    [
                        ...c.call(prefixField + "_zero", x3),
                        ...c.call(prefixField + "_zero", y3),
                    ],
                    [
                        ...c.call(prefixField + "_inverse", z, Z_inv),
                        ...c.call(prefixField + "_square", Z_inv, Z2_inv),
                        ...c.call(prefixField + "_mul", Z_inv, Z2_inv, Z3_inv),
                        ...c.call(prefixField + "_mul", x, Z2_inv, x3),
                        ...c.call(prefixField + "_mul", y, Z3_inv, y3),
                    ]
                )
            );
        }


        function buildToJacobian() {
            const f = module.addFunction(prefix + "_toJacobian");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("p1");
            const y = c.i32_add(c.getLocal("p1"), c.i32_const(n8));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8));
            const z3 = c.i32_add(c.getLocal("pr"), c.i32_const(n8*2));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZeroAffine", c.getLocal("p1")),
                    c.call(prefix + "_zero", c.getLocal("pr")),
                    [
                        ...c.call(prefixField + "_one", z3),
                        ...c.call(prefixField + "_copy", y, y3),
                        ...c.call(prefixField + "_copy", x, x3)
                    ]
                )
            );
        }

        function buildBatchToAffine() {
            const f = module.addFunction(prefix + "_batchToAffine");
            f.addParam("pIn", "i32");
            f.addParam("n", "i32");
            f.addParam("pOut", "i32");
            f.addLocal("pAux", "i32");
            f.addLocal("itIn", "i32");
            f.addLocal("itAux", "i32");
            f.addLocal("itOut", "i32");
            f.addLocal("i", "i32");

            const c = f.getCodeBuilder();

            const tmp = c.i32_const(module.alloc(n8));

            f.addCode(
                c.setLocal("pAux", c.i32_load( c.i32_const(0) )),
                c.i32_store(
                    c.i32_const(0),
                    c.i32_add(
                        c.getLocal("pAux"),
                        c.i32_mul(c.getLocal("n"), c.i32_const(n8))
                    )
                ),

                c.call(
                    prefixField + "_batchInverse",
                    c.i32_add(c.getLocal("pIn"), c.i32_const(n8*2)),
                    c.i32_const(n8*3),
                    c.getLocal("n"),
                    c.getLocal("pAux"),
                    c.i32_const(n8)
                ),

                c.setLocal("itIn", c.getLocal("pIn")),
                c.setLocal("itAux", c.getLocal("pAux")),
                c.setLocal("itOut", c.getLocal("pOut")),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                    c.if(
                        c.call(prefixField + "_isZero", c.getLocal("itAux")),
                        [
                            ...c.call(prefixField + "_zero", c.getLocal("itOut")),
                            ...c.call(prefixField + "_zero", c.i32_add(c.getLocal("itOut"), c.i32_const(n8)))
                        ],
                        [
                            ...c.call(
                                prefixField+"_mul",
                                c.getLocal("itAux"),
                                c.i32_add(c.getLocal("itIn"), c.i32_const(n8)),
                                tmp,
                            ),
                            ...c.call(
                                prefixField+"_square",
                                c.getLocal("itAux"),
                                c.getLocal("itAux")
                            ),
                            ...c.call(
                                prefixField+"_mul",
                                c.getLocal("itAux"),
                                c.getLocal("itIn"),
                                c.getLocal("itOut"),
                            ),
                            ...c.call(
                                prefixField+"_mul",
                                c.getLocal("itAux"),
                                tmp,
                                c.i32_add(c.getLocal("itOut"), c.i32_const(n8)),
                            ),
                        ]
                    ),

                    c.setLocal("itIn", c.i32_add(c.getLocal("itIn"), c.i32_const(n8*3))),
                    c.setLocal("itOut", c.i32_add(c.getLocal("itOut"), c.i32_const(n8*2))),
                    c.setLocal("itAux", c.i32_add(c.getLocal("itAux"), c.i32_const(n8))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
                c.i32_store(
                    c.i32_const(0),
                    c.getLocal("pAux")
                )
            );
        }


        // This function is private and does not allow to OVERLAP buffers.
        function buildReverseBytes() {
            const f = module.addFunction(prefix + "__reverseBytes");
            f.addParam("pIn", "i32");
            f.addParam("n", "i32");
            f.addParam("pOut", "i32");
            f.addLocal("itOut", "i32");
            f.addLocal("itIn", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.setLocal(
                    "itOut",
                    c.i32_sub(
                        c.i32_add(
                            c.getLocal("pOut"),
                            c.getLocal("n")
                        ),
                        c.i32_const(1)
                    )
                ),
                c.setLocal(
                    "itIn",
                    c.getLocal("pIn")
                ),
                c.block(c.loop(
                    c.br_if(1, c.i32_lt_s( c.getLocal("itOut"), c.getLocal("pOut") )),
                    c.i32_store8(
                        c.getLocal("itOut"),
                        c.i32_load8_u(c.getLocal("itIn")),
                    ),
                    c.setLocal("itOut", c.i32_sub(c.getLocal("itOut"), c.i32_const(1))),
                    c.setLocal("itIn", c.i32_add(c.getLocal("itIn"), c.i32_const(1))),
                    c.br(0)
                )),
            );

        }

        function buildLEMtoC() {
            const f = module.addFunction(prefix + "_LEMtoC");
            f.addParam("pIn", "i32");
            f.addParam("pOut", "i32");

            const c = f.getCodeBuilder();

            const tmp = c.i32_const(module.alloc(n8));

            f.addCode(
                c.if(
                    c.call(prefix + "_isZero", c.getLocal("pIn")),
                    [
                        ...c.call(prefixField + "_zero", c.getLocal("pOut")),
                        ...c.i32_store8(
                            c.getLocal("pOut"),
                            c.i32_const(0x40)
                        ),
                        ...c.ret([])
                    ]
                ),
                c.call(prefixField + "_fromMontgomery", c.getLocal("pIn"), tmp),
                c.call(prefix + "__reverseBytes", tmp, c.i32_const(n8), c.getLocal("pOut")),
                c.if(
                    c.i32_eq(
                        c.call(prefixField + "_sign", c.i32_add(c.getLocal("pIn"), c.i32_const(n8))),
                        c.i32_const(-1)
                    ),
                    c.i32_store8(
                        c.getLocal("pOut"),
                        c.i32_or(
                            c.i32_load8_u(c.getLocal("pOut")),
                            c.i32_const(0x80)
                        )
                    )
                ),
            );
        }

        function buildLEMtoU() {
            const f = module.addFunction(prefix + "_LEMtoU");
            f.addParam("pIn", "i32");
            f.addParam("pOut", "i32");

            const c = f.getCodeBuilder();

            const pTmp = module.alloc(n8*2);
            const tmp = c.i32_const(pTmp);
            const tmpX = c.i32_const(pTmp);
            const tmpY = c.i32_const(pTmp + n8);

            f.addCode(
                c.if(
                    c.call(prefix + "_isZeroAffine", c.getLocal("pIn")),
                    [
                        ...c.call(prefix + "_zeroAffine", c.getLocal("pOut")),
                        ...c.i32_store8(
                            c.getLocal("pOut"),
                            c.i32_const(0x40)
                        ),
                        ...c.ret([])
                    ]
                ),

                c.call(prefix + "_fromMontgomeryAffine", c.getLocal("pIn"), tmp),

                c.call(prefix + "__reverseBytes", tmpX, c.i32_const(n8), c.getLocal("pOut")),
                c.call(prefix + "__reverseBytes", tmpY, c.i32_const(n8), c.i32_add(c.getLocal("pOut"), c.i32_const(n8))),
            );
        }

        function buildUtoLEM() {
            const f = module.addFunction(prefix + "_UtoLEM");
            f.addParam("pIn", "i32");
            f.addParam("pOut", "i32");

            const c = f.getCodeBuilder();

            const pTmp = module.alloc(n8*2);
            const tmp = c.i32_const(pTmp);
            const tmpX = c.i32_const(pTmp);
            const tmpY = c.i32_const(pTmp + n8);

            f.addCode(
                c.if(
                    c.i32_and(c.i32_load8_u(c.getLocal("pIn")), c.i32_const(0x40)),
                    [
                        ...c.call(prefix + "_zeroAffine", c.getLocal("pOut")),
                        ...c.ret([])
                    ]
                ),
                c.call(prefix + "__reverseBytes", c.getLocal("pIn"), c.i32_const(n8), tmpX),
                c.call(prefix + "__reverseBytes", c.i32_add(c.getLocal("pIn"), c.i32_const(n8)), c.i32_const(n8), tmpY),
                c.call(prefix + "_toMontgomeryAffine", tmp,  c.getLocal("pOut"))
            );
        }

        function buildCtoLEM() {
            const f = module.addFunction(prefix + "_CtoLEM");
            f.addParam("pIn", "i32");
            f.addParam("pOut", "i32");
            f.addLocal("firstByte", "i32");
            f.addLocal("greatest", "i32");

            const c = f.getCodeBuilder();

            const pTmp = module.alloc(n8*2);
            const tmpX = c.i32_const(pTmp);
            const tmpY = c.i32_const(pTmp + n8);

            f.addCode(
                c.setLocal("firstByte", c.i32_load8_u(c.getLocal("pIn"))),
                c.if(
                    c.i32_and(
                        c.getLocal("firstByte"),
                        c.i32_const(0x40)
                    ),
                    [
                        ...c.call(prefix + "_zeroAffine", c.getLocal("pOut")),
                        ...c.ret([])
                    ]
                ),
                c.setLocal(
                    "greatest",
                    c.i32_and(
                        c.getLocal("firstByte"),
                        c.i32_const(0x80)
                    )
                ),

                c.call(prefixField + "_copy", c.getLocal("pIn"), tmpY),
                c.i32_store8(tmpY, c.i32_and(c.getLocal("firstByte"), c.i32_const(0x3F))),
                c.call(prefix + "__reverseBytes", tmpY, c.i32_const(n8), tmpX),
                c.call(prefixField + "_toMontgomery", tmpX, c.getLocal("pOut")),

                c.call(prefixField + "_square", c.getLocal("pOut"), tmpY),
                c.call(prefixField + "_mul", c.getLocal("pOut"), tmpY,  tmpY),
                c.call(prefixField + "_add", tmpY, c.i32_const(pB),  tmpY),

                c.call(prefixField + "_sqrt", tmpY, tmpY),
                c.call(prefixField + "_neg", tmpY, tmpX),

                c.if(
                    c.i32_eq(
                        c.call(prefixField + "_sign", tmpY),
                        c.i32_const(-1)
                    ),
                    c.if(
                        c.getLocal("greatest"),
                        c.call(prefixField + "_copy", tmpY, c.i32_add(c.getLocal("pOut"), c.i32_const(n8))),
                        c.call(prefixField + "_neg", tmpY, c.i32_add(c.getLocal("pOut"), c.i32_const(n8)))
                    ),
                    c.if(
                        c.getLocal("greatest"),
                        c.call(prefixField + "_neg", tmpY, c.i32_add(c.getLocal("pOut"), c.i32_const(n8))),
                        c.call(prefixField + "_copy", tmpY, c.i32_add(c.getLocal("pOut"), c.i32_const(n8)))
                    ),
                )

            );
        }


        function buildInCurveAffine() {
            const f = module.addFunction(prefix + "_inCurveAffine");
            f.addParam("pIn", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("pIn");
            const y = c.i32_add(c.getLocal("pIn"), n8);

            const y2 = module.alloc(n8*2);
            const x3b = module.alloc(n8*2);

            f.addCode(
                c.call(prefixField + "_square", y, y2),
                c.call(prefixField + "_square", x, x3b),
                c.call(prefixField + "_mul", x, x3b, x3b),
                c.call(prefixField + "_add", x3b, c.i32_const(pB), x3b),

                c.ret(
                    c.call(prefixField + "_eq", y2, x3b)
                )
            );
        }

        function buildInCurveAffine() {
            const f = module.addFunction(prefix + "_inCurveAffine");
            f.addParam("pIn", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("pIn");
            const y = c.i32_add(c.getLocal("pIn"), c.i32_const(n8));

            const y2 = c.i32_const(module.alloc(n8));
            const x3b = c.i32_const(module.alloc(n8));

            f.addCode(
                c.call(prefixField + "_square", y, y2),
                c.call(prefixField + "_square", x, x3b),
                c.call(prefixField + "_mul", x, x3b, x3b),
                c.call(prefixField + "_add", x3b, c.i32_const(pB), x3b),

                c.ret(
                    c.call(prefixField + "_eq", y2, x3b)
                )
            );
        }

        function buildInCurve() {
            const f = module.addFunction(prefix + "_inCurve");
            f.addParam("pIn", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const aux = c.i32_const(module.alloc(n8*2));

            f.addCode(
                c.call(prefix + "_toAffine", c.getLocal("pIn"), aux),

                c.ret(
                    c.call(prefix + "_inCurveAffine", aux),
                )
            );
        }

        buildIsZeroAffine();
        buildIsZero();
        buildZeroAffine();
        buildZero();
        buildCopyAffine();
        buildCopy();
        buildToJacobian();
        buildEqAffine();
        buildEqMixed();
        buildEq();
        buildDoubleAffine();
        buildDouble();
        buildAddAffine();
        buildAddMixed();
        buildAdd();
        buildNegAffine();
        buildNeg();
        buildSubAffine();
        buildSubMixed();
        buildSub();
        buildFromMontgomeryAffine();
        buildFromMontgomery();
        buildToMontgomeryAffine();
        buildToMontgomery();
        buildToAffine();
        buildInCurveAffine();
        buildInCurve();

        buildBatchToAffine();

        buildNormalize();


        buildReverseBytes();

        buildLEMtoU();
        buildLEMtoC();
        buildUtoLEM();
        buildCtoLEM();

        build_batchconvertion(module, prefix + "_batchLEMtoU", prefix + "_LEMtoU", n8*2, n8*2);
        build_batchconvertion(module, prefix + "_batchLEMtoC", prefix + "_LEMtoC", n8*2, n8);
        build_batchconvertion(module, prefix + "_batchUtoLEM", prefix + "_UtoLEM", n8*2, n8*2);
        build_batchconvertion(module, prefix + "_batchCtoLEM", prefix + "_CtoLEM", n8, n8*2, true);

        build_batchconvertion(module, prefix + "_batchToJacobian", prefix + "_toJacobian", n8*2, n8*3, true);

        build_multiexp(module, prefix, prefix + "_multiexp", prefix + "_add", n8*3);
        build_multiexp(module, prefix, prefix + "_multiexpAffine", prefix + "_addMixed", n8*2);

        /*
        buildTimesScalar(
            module,
            prefix + "_timesScalarOld",
            n8*3,
            prefix + "_add",
            prefix + "_double",
            prefix + "_copy",
            prefix + "_zero",
        );
        */
        build_timesscalarnaf(
            module,
            prefix + "_timesScalar",
            n8*3,
            prefix + "_add",
            prefix + "_double",
            prefix + "_sub",
            prefix + "_copy",
            prefix + "_zero"
        );

        build_timesscalarnaf(
            module,
            prefix + "_timesScalarAffine",
            n8*2,
            prefix + "_addMixed",
            prefix + "_double",
            prefix + "_subMixed",
            prefix + "_copyAffine",
            prefix + "_zero"
        );

        module.exportFunction(prefix + "_isZero");
        module.exportFunction(prefix + "_isZeroAffine");

        module.exportFunction(prefix + "_eq");
        module.exportFunction(prefix + "_eqMixed");
        module.exportFunction(prefix + "_eqAffine");

        module.exportFunction(prefix + "_copy");
        module.exportFunction(prefix + "_copyAffine");

        module.exportFunction(prefix + "_zero");
        module.exportFunction(prefix + "_zeroAffine");

        module.exportFunction(prefix + "_double");
        module.exportFunction(prefix + "_doubleAffine");

        module.exportFunction(prefix + "_add");
        module.exportFunction(prefix + "_addMixed");
        module.exportFunction(prefix + "_addAffine");

        module.exportFunction(prefix + "_neg");
        module.exportFunction(prefix + "_negAffine");

        module.exportFunction(prefix + "_sub");
        module.exportFunction(prefix + "_subMixed");
        module.exportFunction(prefix + "_subAffine");

        module.exportFunction(prefix + "_fromMontgomery");
        module.exportFunction(prefix + "_fromMontgomeryAffine");

        module.exportFunction(prefix + "_toMontgomery");
        module.exportFunction(prefix + "_toMontgomeryAffine");

        module.exportFunction(prefix + "_timesScalar");
        module.exportFunction(prefix + "_timesScalarAffine");

        module.exportFunction(prefix + "_normalize");

        // Convertion functions
        module.exportFunction(prefix + "_LEMtoU");
        module.exportFunction(prefix + "_LEMtoC");
        module.exportFunction(prefix + "_UtoLEM");
        module.exportFunction(prefix + "_CtoLEM");

        module.exportFunction(prefix + "_batchLEMtoU");
        module.exportFunction(prefix + "_batchLEMtoC");
        module.exportFunction(prefix + "_batchUtoLEM");
        module.exportFunction(prefix + "_batchCtoLEM");

        module.exportFunction(prefix + "_toAffine");
        module.exportFunction(prefix + "_toJacobian");

        module.exportFunction(prefix + "_batchToAffine");
        module.exportFunction(prefix + "_batchToJacobian");

        module.exportFunction(prefix + "_inCurve");
        module.exportFunction(prefix + "_inCurveAffine");

        /*
        buildG1MulScalar(module, zq);
        module.exportFunction("g1MulScalar");
        */

        return prefix;
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var build_fft = function buildFFT(module, prefix, gPrefix, fPrefix, opGtimesF) {

        const n64f = module.modules[fPrefix].n64;
        const n8f = n64f*8;

        const n64g = module.modules[gPrefix].n64;
        const n8g = n64g*8;

        const q = module.modules[fPrefix].q;

        let rem = q.minus(BigInteger(1));
        let maxBits = 0;
        while (!rem.isOdd()) {
            maxBits ++;
            rem = rem.shiftRight(1);
        }

        let nr = BigInteger(2);

        while ( nr.modPow(q.shiftRight(1), q).equals(1) ) nr = nr.add(1);

        // console.log(nr);

        const w = new Array(maxBits+1);
        w[maxBits] = nr.modPow(rem, q);

        let n=maxBits-1;
        while (n>=0) {
            w[n] = w[n+1].modPow(2, q);
            n--;
        }

        const bytes = [];
        const R = BigInteger(1).shiftLeft(n8f*8).mod(q);

        for (let i=0; i<w.length; i++) {
            const m = w[i].times(R).mod(q);
            bytes.push(...utils$3.bigInt2BytesLE(m, n8f));
        }

        const ROOTs = module.alloc(bytes);

        const i2 = new Array(maxBits+1);
        i2[0] = BigInteger(1);

        for (let i=1; i<=maxBits; i++) {
            i2[i] = i2[i-1].times(2);
        }

        const bytesi2 =[];
        for (let i=0; i<=maxBits; i++) {
            const m = i2[i].modInv(q).times(R).mod(q);
            bytesi2.push(...utils$3.bigInt2BytesLE(m, n8f));
        }

        const INV2 = module.alloc(bytesi2);

        const shift = nr.modPow(2, q);
        const bytesShiftToSmallM =[];
        const bytesSConst =[];
        for (let i=0; i<=maxBits; i++) {
            const shiftToSmallM = shift.modPow(BigInteger(2).pow(i), q);
            const sConst = q.add(BigInteger.one).minus(shiftToSmallM).modInv(q);
            bytesShiftToSmallM.push(...utils$3.bigInt2BytesLE(shiftToSmallM.times(R).mod(q), n8f));
            bytesSConst.push(...utils$3.bigInt2BytesLE(sConst.times(R).mod(q), n8f));
        }

        const SHIFT_TO_M = module.alloc( bytesShiftToSmallM  );
        const SCONST = module.alloc( bytesSConst  );

        function rev(x) {
            let r=0;
            for (let i=0; i<8; i++) {
                if (x & (1 << i)) {
                    r = r | (0x80 >> i);
                }
            }
            return r;
        }

        const rtable = Array(256);
        for (let i=0; i<256; i++) {
            rtable[i] = rev(i);
        }

        const REVTABLE = module.alloc(rtable);


        function buildLog2() {
            const f = module.addFunction(prefix+"__log2");
            f.addParam("n", "i32");
            f.setReturnType("i32");
            f.addLocal("bits", "i32");
            f.addLocal("aux", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.setLocal(
                    "aux",
                    c.i32_shr_u(
                        c.getLocal("n"),
                        c.i32_const(1)
                    )
                )
            );
            f.addCode(c.setLocal("bits", c.i32_const(0)));

            f.addCode(c.block(c.loop(
                c.br_if(
                    1,
                    c.i32_eqz(c.getLocal("aux"))
                ),

                c.setLocal(
                    "aux",
                    c.i32_shr_u(
                        c.getLocal("aux"),
                        c.i32_const(1)
                    )
                ),

                c.setLocal(
                    "bits",
                    c.i32_add(
                        c.getLocal("bits"),
                        c.i32_const(1)
                    )
                ),

                c.br(0)
            )));

            f.addCode(c.if(
                c.i32_ne(
                    c.getLocal("n"),
                    c.i32_shl(
                        c.i32_const(1),
                        c.getLocal("bits")
                    )
                ),
                c.unreachable()
            ));

            f.addCode(c.if(
                c.i32_gt_u(
                    c.getLocal("bits"),
                    c.i32_const(maxBits)
                ),
                c.unreachable()
            ));

            f.addCode(c.getLocal("bits"));
        }

        function buildFFT() {
            const f = module.addFunction(prefix+"_fft");
            f.addParam("px", "i32");
            f.addParam("n", "i32");

            f.addLocal("bits", "i32");

            const c = f.getCodeBuilder();

            const One = c.i32_const(module.alloc(n8f));

            f.addCode(
                c.setLocal(
                    "bits",
                    c.call(
                        prefix + "__log2",
                        c.getLocal("n")
                    )
                ),
                c.call(fPrefix + "_one", One),
                c.call(
                    prefix+"_rawfft",
                    c.getLocal("px"),
                    c.getLocal("bits"),
                    c.i32_const(0),
                    One
                )
            );

        }

        function buildIFFT() {
            const f = module.addFunction(prefix+"_ifft");
            f.addParam("px", "i32");
            f.addParam("n", "i32");
            f.addLocal("bits", "i32");
            f.addLocal("pInv2", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.setLocal(
                    "bits",
                    c.call(
                        prefix + "__log2",
                        c.getLocal("n")
                    )
                ),
                c.setLocal(
                    "pInv2",
                    c.i32_add(
                        c.i32_const(INV2),
                        c.i32_mul(
                            c.getLocal("bits"),
                            c.i32_const(n8f)
                        )
                    )
                ),

                c.call(
                    prefix+"_rawfft",
                    c.getLocal("px"),
                    c.getLocal("bits"),
                    c.i32_const(1),
                    c.getLocal("pInv2")
                ),
            );
        }

        function buildRawFFT() {
            const f = module.addFunction(prefix+"_rawfft");
            f.addParam("px", "i32");
            f.addParam("bits", "i32"); // 2 power
            f.addParam("reverse", "i32");
            f.addParam("mulFactor", "i32");

            f.addLocal("s", "i32");
            f.addLocal("k", "i32");
            f.addLocal("j", "i32");
            f.addLocal("m", "i32");
            f.addLocal("mdiv2", "i32");
            f.addLocal("n", "i32");
            f.addLocal("pwm", "i32");
            f.addLocal("idx1", "i32");
            f.addLocal("idx2", "i32");

            const c = f.getCodeBuilder();

            const W = c.i32_const(module.alloc(n8f));
            const T = c.i32_const(module.alloc(n8g));
            const U = c.i32_const(module.alloc(n8g));

            f.addCode(
                c.call(prefix + "__reversePermutation", c.getLocal("px"), c.getLocal("bits")),
                c.setLocal("n", c.i32_shl(c.i32_const(1), c.getLocal("bits"))),
                c.setLocal("s", c.i32_const(1)),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_gt_u(
                            c.getLocal("s"),
                            c.getLocal("bits")
                        )
                    ),
                    c.setLocal("m", c.i32_shl(c.i32_const(1), c.getLocal("s"))),
                    c.setLocal("pwm",
                        c.i32_add(
                            c.i32_const(ROOTs),
                            c.i32_mul(
                                c.getLocal("s"),
                                c.i32_const(n8f)
                            )
                        )
                    ),
                    c.setLocal("k", c.i32_const(0)),
                    c.block(c.loop(
                        c.br_if(
                            1,
                            c.i32_ge_u(
                                c.getLocal("k"),
                                c.getLocal("n")
                            )
                        ),

                        c.call(fPrefix + "_one", W),

                        c.setLocal("mdiv2", c.i32_shr_u(c.getLocal("m"), c.i32_const(1)) ),
                        c.setLocal("j", c.i32_const(0)),
                        c.block(c.loop(
                            c.br_if(
                                1,
                                c.i32_ge_u(
                                    c.getLocal("j"),
                                    c.getLocal("mdiv2")
                                )
                            ),

                            c.setLocal(
                                "idx1",
                                c.i32_add(
                                    c.getLocal("px"),
                                    c.i32_mul(
                                        c.i32_add(
                                            c.getLocal("k"),
                                            c.getLocal("j")
                                        ),
                                        c.i32_const(n8g)
                                    )
                                )
                            ),

                            c.setLocal(
                                "idx2",
                                c.i32_add(
                                    c.getLocal("idx1"),
                                    c.i32_mul(
                                        c.getLocal("mdiv2"),
                                        c.i32_const(n8g)
                                    )
                                )
                            ),

                            c.call(
                                opGtimesF,
                                c.getLocal("idx2"),
                                W,
                                T
                            ),

                            c.call(
                                gPrefix + "_copy",
                                c.getLocal("idx1"),
                                U
                            ),

                            c.call(
                                gPrefix + "_add",
                                U,
                                T,
                                c.getLocal("idx1"),
                            ),

                            c.call(
                                gPrefix + "_sub",
                                U,
                                T,
                                c.getLocal("idx2"),
                            ),

                            c.call(
                                fPrefix + "_mul",
                                W,
                                c.getLocal("pwm"),
                                W,
                            ),

                            c.setLocal("j", c.i32_add(c.getLocal("j"), c.i32_const(1))),
                            c.br(0)
                        )),

                        c.setLocal("k", c.i32_add(c.getLocal("k"), c.getLocal("m"))),
                        c.br(0)
                    )),

                    c.setLocal("s", c.i32_add(c.getLocal("s"), c.i32_const(1))),
                    c.br(0)
                )),
                c.call(
                    prefix + "__fftFinal",
                    c.getLocal("px"),
                    c.getLocal("bits"),
                    c.getLocal("reverse"),
                    c.getLocal("mulFactor")
                )
            );
        }


        function buildFinalInverse() {
            const f = module.addFunction(prefix+"__fftFinal");
            f.addParam("px", "i32");
            f.addParam("bits", "i32");
            f.addParam("reverse", "i32");
            f.addParam("mulFactor", "i32");
            f.addLocal("n", "i32");
            f.addLocal("ndiv2", "i32");
            f.addLocal("pInv2", "i32");
            f.addLocal("i", "i32");
            f.addLocal("mask", "i32");
            f.addLocal("idx1", "i32");
            f.addLocal("idx2", "i32");

            const c = f.getCodeBuilder();

            const T = c.i32_const(module.alloc(n8g));

            f.addCode(
                c.if(
                    c.i32_and(
                        c.i32_eqz(c.getLocal("reverse")),
                        c.call(fPrefix + "_isOne", c.getLocal("mulFactor"))
                    ),
                    c.ret([])
                ),
                c.setLocal("n", c.i32_shl( c.i32_const(1), c.getLocal("bits"))),

                c.setLocal("mask", c.i32_sub( c.getLocal("n") , c.i32_const(1))),
                c.setLocal("i", c.i32_const(1)),
                c.setLocal(
                    "ndiv2",
                    c.i32_shr_u(
                        c.getLocal("n"),
                        c.i32_const(1)
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_ge_u(
                            c.getLocal("i"),
                            c.getLocal("ndiv2")
                        )
                    ),

                    c.setLocal("idx1",
                        c.i32_add(
                            c.getLocal("px"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.setLocal("idx2",
                        c.i32_add(
                            c.getLocal("px"),
                            c.i32_mul(
                                c.i32_sub(
                                    c.getLocal("n"),
                                    c.getLocal("i")
                                ),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.if(
                        c.getLocal("reverse"),
                        c.if(
                            c.call(fPrefix + "_isOne", c.getLocal("mulFactor")),
                            [
                                ...c.call(gPrefix + "_copy", c.getLocal("idx1"), T),
                                ...c.call(gPrefix + "_copy", c.getLocal("idx2") , c.getLocal("idx1") ),
                                ...c.call(gPrefix + "_copy", T , c.getLocal("idx2")),
                            ],
                            [
                                ...c.call(gPrefix + "_copy", c.getLocal("idx1"), T),
                                ...c.call(opGtimesF , c.getLocal("idx2") , c.getLocal("mulFactor"), c.getLocal("idx1") ),
                                ...c.call(opGtimesF , T , c.getLocal("mulFactor"), c.getLocal("idx2")),
                            ]
                        ),
                        c.if(
                            c.call(fPrefix + "_isOne", c.getLocal("mulFactor")),
                            [
                                // Do nothing (It should not be here)
                            ],
                            [
                                ...c.call(opGtimesF , c.getLocal("idx1") , c.getLocal("mulFactor"), c.getLocal("idx1") ),
                                ...c.call(opGtimesF , c.getLocal("idx2") , c.getLocal("mulFactor"), c.getLocal("idx2")),
                            ]
                        )
                    ),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),

                    c.br(0)
                )),

                c.if(
                    c.call(fPrefix + "_isOne", c.getLocal("mulFactor")),
                    [
                        // Do nothing (It should not be here)
                    ],
                    [
                        ...c.call(opGtimesF, c.getLocal("px") , c.getLocal("mulFactor"), c.getLocal("px")),
                        ...c.setLocal("idx2",
                            c.i32_add(
                                c.getLocal("px"),
                                c.i32_mul(
                                    c.getLocal("ndiv2"),
                                    c.i32_const(n8g)
                                )
                            )
                        ),
                        ...c.call(opGtimesF, c.getLocal("idx2"),c.getLocal("mulFactor"), c.getLocal("idx2"))
                    ]
                )
            );
        }

        function buildReversePermutation() {
            const f = module.addFunction(prefix+"__reversePermutation");
            f.addParam("px", "i32");
            f.addParam("bits", "i32");
            f.addLocal("n", "i32");
            f.addLocal("i", "i32");
            f.addLocal("ri", "i32");
            f.addLocal("idx1", "i32");
            f.addLocal("idx2", "i32");

            const c = f.getCodeBuilder();

            const T = c.i32_const(module.alloc(n8g));

            f.addCode(
                c.setLocal("n", c.i32_shl( c.i32_const(1), c.getLocal("bits"))),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("i"),
                            c.getLocal("n")
                        )
                    ),

                    c.setLocal("idx1",
                        c.i32_add(
                            c.getLocal("px"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.setLocal("ri", c.call(prefix + "__rev", c.getLocal("i"), c.getLocal("bits"))),

                    c.setLocal("idx2",
                        c.i32_add(
                            c.getLocal("px"),
                            c.i32_mul(
                                c.getLocal("ri"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.if(
                        c.i32_lt_u(
                            c.getLocal("i"),
                            c.getLocal("ri")
                        ),
                        [
                            ...c.call(gPrefix + "_copy", c.getLocal("idx1"), T),
                            ...c.call(gPrefix + "_copy", c.getLocal("idx2") , c.getLocal("idx1")),
                            ...c.call(gPrefix + "_copy", T , c.getLocal("idx2"))
                        ]
                    ),

                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),

                    c.br(0)
                ))
            );
        }

        function buildRev() {
            const f = module.addFunction(prefix+"__rev");
            f.addParam("x", "i32");
            f.addParam("bits", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.i32_rotl(
                    c.i32_add(
                        c.i32_add(
                            c.i32_shl(
                                c.i32_load8_u(
                                    c.i32_and(
                                        c.getLocal("x"),
                                        c.i32_const(0xFF)
                                    ),
                                    REVTABLE,
                                    0
                                ),
                                c.i32_const(24)
                            ),
                            c.i32_shl(
                                c.i32_load8_u(
                                    c.i32_and(
                                        c.i32_shr_u(
                                            c.getLocal("x"),
                                            c.i32_const(8)
                                        ),
                                        c.i32_const(0xFF)
                                    ),
                                    REVTABLE,
                                    0
                                ),
                                c.i32_const(16)
                            ),
                        ),
                        c.i32_add(
                            c.i32_shl(
                                c.i32_load8_u(
                                    c.i32_and(
                                        c.i32_shr_u(
                                            c.getLocal("x"),
                                            c.i32_const(16)
                                        ),
                                        c.i32_const(0xFF)
                                    ),
                                    REVTABLE,
                                    0
                                ),
                                c.i32_const(8)
                            ),
                            c.i32_load8_u(
                                c.i32_and(
                                    c.i32_shr_u(
                                        c.getLocal("x"),
                                        c.i32_const(24)
                                    ),
                                    c.i32_const(0xFF)
                                ),
                                REVTABLE,
                                0
                            ),
                        )
                    ),
                    c.getLocal("bits")
                )
            );
        }


        function buildFFTJoin() {
            const f = module.addFunction(prefix+"_fftJoin");
            f.addParam("pBuff1", "i32");
            f.addParam("pBuff2", "i32");
            f.addParam("n", "i32");
            f.addParam("first", "i32");
            f.addParam("inc", "i32");
            f.addLocal("idx1", "i32");
            f.addLocal("idx2", "i32");
            f.addLocal("i", "i32");

            const c = f.getCodeBuilder();

            const W = c.i32_const(module.alloc(n8f));
            const T = c.i32_const(module.alloc(n8g));
            const U = c.i32_const(module.alloc(n8g));

            f.addCode(
                c.call( fPrefix + "_copy", c.getLocal("first"), W),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("i"),
                            c.getLocal("n")
                        )
                    ),

                    c.setLocal(
                        "idx1",
                        c.i32_add(
                            c.getLocal("pBuff1"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.setLocal(
                        "idx2",
                        c.i32_add(
                            c.getLocal("pBuff2"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx2"),
                        W,
                        T
                    ),

                    c.call(
                        gPrefix + "_copy",
                        c.getLocal("idx1"),
                        U
                    ),

                    c.call(
                        gPrefix + "_add",
                        U,
                        T,
                        c.getLocal("idx1"),
                    ),

                    c.call(
                        gPrefix + "_sub",
                        U,
                        T,
                        c.getLocal("idx2"),
                    ),

                    c.call(
                        fPrefix + "_mul",
                        W,
                        c.getLocal("inc"),
                        W,
                    ),

                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );
        }


        function buildFFTJoinExt() {
            const f = module.addFunction(prefix+"_fftJoinExt");
            f.addParam("pBuff1", "i32");
            f.addParam("pBuff2", "i32");
            f.addParam("n", "i32");
            f.addParam("first", "i32");
            f.addParam("inc", "i32");
            f.addParam("totalBits", "i32");
            f.addLocal("idx1", "i32");
            f.addLocal("idx2", "i32");
            f.addLocal("i", "i32");
            f.addLocal("pShiftToM", "i32");

            const c = f.getCodeBuilder();

            const W = c.i32_const(module.alloc(n8f));
            const U = c.i32_const(module.alloc(n8g));

            f.addCode(

                c.setLocal("pShiftToM",
                    c.i32_add(
                        c.i32_const(SHIFT_TO_M),
                        c.i32_mul(
                            c.getLocal("totalBits"),
                            c.i32_const(n8f)
                        )
                    )
                ),


                c.call( fPrefix + "_copy", c.getLocal("first"), W),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("i"),
                            c.getLocal("n")
                        )
                    ),

                    c.setLocal(
                        "idx1",
                        c.i32_add(
                            c.getLocal("pBuff1"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.setLocal(
                        "idx2",
                        c.i32_add(
                            c.getLocal("pBuff2"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.call(
                        gPrefix + "_add",
                        c.getLocal("idx1"),
                        c.getLocal("idx2"),
                        U
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx2"),
                        c.getLocal("pShiftToM"),
                        c.getLocal("idx2")
                    ),

                    c.call(
                        gPrefix + "_add",
                        c.getLocal("idx1"),
                        c.getLocal("idx2"),
                        c.getLocal("idx2")
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx2"),
                        W,
                        c.getLocal("idx2"),
                    ),

                    c.call(
                        gPrefix + "_copy",
                        U,
                        c.getLocal("idx1")
                    ),

                    c.call(
                        fPrefix + "_mul",
                        W,
                        c.getLocal("inc"),
                        W
                    ),

                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );
        }

        function buildFFTJoinExtInv() {
            const f = module.addFunction(prefix+"_fftJoinExtInv");
            f.addParam("pBuff1", "i32");
            f.addParam("pBuff2", "i32");
            f.addParam("n", "i32");
            f.addParam("first", "i32");
            f.addParam("inc", "i32");
            f.addParam("totalBits", "i32");
            f.addLocal("idx1", "i32");
            f.addLocal("idx2", "i32");
            f.addLocal("i", "i32");
            f.addLocal("pShiftToM", "i32");
            f.addLocal("pSConst", "i32");

            const c = f.getCodeBuilder();

            const W = c.i32_const(module.alloc(n8f));
            const U = c.i32_const(module.alloc(n8g));

            f.addCode(

                c.setLocal("pShiftToM",
                    c.i32_add(
                        c.i32_const(SHIFT_TO_M),
                        c.i32_mul(
                            c.getLocal("totalBits"),
                            c.i32_const(n8f)
                        )
                    )
                ),
                c.setLocal("pSConst",
                    c.i32_add(
                        c.i32_const(SCONST),
                        c.i32_mul(
                            c.getLocal("totalBits"),
                            c.i32_const(n8f)
                        )
                    )
                ),


                c.call( fPrefix + "_copy", c.getLocal("first"), W),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("i"),
                            c.getLocal("n")
                        )
                    ),

                    c.setLocal(
                        "idx1",
                        c.i32_add(
                            c.getLocal("pBuff1"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.setLocal(
                        "idx2",
                        c.i32_add(
                            c.getLocal("pBuff2"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx2"),
                        W,
                        U
                    ),

                    c.call(
                        gPrefix + "_sub",
                        c.getLocal("idx1"),
                        U,
                        c.getLocal("idx2"),
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx2"),
                        c.getLocal("pSConst"),
                        c.getLocal("idx2")
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx1"),
                        c.getLocal("pShiftToM"),
                        c.getLocal("idx1")
                    ),

                    c.call(
                        gPrefix + "_sub",
                        U,
                        c.getLocal("idx1"),
                        c.getLocal("idx1")
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx1"),
                        c.getLocal("pSConst"),
                        c.getLocal("idx1")
                    ),

                    c.call(
                        fPrefix + "_mul",
                        W,
                        c.getLocal("inc"),
                        W
                    ),

                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );
        }



        function buildPrepareLagrangeEvaluation() {
            const f = module.addFunction(prefix+"_prepareLagrangeEvaluation");
            f.addParam("pBuff1", "i32");
            f.addParam("pBuff2", "i32");
            f.addParam("n", "i32");
            f.addParam("first", "i32");
            f.addParam("inc", "i32");
            f.addParam("totalBits", "i32");
            f.addLocal("idx1", "i32");
            f.addLocal("idx2", "i32");
            f.addLocal("i", "i32");
            f.addLocal("pShiftToM", "i32");
            f.addLocal("pSConst", "i32");

            const c = f.getCodeBuilder();

            const W = c.i32_const(module.alloc(n8f));
            const U = c.i32_const(module.alloc(n8g));

            f.addCode(

                c.setLocal("pShiftToM",
                    c.i32_add(
                        c.i32_const(SHIFT_TO_M),
                        c.i32_mul(
                            c.getLocal("totalBits"),
                            c.i32_const(n8f)
                        )
                    )
                ),
                c.setLocal("pSConst",
                    c.i32_add(
                        c.i32_const(SCONST),
                        c.i32_mul(
                            c.getLocal("totalBits"),
                            c.i32_const(n8f)
                        )
                    )
                ),


                c.call( fPrefix + "_copy", c.getLocal("first"), W),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("i"),
                            c.getLocal("n")
                        )
                    ),

                    c.setLocal(
                        "idx1",
                        c.i32_add(
                            c.getLocal("pBuff1"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.setLocal(
                        "idx2",
                        c.i32_add(
                            c.getLocal("pBuff2"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),


                    c.call(
                        opGtimesF,
                        c.getLocal("idx1"),
                        c.getLocal("pShiftToM"),
                        U
                    ),

                    c.call(
                        gPrefix + "_sub",
                        c.getLocal("idx2"),
                        U,
                        U
                    ),

                    c.call(
                        gPrefix + "_sub",
                        c.getLocal("idx1"),
                        c.getLocal("idx2"),
                        c.getLocal("idx2"),
                    ),

                    c.call(
                        opGtimesF,
                        U,
                        c.getLocal("pSConst"),
                        c.getLocal("idx1"),
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx2"),
                        W,
                        c.getLocal("idx2"),
                    ),

                    c.call(
                        fPrefix + "_mul",
                        W,
                        c.getLocal("inc"),
                        W
                    ),

                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );
        }

        function buildFFTMix() {
            const f = module.addFunction(prefix+"_fftMix");
            f.addParam("pBuff", "i32");
            f.addParam("n", "i32");
            f.addParam("exp", "i32");
            f.addLocal("nGroups", "i32");
            f.addLocal("nPerGroup", "i32");
            f.addLocal("nPerGroupDiv2", "i32");
            f.addLocal("pairOffset", "i32");
            f.addLocal("idx1", "i32");
            f.addLocal("idx2", "i32");
            f.addLocal("i", "i32");
            f.addLocal("j", "i32");
            f.addLocal("pwm", "i32");

            const c = f.getCodeBuilder();

            const W = c.i32_const(module.alloc(n8f));
            const T = c.i32_const(module.alloc(n8g));
            const U = c.i32_const(module.alloc(n8g));

            f.addCode(
                c.setLocal("nPerGroup", c.i32_shl(c.i32_const(1), c.getLocal("exp"))),
                c.setLocal("nPerGroupDiv2", c.i32_shr_u(c.getLocal("nPerGroup"), c.i32_const(1))),
                c.setLocal("nGroups", c.i32_shr_u(c.getLocal("n"), c.getLocal("exp"))),
                c.setLocal("pairOffset", c.i32_mul(c.getLocal("nPerGroupDiv2"), c.i32_const(n8g))),
                c.setLocal("pwm",
                    c.i32_add(
                        c.i32_const(ROOTs),
                        c.i32_mul(
                            c.getLocal("exp"),
                            c.i32_const(n8f)
                        )
                    )
                ),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("i"),
                            c.getLocal("nGroups")
                        )
                    ),
                    c.call( fPrefix + "_one", W),
                    c.setLocal("j", c.i32_const(0)),
                    c.block(c.loop(
                        c.br_if(
                            1,
                            c.i32_eq(
                                c.getLocal("j"),
                                c.getLocal("nPerGroupDiv2")
                            )
                        ),

                        c.setLocal(
                            "idx1",
                            c.i32_add(
                                c.getLocal("pBuff"),
                                c.i32_mul(
                                    c.i32_add(
                                        c.i32_mul(
                                            c.getLocal("i"),
                                            c.getLocal("nPerGroup")
                                        ),
                                        c.getLocal("j")
                                    ),
                                    c.i32_const(n8g)
                                )
                            )
                        ),

                        c.setLocal(
                            "idx2",
                            c.i32_add(
                                c.getLocal("idx1"),
                                c.getLocal("pairOffset")
                            )
                        ),

                        c.call(
                            opGtimesF,
                            c.getLocal("idx2"),
                            W,
                            T
                        ),

                        c.call(
                            gPrefix + "_copy",
                            c.getLocal("idx1"),
                            U
                        ),

                        c.call(
                            gPrefix + "_add",
                            U,
                            T,
                            c.getLocal("idx1"),
                        ),

                        c.call(
                            gPrefix + "_sub",
                            U,
                            T,
                            c.getLocal("idx2"),
                        ),

                        c.call(
                            fPrefix + "_mul",
                            W,
                            c.getLocal("pwm"),
                            W,
                        ),
                        c.setLocal("j", c.i32_add(c.getLocal("j"), c.i32_const(1))),
                        c.br(0)
                    )),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );
        }


        // Reverse all and multiply by factor
        function buildFFTFinal() {
            const f = module.addFunction(prefix+"_fftFinal");
            f.addParam("pBuff", "i32");
            f.addParam("n", "i32");
            f.addParam("factor", "i32");
            f.addLocal("idx1", "i32");
            f.addLocal("idx2", "i32");
            f.addLocal("i", "i32");
            f.addLocal("ndiv2", "i32");

            const c = f.getCodeBuilder();

            const T = c.i32_const(module.alloc(n8g));

            f.addCode(
                c.setLocal("ndiv2", c.i32_shr_u(c.getLocal("n"), c.i32_const(1))),
                c.if(
                    c.i32_and(
                        c.getLocal("n"),
                        c.i32_const(1)
                    ),
                    c.call(
                        opGtimesF,
                        c.i32_add(
                            c.getLocal("pBuff"),
                            c.i32_mul(
                                c.getLocal("ndiv2"),
                                c.i32_const(n8g)
                            )
                        ),
                        c.getLocal("factor"),
                        c.i32_add(
                            c.getLocal("pBuff"),
                            c.i32_mul(
                                c.getLocal("ndiv2"),
                                c.i32_const(n8g)
                            )
                        ),
                    ),
                ),
                c.setLocal("i", c.i32_const(0)),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_ge_u(
                            c.getLocal("i"),
                            c.getLocal("ndiv2")
                        )
                    ),

                    c.setLocal(
                        "idx1",
                        c.i32_add(
                            c.getLocal("pBuff"),
                            c.i32_mul(
                                c.getLocal("i"),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.setLocal(
                        "idx2",
                        c.i32_add(
                            c.getLocal("pBuff"),
                            c.i32_mul(
                                c.i32_sub(
                                    c.i32_sub(
                                        c.getLocal("n"),
                                        c.i32_const(1)
                                    ),
                                    c.getLocal("i")
                                ),
                                c.i32_const(n8g)
                            )
                        )
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx2"),
                        c.getLocal("factor"),
                        T
                    ),

                    c.call(
                        opGtimesF,
                        c.getLocal("idx1"),
                        c.getLocal("factor"),
                        c.getLocal("idx2"),
                    ),

                    c.call(
                        gPrefix + "_copy",
                        T,
                        c.getLocal("idx1"),
                    ),

                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );
        }

        buildRev();
        buildReversePermutation();
        buildFinalInverse();
        buildRawFFT();
        buildLog2();
        buildFFT();
        buildIFFT();
        buildFFTJoin();
        buildFFTJoinExt();
        buildFFTJoinExtInv();
        buildFFTMix();
        buildFFTFinal();
        buildPrepareLagrangeEvaluation();

        module.exportFunction(prefix+"_fft");
        module.exportFunction(prefix+"_ifft");
        module.exportFunction(prefix+"_rawfft");
        module.exportFunction(prefix+"_fftJoin");
        module.exportFunction(prefix+"_fftJoinExt");
        module.exportFunction(prefix+"_fftJoinExtInv");
        module.exportFunction(prefix+"_fftMix");
        module.exportFunction(prefix+"_fftFinal");
        module.exportFunction(prefix+"_prepareLagrangeEvaluation");

    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */
    var build_pol = function buildPol(module, prefix, prefixField) {

        const n64 = module.modules[prefixField].n64;
        const n8 = n64*8;


        function buildZero() {
            const f = module.addFunction(prefix+"_zero");
            f.addParam("px", "i32");
            f.addParam("n", "i32");
            f.addLocal("lastp", "i32");
            f.addLocal("p", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.setLocal("p", c.getLocal("px")),
                c.setLocal(
                    "lastp",
                    c.i32_add(
                        c.getLocal("px"),
                        c.i32_mul(
                            c.getLocal("n"),
                            c.i32_const(n8)
                        )
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("p"),
                            c.getLocal("lastp")
                        )
                    ),
                    c.call(prefixField + "_zero", c.getLocal("p")),
                    c.setLocal("p", c.i32_add(c.getLocal("p"), c.i32_const(n8))),
                    c.br(0)
                ))
            );
        }

        function buildConstructLC() {
            const f = module.addFunction(prefix+"_constructLC");
            f.addParam("ppolynomials", "i32");
            f.addParam("psignals", "i32");
            f.addParam("nSignals", "i32");
            f.addParam("pres", "i32");
            f.addLocal("i", "i32");
            f.addLocal("j", "i32");
            f.addLocal("pp", "i32");
            f.addLocal("ps", "i32");
            f.addLocal("pd", "i32");
            f.addLocal("ncoefs", "i32");

            const c = f.getCodeBuilder();

            const aux = c.i32_const(module.alloc(n8));

            f.addCode(
                c.setLocal("i", c.i32_const(0)),
                c.setLocal("pp", c.getLocal("ppolynomials")),
                c.setLocal("ps", c.getLocal("psignals")),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("i"),
                            c.getLocal("nSignals")
                        )
                    ),

                    c.setLocal("ncoefs", c.i32_load(c.getLocal("pp"))),
                    c.setLocal("pp", c.i32_add(c.getLocal("pp"), c.i32_const(4))),

                    c.setLocal("j", c.i32_const(0)),
                    c.block(c.loop(
                        c.br_if(
                            1,
                            c.i32_eq(
                                c.getLocal("j"),
                                c.getLocal("ncoefs")
                            )
                        ),

                        c.setLocal(
                            "pd",
                            c.i32_add(
                                c.getLocal("pres"),
                                c.i32_mul(
                                    c.i32_load(c.getLocal("pp")),
                                    c.i32_const(n8)
                                )
                            )
                        ),

                        c.setLocal("pp", c.i32_add(c.getLocal("pp"), c.i32_const(4))),


                        c.call(
                            prefixField + "_mul",
                            c.getLocal("ps"),
                            c.getLocal("pp"),
                            aux
                        ),

                        c.call(
                            prefixField + "_add",
                            aux,
                            c.getLocal("pd"),
                            c.getLocal("pd")
                        ),

                        c.setLocal("pp", c.i32_add(c.getLocal("pp"), c.i32_const(n8))),
                        c.setLocal("j", c.i32_add(c.getLocal("j"), c.i32_const(1))),
                        c.br(0)
                    )),

                    c.setLocal("ps", c.i32_add(c.getLocal("ps"), c.i32_const(n8))),
                    c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );

        }

        buildZero();
        buildConstructLC();


        module.exportFunction(prefix + "_zero");
        module.exportFunction(prefix + "_constructLC");

        return prefix;




    };

    var build_qap = function buildQAP(module, prefix, prefixField) {

        const n64 = module.modules[prefixField].n64;
        const n8 = n64*8;


        function buildBuildABC() {
            const f = module.addFunction(prefix+"_buildABC");
            f.addParam("pCoefs", "i32");
            f.addParam("nCoefs", "i32");
            f.addParam("pWitness", "i32");
            f.addParam("pA", "i32");
            f.addParam("pB", "i32");
            f.addParam("pC", "i32");
            f.addParam("offsetOut", "i32");
            f.addParam("nOut", "i32");
            f.addParam("offsetWitness", "i32");
            f.addParam("nWitness", "i32");
            f.addLocal("it", "i32");
            f.addLocal("ita", "i32");
            f.addLocal("itb", "i32");
            f.addLocal("last", "i32");
            f.addLocal("m", "i32");
            f.addLocal("c", "i32");
            f.addLocal("s", "i32");
            f.addLocal("pOut", "i32");

            const c = f.getCodeBuilder();

            const aux = c.i32_const(module.alloc(n8));

            f.addCode(

                // Set output a and b to 0
                c.setLocal("ita", c.getLocal("pA")),
                c.setLocal("itb", c.getLocal("pB")),
                c.setLocal(
                    "last",
                    c.i32_add(
                        c.getLocal("pA"),
                        c.i32_mul(
                            c.getLocal("nOut"),
                            c.i32_const(n8)
                        )
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("ita"),
                            c.getLocal("last")
                        )
                    ),
                    c.call(prefixField + "_zero", c.getLocal("ita")),
                    c.call(prefixField + "_zero", c.getLocal("itb")),
                    c.setLocal("ita", c.i32_add(c.getLocal("ita"), c.i32_const(n8))),
                    c.setLocal("itb", c.i32_add(c.getLocal("itb"), c.i32_const(n8))),
                    c.br(0)
                )),


                c.setLocal("it", c.getLocal("pCoefs")),
                c.setLocal(
                    "last",
                    c.i32_add(
                        c.getLocal("pCoefs"),
                        c.i32_mul(
                            c.getLocal("nCoefs"),
                            c.i32_const(n8+12)
                        )
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("it"),
                            c.getLocal("last")
                        )
                    ),
                    c.setLocal(
                        "s",
                        c.i32_load(c.getLocal("it"), 8)
                    ),
                    c.if(
                        c.i32_or(
                            c.i32_lt_u(
                                c.getLocal("s"),
                                c.getLocal("offsetWitness"),
                            ),
                            c.i32_ge_u(
                                c.getLocal("s"),
                                c.i32_add(
                                    c.getLocal("offsetWitness"),
                                    c.getLocal("nWitness"),
                                )
                            )
                        ),
                        [
                            ...c.setLocal("it", c.i32_add(c.getLocal("it"), c.i32_const(n8+12))),
                            ...c.br(1)
                        ]
                    ),

                    c.setLocal(
                        "m",
                        c.i32_load(c.getLocal("it"))
                    ),
                    c.if(
                        c.i32_eq(c.getLocal("m"), c.i32_const(0)),
                        c.setLocal("pOut", c.getLocal("pA")),
                        c.if(
                            c.i32_eq(c.getLocal("m"), c.i32_const(1)),
                            c.setLocal("pOut", c.getLocal("pB")),
                            [
                                ...c.setLocal("it", c.i32_add(c.getLocal("it"), c.i32_const(n8+12))),
                                ...c.br(1)
                            ]
                        )
                    ),
                    c.setLocal(
                        "c",
                        c.i32_load(c.getLocal("it"), 4)
                    ),
                    c.if(
                        c.i32_or(
                            c.i32_lt_u(
                                c.getLocal("c"),
                                c.getLocal("offsetOut"),
                            ),
                            c.i32_ge_u(
                                c.getLocal("c"),
                                c.i32_add(
                                    c.getLocal("offsetOut"),
                                    c.getLocal("nOut"),
                                )
                            )
                        ),
                        [
                            ...c.setLocal("it", c.i32_add(c.getLocal("it"), c.i32_const(n8+12))),
                            ...c.br(1)
                        ]
                    ),
                    c.setLocal(
                        "pOut",
                        c.i32_add(
                            c.getLocal("pOut"),
                            c.i32_mul(
                                c.i32_sub(
                                    c.getLocal("c"),
                                    c.getLocal("offsetOut")
                                ),
                                c.i32_const(n8)
                            )
                        )
                    ),
                    c.call(
                        prefixField + "_mul",
                        c.i32_add(
                            c.getLocal("pWitness"),
                            c.i32_mul(
                                c.i32_sub(c.getLocal("s"), c.getLocal("offsetWitness")),
                                c.i32_const(n8)
                            )
                        ),
                        c.i32_add( c.getLocal("it"), c.i32_const(12)),
                        aux
                    ),
                    c.call(
                        prefixField + "_add",
                        c.getLocal("pOut"),
                        aux,
                        c.getLocal("pOut"),
                    ),
                    c.setLocal("it", c.i32_add(c.getLocal("it"), c.i32_const(n8+12))),
                    c.br(0)
                )),

                c.setLocal("ita", c.getLocal("pA")),
                c.setLocal("itb", c.getLocal("pB")),
                c.setLocal("it", c.getLocal("pC")),
                c.setLocal(
                    "last",
                    c.i32_add(
                        c.getLocal("pA"),
                        c.i32_mul(
                            c.getLocal("nOut"),
                            c.i32_const(n8)
                        )
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("ita"),
                            c.getLocal("last")
                        )
                    ),
                    c.call(
                        prefixField + "_mul",
                        c.getLocal("ita"),
                        c.getLocal("itb"),
                        c.getLocal("it")
                    ),
                    c.setLocal("ita", c.i32_add(c.getLocal("ita"), c.i32_const(n8))),
                    c.setLocal("itb", c.i32_add(c.getLocal("itb"), c.i32_const(n8))),
                    c.setLocal("it", c.i32_add(c.getLocal("it"), c.i32_const(n8))),
                    c.br(0)
                )),

            );
        }

        function buildJoinABC() {
            const f = module.addFunction(prefix+"_joinABC");
            f.addParam("pA", "i32");
            f.addParam("pB", "i32");
            f.addParam("pC", "i32");
            f.addParam("n", "i32");
            f.addParam("pP", "i32");
            f.addLocal("ita", "i32");
            f.addLocal("itb", "i32");
            f.addLocal("itc", "i32");
            f.addLocal("itp", "i32");
            f.addLocal("last", "i32");

            const c = f.getCodeBuilder();

            const aux = c.i32_const(module.alloc(n8));

            f.addCode(
                c.setLocal("ita", c.getLocal("pA")),
                c.setLocal("itb", c.getLocal("pB")),
                c.setLocal("itc", c.getLocal("pC")),
                c.setLocal("itp", c.getLocal("pP")),
                c.setLocal(
                    "last",
                    c.i32_add(
                        c.getLocal("pA"),
                        c.i32_mul(
                            c.getLocal("n"),
                            c.i32_const(n8)
                        )
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("ita"),
                            c.getLocal("last")
                        )
                    ),
                    c.call(
                        prefixField + "_mul",
                        c.getLocal("ita"),
                        c.getLocal("itb"),
                        aux
                    ),
                    c.call(
                        prefixField + "_sub",
                        aux,
                        c.getLocal("itc"),
                        c.getLocal("itp"),
                    ),
                    c.setLocal("ita", c.i32_add(c.getLocal("ita"), c.i32_const(n8))),
                    c.setLocal("itb", c.i32_add(c.getLocal("itb"), c.i32_const(n8))),
                    c.setLocal("itc", c.i32_add(c.getLocal("itc"), c.i32_const(n8))),
                    c.setLocal("itp", c.i32_add(c.getLocal("itp"), c.i32_const(n8))),
                    c.br(0)
                ))
            );
        }

        function buildBatchAdd() {
            const f = module.addFunction(prefix+"_batchAdd");
            f.addParam("pa", "i32");
            f.addParam("pb", "i32");
            f.addParam("n", "i32");
            f.addParam("pr", "i32");
            f.addLocal("ita", "i32");
            f.addLocal("itb", "i32");
            f.addLocal("itr", "i32");
            f.addLocal("last", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.setLocal("ita", c.getLocal("pa")),
                c.setLocal("itb", c.getLocal("pb")),
                c.setLocal("itr", c.getLocal("pr")),
                c.setLocal(
                    "last",
                    c.i32_add(
                        c.getLocal("pa"),
                        c.i32_mul(
                            c.getLocal("n"),
                            c.i32_const(n8)
                        )
                    )
                ),
                c.block(c.loop(
                    c.br_if(
                        1,
                        c.i32_eq(
                            c.getLocal("ita"),
                            c.getLocal("last")
                        )
                    ),
                    c.call(
                        prefixField + "_add",
                        c.getLocal("ita"),
                        c.getLocal("itb"),
                        c.getLocal("itr"),
                    ),
                    c.setLocal("ita", c.i32_add(c.getLocal("ita"), c.i32_const(n8))),
                    c.setLocal("itb", c.i32_add(c.getLocal("itb"), c.i32_const(n8))),
                    c.setLocal("itr", c.i32_add(c.getLocal("itr"), c.i32_const(n8))),
                    c.br(0)
                ))
            );
        }

        buildBuildABC();
        buildJoinABC();
        buildBatchAdd();

        module.exportFunction(prefix + "_buildABC");
        module.exportFunction(prefix + "_joinABC");
        module.exportFunction(prefix + "_batchAdd");

        return prefix;

    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    var build_applykey = function buildApplyKey(module, fnName, gPrefix, frPrefix, sizeGIn, sizeGOut, sizeF, opGtimesF) {

        const f = module.addFunction(fnName);
        f.addParam("pIn", "i32");
        f.addParam("n", "i32");
        f.addParam("pFirst", "i32");
        f.addParam("pInc", "i32");
        f.addParam("pOut", "i32");
        f.addLocal("pOldFree", "i32");
        f.addLocal("i", "i32");
        f.addLocal("pFrom", "i32");
        f.addLocal("pTo", "i32");

        const c = f.getCodeBuilder();

        const t = c.i32_const(module.alloc(sizeF));

        f.addCode(
            c.setLocal("pFrom", c.getLocal("pIn")),
            c.setLocal("pTo", c.getLocal("pOut")),
        );

        // t = first
        f.addCode(
            c.call(
                frPrefix + "_copy",
                c.getLocal("pFirst"),
                t
            )
        );
        f.addCode(
            c.setLocal("i", c.i32_const(0)),
            c.block(c.loop(
                c.br_if(1, c.i32_eq ( c.getLocal("i"), c.getLocal("n") )),

                c.call(
                    opGtimesF,
                    c.getLocal("pFrom"),
                    t,
                    c.getLocal("pTo")
                ),
                c.setLocal("pFrom", c.i32_add(c.getLocal("pFrom"), c.i32_const(sizeGIn))),
                c.setLocal("pTo", c.i32_add(c.getLocal("pTo"), c.i32_const(sizeGOut))),

                // t = t* inc
                c.call(
                    frPrefix + "_mul",
                    t,
                    c.getLocal("pInc"),
                    t
                ),
                c.setLocal("i", c.i32_add(c.getLocal("i"), c.i32_const(1))),
                c.br(0)
            ))
        );

        module.exportFunction(fnName);

    };

    var build_bn128 = function buildBN128(module, _prefix) {

        const prefix = _prefix || "bn128";

        if (module.modules[prefix]) return prefix;  // already builded

        const q = BigInteger("21888242871839275222246405745257275088696311157297823662689037894645226208583");
        const r = BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617");


        const n64 = Math.floor((q.minus(1).bitLength() - 1)/64) +1;
        const n8 = n64*8;
        const frsize = n8;
        const f1size = n8;
        const f2size = f1size * 2;
        const ftsize = f1size * 12;

        const pr = module.alloc(utils$3.bigInt2BytesLE( r, frsize ));

        const f1mPrefix = build_f1m(module, q, "f1m");
        build_f1(module, r, "fr", "frm");

        const pG1b = module.alloc(utils$3.bigInt2BytesLE( toMontgomery(BigInteger(3)), f1size ));
        const g1mPrefix = build_curve_jacobian_a0(module, "g1m", "f1m", pG1b);

        build_fft(module, "frm", "frm", "frm", "frm_mul");

        build_pol(module, "pol", "frm");
        build_qap(module, "qap", "frm");

        const f2mPrefix = build_f2m(module, "f1m_neg", "f2m", "f1m");
        const pG2b = module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery(BigInteger("19485874751759354771024239261021720505790618469301721065564631296452457478373")), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(BigInteger("266929791119991161246907387137283842545076965332900288569378510910307636690")), f1size )
        ]);
        const g2mPrefix = build_curve_jacobian_a0(module, "g2m", "f2m", pG2b);


        function buildGTimesFr(fnName, opMul) {
            const f = module.addFunction(fnName);
            f.addParam("pG", "i32");
            f.addParam("pFr", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8));

            f.addCode(
                c.call("frm_fromMontgomery", c.getLocal("pFr"), AUX),
                c.call(
                    opMul,
                    c.getLocal("pG"),
                    AUX,
                    c.i32_const(n8),
                    c.getLocal("pr")
                )
            );

            module.exportFunction(fnName);
        }
        buildGTimesFr("g1m_timesFr", "g1m_timesScalar");
        build_fft(module, "g1m", "g1m", "frm", "g1m_timesFr");

        buildGTimesFr("g2m_timesFr", "g2m_timesScalar");
        build_fft(module, "g2m", "g2m", "frm", "g2m_timesFr");

        buildGTimesFr("g1m_timesFrAffine", "g1m_timesScalarAffine");
        buildGTimesFr("g2m_timesFrAffine", "g2m_timesScalarAffine");

        build_applykey(module, "frm_batchApplyKey", "fmr", "frm", n8, n8, n8, "frm_mul");
        build_applykey(module, "g1m_batchApplyKey", "g1m", "frm", n8*3, n8*3, n8, "g1m_timesFr");
        build_applykey(module, "g1m_batchApplyKeyMixed", "g1m", "frm", n8*2, n8*3, n8, "g1m_timesFrAffine");
        build_applykey(module, "g2m_batchApplyKey", "g2m", "frm", n8*2*3, n8*3*2, n8, "g2m_timesFr");
        build_applykey(module, "g2m_batchApplyKeyMixed", "g2m", "frm", n8*2*2, n8*3*2, n8, "g2m_timesFrAffine");

        function toMontgomery(a) {
            return BigInteger(a).times( BigInteger.one.shiftLeft(f1size*8)).mod(q);
        }

        const G1gen = [
            BigInteger("1"),
            BigInteger("2"),
            BigInteger.one
        ];

        const pG1gen = module.alloc(
            [
                ...utils$3.bigInt2BytesLE( toMontgomery(G1gen[0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G1gen[1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G1gen[2]), f1size ),
            ]
        );

        const G1zero = [
            BigInteger.zero,
            BigInteger.one,
            BigInteger.zero
        ];

        const pG1zero = module.alloc(
            [
                ...utils$3.bigInt2BytesLE( toMontgomery(G1zero[0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G1zero[1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G1zero[2]), f1size )
            ]
        );

        const G2gen = [
            [
                BigInteger("10857046999023057135944570762232829481370756359578518086990519993285655852781"),
                BigInteger("11559732032986387107991004021392285783925812861821192530917403151452391805634"),
            ],[
                BigInteger("8495653923123431417604973247489272438418190587263600148770280649306958101930"),
                BigInteger("4082367875863433681332203403145435568316851327593401208105741076214120093531"),
            ],[
                BigInteger.one,
                BigInteger.zero,
            ]
        ];

        const pG2gen = module.alloc(
            [
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[0][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[0][1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[1][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[1][1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[2][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[2][1]), f1size ),
            ]
        );

        const G2zero = [
            [
                BigInteger.zero,
                BigInteger.zero,
            ],[
                BigInteger.one,
                BigInteger.zero,
            ],[
                BigInteger.zero,
                BigInteger.zero,
            ]
        ];

        const pG2zero = module.alloc(
            [
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[0][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[0][1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[1][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[1][1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[2][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[2][1]), f1size ),
            ]
        );

        const pOneT = module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery(1), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
        ]);

        const pNonResidueF6 = module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery(9), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(1), f1size ),
        ]);

        const pTwoInv = module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery(  BigInteger(2).modInv(q)), f1size ),
            ...utils$3.bigInt2BytesLE( BigInteger(0), f1size )
        ]);

        const pAltBn128Twist = pNonResidueF6;

        const pTwistCoefB = module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery("19485874751759354771024239261021720505790618469301721065564631296452457478373"), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery("266929791119991161246907387137283842545076965332900288569378510910307636690"), f1size ),
        ]);

        function build_mulNR6() {
            const f = module.addFunction(prefix + "_mulNR6");
            f.addParam("x", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.call(
                    f2mPrefix + "_mul",
                    c.i32_const(pNonResidueF6),
                    c.getLocal("x"),
                    c.getLocal("pr")
                )
            );
        }
        build_mulNR6();

        const f6mPrefix = build_f3m(module, prefix+"_mulNR6", "f6m", "f2m");

        function build_mulNR12() {
            const f = module.addFunction(prefix + "_mulNR12");
            f.addParam("x", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.call(
                    f2mPrefix + "_mul",
                    c.i32_const(pNonResidueF6),
                    c.i32_add(c.getLocal("x"), c.i32_const(n8*4)),
                    c.getLocal("pr")
                ),
                c.call(
                    f2mPrefix + "_copy",
                    c.getLocal("x"),
                    c.i32_add(c.getLocal("pr"), c.i32_const(n8*2)),
                ),
                c.call(
                    f2mPrefix + "_copy",
                    c.i32_add(c.getLocal("x"), c.i32_const(n8*2)),
                    c.i32_add(c.getLocal("pr"), c.i32_const(n8*4)),
                )
            );
        }
        build_mulNR12();

        const ftmPrefix = build_f2m(module, prefix+"_mulNR12", "ftm", f6mPrefix);


        const ateLoopCount = BigInteger("29793968203157093288");
        const ateLoopBitBytes = bits(ateLoopCount);
        const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);

        const ateCoefSize = 3 * f2size;
        const ateNDblCoefs = ateLoopBitBytes.length-1;
        const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b) =>  acc + ( b!=0 ? 1 : 0)   ,0);
        const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;
        const prePSize = 3*2*n8;
        const preQSize = 3*n8*2 + ateNCoefs*ateCoefSize;


        module.modules[prefix] = {
            n64: n64,
            pG1gen: pG1gen,
            pG1zero: pG1zero,
            pG1b: pG1b,
            pG2gen: pG2gen,
            pG2zero: pG2zero,
            pG2b: pG2b,
            pq: module.modules["f1m"].pq,
            pr: pr,
            pOneT: pOneT,
            prePSize: prePSize,
            preQSize: preQSize,
            r: r.toString(),
            q: q.toString()
        };

        // console.log("PrePSize: " +prePSize);
        // console.log("PreQSize: " +preQSize);

        const finalExpZ = BigInteger("4965661367192848881");

        function naf(n) {
            let E = n;
            const res = [];
            while (E.gt(BigInteger.zero)) {
                if (E.isOdd()) {
                    const z = 2 - E.mod(4).toJSNumber();
                    res.push( z );
                    E = E.minus(z);
                } else {
                    res.push( 0 );
                }
                E = E.shiftRight(1);
            }
            return res;
        }

        function bits(n) {
            let E = n;
            const res = [];
            while (E.gt(BigInteger.zero)) {
                if (E.isOdd()) {
                    res.push( 1 );
                } else {
                    res.push( 0 );
                }
                E = E.shiftRight(1);
            }
            return res;
        }

        function buildPrepareG1() {
            const f = module.addFunction(prefix+ "_prepareG1");
            f.addParam("pP", "i32");
            f.addParam("ppreP", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.call(g1mPrefix + "_normalize", c.getLocal("pP"), c.getLocal("ppreP")),  // TODO Remove if already in affine
            );
        }

        function buildPrepAddStep() {
            const f = module.addFunction(prefix+ "_prepAddStep");
            f.addParam("pQ", "i32");
            f.addParam("pR", "i32");
            f.addParam("pCoef", "i32");

            const c = f.getCodeBuilder();

            const X2  = c.getLocal("pQ");
            const Y2  = c.i32_add(c.getLocal("pQ"), c.i32_const(f2size));

            const X1  = c.getLocal("pR");
            const Y1  = c.i32_add(c.getLocal("pR"), c.i32_const(f2size));
            const Z1  = c.i32_add(c.getLocal("pR"), c.i32_const(2*f2size));

            const ELL_0  = c.getLocal("pCoef");
            const ELL_VW = c.i32_add(c.getLocal("pCoef"), c.i32_const(f2size));
            const ELL_VV  = c.i32_add(c.getLocal("pCoef"), c.i32_const(2*f2size));

            const D = ELL_VW;
            const E = c.i32_const(module.alloc(f2size));
            const F = c.i32_const(module.alloc(f2size));
            const G = c.i32_const(module.alloc(f2size));
            const H = c.i32_const(module.alloc(f2size));
            const I = c.i32_const(module.alloc(f2size));
            const J = c.i32_const(module.alloc(f2size));
            const AUX = c.i32_const(module.alloc(f2size));

            f.addCode(
                // D = X1 - X2*Z1
                c.call(f2mPrefix + "_mul", X2, Z1, D),
                c.call(f2mPrefix + "_sub", X1, D, D),

                // E = Y1 - Y2*Z1
                c.call(f2mPrefix + "_mul", Y2, Z1, E),
                c.call(f2mPrefix + "_sub", Y1, E, E),

                // F = D^2
                c.call(f2mPrefix + "_square", D, F),

                // G = E^2
                c.call(f2mPrefix + "_square", E, G),

                // H = D*F
                c.call(f2mPrefix + "_mul", D, F, H),

                // I = X1 * F
                c.call(f2mPrefix + "_mul", X1, F, I),

                // J = H + Z1*G - (I+I)
                c.call(f2mPrefix + "_add", I, I, AUX),
                c.call(f2mPrefix + "_mul", Z1, G, J),
                c.call(f2mPrefix + "_add", H, J, J),
                c.call(f2mPrefix + "_sub", J, AUX, J),


                // X3 (X1) = D*J
                c.call(f2mPrefix + "_mul", D, J, X1),

                // Y3 (Y1) = E*(I-J)-(H*Y1)
                c.call(f2mPrefix + "_mul", H, Y1, Y1),
                c.call(f2mPrefix + "_sub", I, J, AUX),
                c.call(f2mPrefix + "_mul", E, AUX, AUX),
                c.call(f2mPrefix + "_sub", AUX, Y1, Y1),

                // Z3 (Z1) = Z1*H
                c.call(f2mPrefix + "_mul", Z1, H, Z1),

                // ell_0 = xi * (E * X2 - D * Y2)
                c.call(f2mPrefix + "_mul", D, Y2, AUX),
                c.call(f2mPrefix + "_mul", E, X2, ELL_0),
                c.call(f2mPrefix + "_sub", ELL_0, AUX, ELL_0),
                c.call(f2mPrefix + "_mul", ELL_0, c.i32_const(pAltBn128Twist), ELL_0),


                // ell_VV = - E (later: * xP)
                c.call(f2mPrefix + "_neg", E, ELL_VV),

                // ell_VW = D (later: * yP    )
                // Already assigned

            );
        }



        function buildPrepDoubleStep() {
            const f = module.addFunction(prefix+ "_prepDblStep");
            f.addParam("pR", "i32");
            f.addParam("pCoef", "i32");

            const c = f.getCodeBuilder();

            const X1  = c.getLocal("pR");
            const Y1  = c.i32_add(c.getLocal("pR"), c.i32_const(f2size));
            const Z1  = c.i32_add(c.getLocal("pR"), c.i32_const(2*f2size));

            const ELL_0  = c.getLocal("pCoef");
            const ELL_VW = c.i32_add(c.getLocal("pCoef"), c.i32_const(f2size));
            const ELL_VV  = c.i32_add(c.getLocal("pCoef"), c.i32_const(2*f2size));

            const A = c.i32_const(module.alloc(f2size));
            const B = c.i32_const(module.alloc(f2size));
            const C = c.i32_const(module.alloc(f2size));
            const D = c.i32_const(module.alloc(f2size));
            const E = c.i32_const(module.alloc(f2size));
            const F = c.i32_const(module.alloc(f2size));
            const G = c.i32_const(module.alloc(f2size));
            const H = c.i32_const(module.alloc(f2size));
            const I = c.i32_const(module.alloc(f2size));
            const J = c.i32_const(module.alloc(f2size));
            const E2 = c.i32_const(module.alloc(f2size));
            const AUX = c.i32_const(module.alloc(f2size));

            f.addCode(

                // A = X1 * Y1 / 2
                c.call(f2mPrefix + "_mul", Y1, c.i32_const(pTwoInv), A),
                c.call(f2mPrefix + "_mul", X1, A, A),

                // B = Y1^2
                c.call(f2mPrefix + "_square", Y1, B),

                // C = Z1^2
                c.call(f2mPrefix + "_square", Z1, C),

                // D = 3 * C
                c.call(f2mPrefix + "_add", C, C, D),
                c.call(f2mPrefix + "_add", D, C, D),

                // E = twist_b * D
                c.call(f2mPrefix + "_mul", c.i32_const(pTwistCoefB), D, E),

                // F = 3 * E
                c.call(f2mPrefix + "_add", E, E, F),
                c.call(f2mPrefix + "_add", E, F, F),

                // G = (B+F)/2
                c.call(f2mPrefix + "_add", B, F, G),
                c.call(f2mPrefix + "_mul", G, c.i32_const(pTwoInv), G),

                // H = (Y1+Z1)^2-(B+C)
                c.call(f2mPrefix + "_add", B, C, AUX),
                c.call(f2mPrefix + "_add", Y1, Z1, H),
                c.call(f2mPrefix + "_square", H, H),
                c.call(f2mPrefix + "_sub", H, AUX, H),

                // I = E-B
                c.call(f2mPrefix + "_sub", E, B, I),

                // J = X1^2
                c.call(f2mPrefix + "_square", X1, J),

                // E_squared = E^2
                c.call(f2mPrefix + "_square", E, E2),

                // X3 (X1) = A * (B-F)
                c.call(f2mPrefix + "_sub", B, F, AUX),
                c.call(f2mPrefix + "_mul", A, AUX, X1),

                // Y3 (Y1) = G^2 - 3*E^2
                c.call(f2mPrefix + "_add", E2, E2, AUX),
                c.call(f2mPrefix + "_add", E2, AUX, AUX),
                c.call(f2mPrefix + "_square", G, Y1),
                c.call(f2mPrefix + "_sub", Y1, AUX, Y1),

                // Z3 (Z1) = B * H
                c.call(f2mPrefix + "_mul", B, H, Z1),

                // ell_0 = xi * I
                c.call(f2mPrefix + "_mul", c.i32_const(pAltBn128Twist), I, ELL_0),

                // ell_VW = - H (later: * yP)
                c.call(f2mPrefix + "_neg", H, ELL_VW),

                // ell_VV = 3*J (later: * xP)
                c.call(f2mPrefix + "_add", J, J, ELL_VV),
                c.call(f2mPrefix + "_add", J, ELL_VV, ELL_VV),

            );
        }

        function buildMulByQ() {
            const f = module.addFunction(prefix + "_mulByQ");
            f.addParam("p1", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("p1");
            const y = c.i32_add(c.getLocal("p1"), c.i32_const(f2size));
            const z = c.i32_add(c.getLocal("p1"), c.i32_const(f2size*2));
            const x3 = c.getLocal("pr");
            const y3 = c.i32_add(c.getLocal("pr"), c.i32_const(f2size));
            const z3 = c.i32_add(c.getLocal("pr"), c.i32_const(f2size*2));

            const MulByQX = c.i32_const(module.alloc([
                ...utils$3.bigInt2BytesLE( toMontgomery("21575463638280843010398324269430826099269044274347216827212613867836435027261"), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery("10307601595873709700152284273816112264069230130616436755625194854815875713954"), f1size ),
            ]));

            const MulByQY = c.i32_const(module.alloc([
                ...utils$3.bigInt2BytesLE( toMontgomery("2821565182194536844548159561693502659359617185244120367078079554186484126554"), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery("3505843767911556378687030309984248845540243509899259641013678093033130930403"), f1size ),
            ]));

            f.addCode(
                // The frobeniusMap(1) in this field, is the conjugate
                c.call(f2mPrefix + "_conjugate", x, x3),
                c.call(f2mPrefix + "_mul", MulByQX, x3, x3),
                c.call(f2mPrefix + "_conjugate", y, y3),
                c.call(f2mPrefix + "_mul", MulByQY, y3, y3),
                c.call(f2mPrefix + "_conjugate", z, z3),
            );
        }


        function buildPrepareG2() {
            buildMulByQ();
            const f = module.addFunction(prefix+ "_prepareG2");
            f.addParam("pQ", "i32");
            f.addParam("ppreQ", "i32");
            f.addLocal("pCoef", "i32");
            f.addLocal("i", "i32");

            const c = f.getCodeBuilder();

            const QX = c.getLocal("pQ");
            c.i32_add( c.getLocal("pQ"), c.i32_const(f2size));
            c.i32_add( c.getLocal("pQ"), c.i32_const(f2size*2));

            const pR = module.alloc(f2size*3);
            const R = c.i32_const(pR);
            const RX = c.i32_const(pR);
            const RY = c.i32_const(pR+f2size);
            const RZ = c.i32_const(pR+2*f2size);

            const cQX = c.i32_add( c.getLocal("ppreQ"), c.i32_const(0));
            const cQY = c.i32_add( c.getLocal("ppreQ"), c.i32_const(f2size));
            c.i32_add( c.getLocal("ppreQ"), c.i32_const(f2size*2));

            const pQ1 = module.alloc(f2size*3);
            const Q1 = c.i32_const(pQ1);

            const pQ2 = module.alloc(f2size*3);
            const Q2 = c.i32_const(pQ2);
            c.i32_const(pQ2);
            const Q2Y = c.i32_const(pQ2 + f2size);
            c.i32_const(pQ2 + f2size*2);

            f.addCode(
                c.call(g2mPrefix + "_normalize", QX, cQX),  // TODO Remove if already in affine
                c.call(f2mPrefix + "_copy", cQX, RX),
                c.call(f2mPrefix + "_copy", cQY, RY),
                c.call(f2mPrefix + "_one", RZ),
            );

            f.addCode(
                c.setLocal("pCoef", c.i32_add( c.getLocal("ppreQ"), c.i32_const(f2size*3))),
                c.setLocal("i", c.i32_const(ateLoopBitBytes.length-2)),
                c.block(c.loop(

                    c.call(prefix + "_prepDblStep", R, c.getLocal("pCoef")),
                    c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),

                    c.if(
                        c.i32_load8_s(c.getLocal("i"), pAteLoopBitBytes),
                        [
                            ...c.call(prefix + "_prepAddStep", cQX, R, c.getLocal("pCoef")),
                            ...c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),
                        ]
                    ),
                    c.br_if(1, c.i32_eqz ( c.getLocal("i") )),
                    c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );

            f.addCode(
                c.call(prefix + "_mulByQ", cQX, Q1),
                c.call(prefix + "_mulByQ", Q1, Q2)
            );

            f.addCode(
                c.call(f2mPrefix + "_neg", Q2Y, Q2Y),

                c.call(prefix + "_prepAddStep", Q1, R, c.getLocal("pCoef")),
                c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),

                c.call(prefix + "_prepAddStep", Q2, R, c.getLocal("pCoef")),
                c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),
            );
        }

        function buildMulBy024Old() {
            const f = module.addFunction(prefix+ "__mulBy024Old");
            f.addParam("pEll0", "i32");
            f.addParam("pEllVW", "i32");
            f.addParam("pEllVV", "i32");
            f.addParam("pR", "i32");            // Result in F12

            const c = f.getCodeBuilder();

            const x0  = c.getLocal("pEll0");
            const x2  = c.getLocal("pEllVV");
            const x4  = c.getLocal("pEllVW");

            const z0  = c.getLocal("pR");

            const pAUX12 = module.alloc(ftsize);
            const AUX12 = c.i32_const(pAUX12);
            const AUX12_0 = c.i32_const(pAUX12);
            const AUX12_2 = c.i32_const(pAUX12+f2size);
            const AUX12_4 = c.i32_const(pAUX12+f2size*2);
            const AUX12_6 = c.i32_const(pAUX12+f2size*3);
            const AUX12_8 = c.i32_const(pAUX12+f2size*4);
            const AUX12_10 = c.i32_const(pAUX12+f2size*5);

            f.addCode(

                c.call(f2mPrefix + "_copy", x0, AUX12_0),
                c.call(f2mPrefix + "_zero", AUX12_2),
                c.call(f2mPrefix + "_copy", x2, AUX12_4),
                c.call(f2mPrefix + "_zero", AUX12_6),
                c.call(f2mPrefix + "_copy", x4, AUX12_8),
                c.call(f2mPrefix + "_zero", AUX12_10),
                c.call(ftmPrefix + "_mul", AUX12, z0, z0),
            );
        }

        function buildMulBy024() {
            const f = module.addFunction(prefix+ "__mulBy024");
            f.addParam("pEll0", "i32");
            f.addParam("pEllVW", "i32");
            f.addParam("pEllVV", "i32");
            f.addParam("pR", "i32");            // Result in F12

            const c = f.getCodeBuilder();

            const x0  = c.getLocal("pEll0");
            const x2  = c.getLocal("pEllVV");
            const x4  = c.getLocal("pEllVW");

            const z0  = c.getLocal("pR");
            const z1  = c.i32_add(c.getLocal("pR"), c.i32_const(2*n8));
            const z2  = c.i32_add(c.getLocal("pR"), c.i32_const(4*n8));
            const z3  = c.i32_add(c.getLocal("pR"), c.i32_const(6*n8));
            const z4  = c.i32_add(c.getLocal("pR"), c.i32_const(8*n8));
            const z5  = c.i32_add(c.getLocal("pR"), c.i32_const(10*n8));

            const t0 = c.i32_const(module.alloc(f2size));
            const t1 = c.i32_const(module.alloc(f2size));
            const t2 = c.i32_const(module.alloc(f2size));
            const s0 = c.i32_const(module.alloc(f2size));
            const T3 = c.i32_const(module.alloc(f2size));
            const T4 = c.i32_const(module.alloc(f2size));
            const D0 = c.i32_const(module.alloc(f2size));
            const D2 = c.i32_const(module.alloc(f2size));
            const D4 = c.i32_const(module.alloc(f2size));
            const S1 = c.i32_const(module.alloc(f2size));
            const AUX = c.i32_const(module.alloc(f2size));

            f.addCode(

                // D0 = z0 * x0;
                c.call(f2mPrefix + "_mul", z0, x0, D0),
                // D2 = z2 * x2;
                c.call(f2mPrefix + "_mul", z2, x2, D2),
                // D4 = z4 * x4;
                c.call(f2mPrefix + "_mul", z4, x4, D4),
                // t2 = z0 + z4;
                c.call(f2mPrefix + "_add", z0, z4, t2),
                // t1 = z0 + z2;
                c.call(f2mPrefix + "_add", z0, z2, t1),
                // s0 = z1 + z3 + z5;
                c.call(f2mPrefix + "_add", z1, z3, s0),
                c.call(f2mPrefix + "_add", s0, z5, s0),


                // For z.a_.a_ = z0.
                // S1 = z1 * x2;
                c.call(f2mPrefix + "_mul", z1, x2, S1),
                // T3 = S1 + D4;
                c.call(f2mPrefix + "_add", S1, D4, T3),
                // T4 = my_Fp6::non_residue * T3 + D0;
                c.call(f2mPrefix + "_mul", c.i32_const(pNonResidueF6), T3, T4),
                c.call(f2mPrefix + "_add", T4, D0, z0),
                // z0 = T4;

                // For z.a_.b_ = z1
                // T3 = z5 * x4;
                c.call(f2mPrefix + "_mul", z5, x4, T3),
                // S1 = S1 + T3;
                c.call(f2mPrefix + "_add", S1, T3, S1),
                // T3 = T3 + D2;
                c.call(f2mPrefix + "_add", T3, D2, T3),
                // T4 = my_Fp6::non_residue * T3;
                c.call(f2mPrefix + "_mul", c.i32_const(pNonResidueF6), T3, T4),
                // T3 = z1 * x0;
                c.call(f2mPrefix + "_mul", z1, x0, T3),
                // S1 = S1 + T3;
                c.call(f2mPrefix + "_add", S1, T3, S1),
                // T4 = T4 + T3;
                c.call(f2mPrefix + "_add", T4, T3, z1),
                // z1 = T4;



                // For z.a_.c_ = z2
                // t0 = x0 + x2;
                c.call(f2mPrefix + "_add", x0, x2, t0),
                // T3 = t1 * t0 - D0 - D2;
                c.call(f2mPrefix + "_mul", t1, t0, T3),
                c.call(f2mPrefix + "_add", D0, D2, AUX),
                c.call(f2mPrefix + "_sub", T3, AUX, T3),
                // T4 = z3 * x4;
                c.call(f2mPrefix + "_mul", z3, x4, T4),
                // S1 = S1 + T4;
                c.call(f2mPrefix + "_add", S1, T4, S1),


                // For z.b_.a_ = z3 (z3 needs z2)
                // t0 = z2 + z4;
                c.call(f2mPrefix + "_add", z2, z4, t0),
                // T3 = T3 + T4;
                // z2 = T3;
                c.call(f2mPrefix + "_add", T3, T4, z2),
                // t1 = x2 + x4;
                c.call(f2mPrefix + "_add", x2, x4, t1),
                // T3 = t0 * t1 - D2 - D4;
                c.call(f2mPrefix + "_mul", t1, t0, T3),
                c.call(f2mPrefix + "_add", D2, D4, AUX),
                c.call(f2mPrefix + "_sub", T3, AUX, T3),
                // T4 = my_Fp6::non_residue * T3;
                c.call(f2mPrefix + "_mul", c.i32_const(pNonResidueF6), T3, T4),
                // T3 = z3 * x0;
                c.call(f2mPrefix + "_mul", z3, x0, T3),
                // S1 = S1 + T3;
                c.call(f2mPrefix + "_add", S1, T3, S1),
                // T4 = T4 + T3;
                c.call(f2mPrefix + "_add", T4, T3, z3),
                // z3 = T4;

                // For z.b_.b_ = z4
                // T3 = z5 * x2;
                c.call(f2mPrefix + "_mul", z5, x2, T3),
                // S1 = S1 + T3;
                c.call(f2mPrefix + "_add", S1, T3, S1),
                // T4 = my_Fp6::non_residue * T3;
                c.call(f2mPrefix + "_mul", c.i32_const(pNonResidueF6), T3, T4),
                // t0 = x0 + x4;
                c.call(f2mPrefix + "_add", x0, x4, t0),
                // T3 = t2 * t0 - D0 - D4;
                c.call(f2mPrefix + "_mul", t2, t0, T3),
                c.call(f2mPrefix + "_add", D0, D4, AUX),
                c.call(f2mPrefix + "_sub", T3, AUX, T3),
                // T4 = T4 + T3;
                c.call(f2mPrefix + "_add", T4, T3, z4),
                // z4 = T4;

                // For z.b_.c_ = z5.
                // t0 = x0 + x2 + x4;
                c.call(f2mPrefix + "_add", x0, x2, t0),
                c.call(f2mPrefix + "_add", t0, x4, t0),
                // T3 = s0 * t0 - S1;
                c.call(f2mPrefix + "_mul", s0, t0, T3),
                c.call(f2mPrefix + "_sub", T3, S1, z5),
                // z5 = T3;

            );
        }


        function buildMillerLoop() {
            const f = module.addFunction(prefix+ "_millerLoop");
            f.addParam("ppreP", "i32");
            f.addParam("ppreQ", "i32");
            f.addParam("r", "i32");
            f.addLocal("pCoef", "i32");
            f.addLocal("i", "i32");

            const c = f.getCodeBuilder();

            const preP_PX = c.getLocal("ppreP");
            const preP_PY = c.i32_add(c.getLocal("ppreP"), c.i32_const(f1size));

            const ELL_0  = c.getLocal("pCoef");
            const ELL_VW = c.i32_add(c.getLocal("pCoef"), c.i32_const(f2size));
            const ELL_VV  = c.i32_add(c.getLocal("pCoef"), c.i32_const(2*f2size));


            const pVW = module.alloc(f2size);
            const VW = c.i32_const(pVW);
            const pVV = module.alloc(f2size);
            const VV = c.i32_const(pVV);

            const F = c.getLocal("r");


            f.addCode(
                c.call(ftmPrefix + "_one", F),

                c.setLocal("pCoef", c.i32_add( c.getLocal("ppreQ"), c.i32_const(f2size*3))),

                c.setLocal("i", c.i32_const(ateLoopBitBytes.length-2)),
                c.block(c.loop(


                    c.call(ftmPrefix + "_square", F, F),

                    c.call(f2mPrefix + "_mul1", ELL_VW,preP_PY, VW),
                    c.call(f2mPrefix + "_mul1", ELL_VV, preP_PX, VV),
                    c.call(prefix + "__mulBy024", ELL_0, VW, VV, F),
                    c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),

                    c.if(
                        c.i32_load8_s(c.getLocal("i"), pAteLoopBitBytes),
                        [
                            ...c.call(f2mPrefix + "_mul1", ELL_VW, preP_PY, VW),
                            ...c.call(f2mPrefix + "_mul1", ELL_VV, preP_PX, VV),

                            ...c.call(prefix + "__mulBy024", ELL_0, VW, VV, F),
                            ...c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),

                        ]
                    ),
                    c.br_if(1, c.i32_eqz ( c.getLocal("i") )),
                    c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))

            );

            f.addCode(
                c.call(f2mPrefix + "_mul1", ELL_VW, preP_PY, VW),
                c.call(f2mPrefix + "_mul1", ELL_VV, preP_PX, VV),
                c.call(prefix + "__mulBy024", ELL_0, VW, VV, F),
                c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),

                c.call(f2mPrefix + "_mul1", ELL_VW, preP_PY, VW),
                c.call(f2mPrefix + "_mul1", ELL_VV, preP_PX, VV),
                c.call(prefix + "__mulBy024", ELL_0, VW, VV, F),
                c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),

            );

        }


        function buildFrobeniusMap(n) {
            const F12 = [
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                ],
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("8376118865763821496583973867626364092589906065868298776909617916018768340080"), BigInteger("16469823323077808223889137241176536799009286646108169935659301613961712198316")],
                    [BigInteger("21888242871839275220042445260109153167277707414472061641714758635765020556617"), BigInteger("0")],
                    [BigInteger("11697423496358154304825782922584725312912383441159505038794027105778954184319"), BigInteger("303847389135065887422783454877609941456349188919719272345083954437860409601")],
                    [BigInteger("21888242871839275220042445260109153167277707414472061641714758635765020556616"), BigInteger("0")],
                    [BigInteger("3321304630594332808241809054958361220322477375291206261884409189760185844239"), BigInteger("5722266937896532885780051958958348231143373700109372999374820235121374419868")],
                    [BigInteger("21888242871839275222246405745257275088696311157297823662689037894645226208582"), BigInteger("0")],
                    [BigInteger("13512124006075453725662431877630910996106405091429524885779419978626457868503"), BigInteger("5418419548761466998357268504080738289687024511189653727029736280683514010267")],
                    [BigInteger("2203960485148121921418603742825762020974279258880205651966"), BigInteger("0")],
                    [BigInteger("10190819375481120917420622822672549775783927716138318623895010788866272024264"), BigInteger("21584395482704209334823622290379665147239961968378104390343953940207365798982")],
                    [BigInteger("2203960485148121921418603742825762020974279258880205651967"), BigInteger("0")],
                    [BigInteger("18566938241244942414004596690298913868373833782006617400804628704885040364344"), BigInteger("16165975933942742336466353786298926857552937457188450663314217659523851788715")],
                ]
            ];

            const F6 = [
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                ],
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("21575463638280843010398324269430826099269044274347216827212613867836435027261"), BigInteger("10307601595873709700152284273816112264069230130616436755625194854815875713954")],
                    [BigInteger("21888242871839275220042445260109153167277707414472061641714758635765020556616"), BigInteger("0")],
                    [BigInteger("3772000881919853776433695186713858239009073593817195771773381919316419345261"), BigInteger("2236595495967245188281701248203181795121068902605861227855261137820944008926")],
                    [BigInteger("2203960485148121921418603742825762020974279258880205651966"), BigInteger("0")],
                    [BigInteger("18429021223477853657660792034369865839114504446431234726392080002137598044644"), BigInteger("9344045779998320333812420223237981029506012124075525679208581902008406485703")],
                ],
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("2581911344467009335267311115468803099551665605076196740867805258568234346338"), BigInteger("19937756971775647987995932169929341994314640652964949448313374472400716661030")],
                    [BigInteger("2203960485148121921418603742825762020974279258880205651966"), BigInteger("0")],
                    [BigInteger("5324479202449903542726783395506214481928257762400643279780343368557297135718"), BigInteger("16208900380737693084919495127334387981393726419856888799917914180988844123039")],
                    [BigInteger("21888242871839275220042445260109153167277707414472061641714758635765020556616"), BigInteger("0")],
                    [BigInteger("13981852324922362344252311234282257507216387789820983642040889267519694726527"), BigInteger("7629828391165209371577384193250820201684255241773809077146787135900891633097")],
                ]
            ];

            const f = module.addFunction(prefix+ "__frobeniusMap"+n);
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            for (let i=0; i<6; i++) {
                const X = (i==0) ? c.getLocal("x") : c.i32_add(c.getLocal("x"), c.i32_const(i*f2size));
                const Xc0 = X;
                const Xc1 = c.i32_add(c.getLocal("x"), c.i32_const(i*f2size + f1size));
                const R = (i==0) ? c.getLocal("r") : c.i32_add(c.getLocal("r"), c.i32_const(i*f2size));
                const Rc0 = R;
                const Rc1 = c.i32_add(c.getLocal("r"), c.i32_const(i*f2size + f1size));
                const coef = mul2(F12[Math.floor(i/3)][n%12] , F6[i%3][n%6]);
                const pCoef = module.alloc([
                    ...utils$3.bigInt2BytesLE(toMontgomery(coef[0]), 32),
                    ...utils$3.bigInt2BytesLE(toMontgomery(coef[1]), 32),
                ]);
                if (n%2 == 1) {
                    f.addCode(
                        c.call(f1mPrefix + "_copy", Xc0, Rc0),
                        c.call(f1mPrefix + "_neg", Xc1, Rc1),
                        c.call(f2mPrefix + "_mul", R, c.i32_const(pCoef), R),
                    );
                } else {
                    f.addCode(c.call(f2mPrefix + "_mul", X, c.i32_const(pCoef), R));
                }
            }

            function mul2(a, b) {
                const ac0 = BigInteger(a[0]);
                const ac1 = BigInteger(a[1]);
                const bc0 = BigInteger(b[0]);
                const bc1 = BigInteger(b[1]);
                const res = [
                    ac0.times(bc0).minus(  ac1.times(bc1)  ).mod(q),
                    ac0.times(bc1).add(  ac1.times(bc0)  ).mod(q),
                ];
                if (res[0].isNegative()) res[0] = res[0].add(q);
                return res;
            }

        }



        function buildFinalExponentiationFirstChunk() {

            const f = module.addFunction(prefix+ "__finalExponentiationFirstChunk");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const elt = c.getLocal("x");
            const eltC0 = elt;
            const eltC1 = c.i32_add(elt, c.i32_const(n8*6));
            const r = c.getLocal("r");
            const pA = module.alloc(ftsize);
            const A = c.i32_const(pA);
            const Ac0 = A;
            const Ac1 = c.i32_const(pA + n8*6);
            const B = c.i32_const(module.alloc(ftsize));
            const C = c.i32_const(module.alloc(ftsize));
            const D = c.i32_const(module.alloc(ftsize));

            f.addCode(
                // const alt_bn128_Fq12 A = alt_bn128_Fq12(elt.c0,-elt.c1);
                c.call(f6mPrefix + "_copy", eltC0, Ac0),
                c.call(f6mPrefix + "_neg", eltC1, Ac1),

                // const alt_bn128_Fq12 B = elt.inverse();
                c.call(ftmPrefix + "_inverse", elt, B),

                // const alt_bn128_Fq12 C = A * B;
                c.call(ftmPrefix + "_mul", A, B, C),
                // const alt_bn128_Fq12 D = C.Frobenius_map(2);
                c.call(prefix + "__frobeniusMap2", C, D),
                // const alt_bn128_Fq12 result = D * C;
                c.call(ftmPrefix + "_mul", C, D, r),
            );
        }

        function buildCyclotomicSquare() {
            const f = module.addFunction(prefix+ "__cyclotomicSquare");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x4 = c.i32_add(c.getLocal("x"), c.i32_const(f2size));
            const x3 = c.i32_add(c.getLocal("x"), c.i32_const(2*f2size));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(3*f2size));
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(4*f2size));
            const x5 = c.i32_add(c.getLocal("x"), c.i32_const(5*f2size));

            const r0 = c.getLocal("r");
            const r4 = c.i32_add(c.getLocal("r"), c.i32_const(f2size));
            const r3 = c.i32_add(c.getLocal("r"), c.i32_const(2*f2size));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(3*f2size));
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(4*f2size));
            const r5 = c.i32_add(c.getLocal("r"), c.i32_const(5*f2size));

            const t0 = c.i32_const(module.alloc(f2size));
            const t1 = c.i32_const(module.alloc(f2size));
            const t2 = c.i32_const(module.alloc(f2size));
            const t3 = c.i32_const(module.alloc(f2size));
            const t4 = c.i32_const(module.alloc(f2size));
            const t5 = c.i32_const(module.alloc(f2size));
            const tmp = c.i32_const(module.alloc(f2size));
            const AUX = c.i32_const(module.alloc(f2size));


            f.addCode(

    //            c.call(ftmPrefix + "_square", x0, r0),

                //    // t0 + t1*y = (z0 + z1*y)^2 = a^2
                //    tmp = z0 * z1;
                //    t0 = (z0 + z1) * (z0 + my_Fp6::non_residue * z1) - tmp - my_Fp6::non_residue * tmp;
                //    t1 = tmp + tmp;
                c.call(f2mPrefix + "_mul", x0, x1, tmp),
                c.call(f2mPrefix + "_mul", x1, c.i32_const(pNonResidueF6), t0),
                c.call(f2mPrefix + "_add", x0, t0, t0),
                c.call(f2mPrefix + "_add", x0, x1, AUX),
                c.call(f2mPrefix + "_mul", AUX, t0, t0),
                c.call(f2mPrefix + "_mul", c.i32_const(pNonResidueF6), tmp, AUX),
                c.call(f2mPrefix + "_add", tmp, AUX, AUX),
                c.call(f2mPrefix + "_sub", t0, AUX, t0),
                c.call(f2mPrefix + "_add", tmp, tmp, t1),

                //  // t2 + t3*y = (z2 + z3*y)^2 = b^2
                //  tmp = z2 * z3;
                //  t2 = (z2 + z3) * (z2 + my_Fp6::non_residue * z3) - tmp - my_Fp6::non_residue * tmp;
                //  t3 = tmp + tmp;
                c.call(f2mPrefix + "_mul", x2, x3, tmp),
                c.call(f2mPrefix + "_mul", x3, c.i32_const(pNonResidueF6), t2),
                c.call(f2mPrefix + "_add", x2, t2, t2),
                c.call(f2mPrefix + "_add", x2, x3, AUX),
                c.call(f2mPrefix + "_mul", AUX, t2, t2),
                c.call(f2mPrefix + "_mul", c.i32_const(pNonResidueF6), tmp, AUX),
                c.call(f2mPrefix + "_add", tmp, AUX, AUX),
                c.call(f2mPrefix + "_sub", t2, AUX, t2),
                c.call(f2mPrefix + "_add", tmp, tmp, t3),

                //  // t4 + t5*y = (z4 + z5*y)^2 = c^2
                //  tmp = z4 * z5;
                //  t4 = (z4 + z5) * (z4 + my_Fp6::non_residue * z5) - tmp - my_Fp6::non_residue * tmp;
                //  t5 = tmp + tmp;
                c.call(f2mPrefix + "_mul", x4, x5, tmp),
                c.call(f2mPrefix + "_mul", x5, c.i32_const(pNonResidueF6), t4),
                c.call(f2mPrefix + "_add", x4, t4, t4),
                c.call(f2mPrefix + "_add", x4, x5, AUX),
                c.call(f2mPrefix + "_mul", AUX, t4, t4),
                c.call(f2mPrefix + "_mul", c.i32_const(pNonResidueF6), tmp, AUX),
                c.call(f2mPrefix + "_add", tmp, AUX, AUX),
                c.call(f2mPrefix + "_sub", t4, AUX, t4),
                c.call(f2mPrefix + "_add", tmp, tmp, t5),

                // For A
                // z0 = 3 * t0 - 2 * z0
                c.call(f2mPrefix + "_sub", t0, x0, r0),
                c.call(f2mPrefix + "_add", r0, r0, r0),
                c.call(f2mPrefix + "_add", t0, r0, r0),
                // z1 = 3 * t1 + 2 * z1
                c.call(f2mPrefix + "_add", t1, x1, r1),
                c.call(f2mPrefix + "_add", r1, r1, r1),
                c.call(f2mPrefix + "_add", t1, r1, r1),

                // For B
                // z2 = 3 * (xi * t5) + 2 * z2
                c.call(f2mPrefix + "_mul", t5, c.i32_const(pAltBn128Twist), AUX),
                c.call(f2mPrefix + "_add", AUX, x2, r2),
                c.call(f2mPrefix + "_add", r2, r2, r2),
                c.call(f2mPrefix + "_add", AUX, r2, r2),
                // z3 = 3 * t4 - 2 * z3
                c.call(f2mPrefix + "_sub", t4, x3, r3),
                c.call(f2mPrefix + "_add", r3, r3, r3),
                c.call(f2mPrefix + "_add", t4, r3, r3),

                // For C
                // z4 = 3 * t2 - 2 * z4
                c.call(f2mPrefix + "_sub", t2, x4, r4),
                c.call(f2mPrefix + "_add", r4, r4, r4),
                c.call(f2mPrefix + "_add", t2, r4, r4),
                // z5 = 3 * t3 + 2 * z5
                c.call(f2mPrefix + "_add", t3, x5, r5),
                c.call(f2mPrefix + "_add", r5, r5, r5),
                c.call(f2mPrefix + "_add", t3, r5, r5),

            );
        }


        function buildCyclotomicExp(exponent, fnName) {
            const exponentNafBytes = naf(exponent).map( (b) => (b==-1 ? 0xFF: b) );
            const pExponentNafBytes = module.alloc(exponentNafBytes);
            module.alloc(utils$3.bigInt2BytesLE(exponent, 32));

            const f = module.addFunction(prefix+ "__cyclotomicExp_"+fnName);
            f.addParam("x", "i32");
            f.addParam("r", "i32");
            f.addLocal("bit", "i32");
            f.addLocal("i", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("x");

            const res = c.getLocal("r");

            const inverse = c.i32_const(module.alloc(ftsize));


            f.addCode(
    //            c.call(ftmPrefix + "_exp", x, c.i32_const(pExponent), c.i32_const(32), res),

                c.call(ftmPrefix + "_conjugate", x, inverse),
                c.call(ftmPrefix + "_one", res),

                c.if(
                    c.teeLocal("bit", c.i32_load8_s(c.i32_const(exponentNafBytes.length-1), pExponentNafBytes)),
                    c.if(
                        c.i32_eq(
                            c.getLocal("bit"),
                            c.i32_const(1)
                        ),
                        c.call(ftmPrefix + "_mul", res, x, res),
                        c.call(ftmPrefix + "_mul", res, inverse, res),
                    )
                ),

                c.setLocal("i", c.i32_const(exponentNafBytes.length-2)),
                c.block(c.loop(
    //                c.call(ftmPrefix + "_square", res, res),
                    c.call(prefix + "__cyclotomicSquare", res, res),
                    c.if(
                        c.teeLocal("bit", c.i32_load8_s(c.getLocal("i"), pExponentNafBytes)),
                        c.if(
                            c.i32_eq(
                                c.getLocal("bit"),
                                c.i32_const(1)
                            ),
                            c.call(ftmPrefix + "_mul", res, x, res),
                            c.call(ftmPrefix + "_mul", res, inverse, res),
                        )
                    ),
                    c.br_if(1, c.i32_eqz ( c.getLocal("i") )),
                    c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );
        }



        function buildFinalExponentiationLastChunk() {
            buildCyclotomicSquare();
            buildCyclotomicExp(finalExpZ, "w0");

            const f = module.addFunction(prefix+ "__finalExponentiationLastChunk");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const elt = c.getLocal("x");
            const result = c.getLocal("r");
            const A = c.i32_const(module.alloc(ftsize));
            const B = c.i32_const(module.alloc(ftsize));
            const C = c.i32_const(module.alloc(ftsize));
            const D = c.i32_const(module.alloc(ftsize));
            const E = c.i32_const(module.alloc(ftsize));
            const F = c.i32_const(module.alloc(ftsize));
            const G = c.i32_const(module.alloc(ftsize));
            const H = c.i32_const(module.alloc(ftsize));
            const I = c.i32_const(module.alloc(ftsize));
            const J = c.i32_const(module.alloc(ftsize));
            const K = c.i32_const(module.alloc(ftsize));
            const L = c.i32_const(module.alloc(ftsize));
            const M = c.i32_const(module.alloc(ftsize));
            const N = c.i32_const(module.alloc(ftsize));
            const O = c.i32_const(module.alloc(ftsize));
            const P = c.i32_const(module.alloc(ftsize));
            const Q = c.i32_const(module.alloc(ftsize));
            const R = c.i32_const(module.alloc(ftsize));
            const S = c.i32_const(module.alloc(ftsize));
            const T = c.i32_const(module.alloc(ftsize));
            const U = c.i32_const(module.alloc(ftsize));

            f.addCode(


                // A = exp_by_neg_z(elt)  // = elt^(-z)
                c.call(prefix + "__cyclotomicExp_w0", elt, A),
                c.call(ftmPrefix + "_conjugate", A, A),
                // B = A^2                // = elt^(-2*z)
                c.call(prefix + "__cyclotomicSquare", A, B),
                // C = B^2                // = elt^(-4*z)
                c.call(prefix + "__cyclotomicSquare", B, C),
                // D = C * B              // = elt^(-6*z)
                c.call(ftmPrefix + "_mul", C, B, D),
                // E = exp_by_neg_z(D)    // = elt^(6*z^2)
                c.call(prefix + "__cyclotomicExp_w0", D, E),
                c.call(ftmPrefix + "_conjugate", E, E),
                // F = E^2                // = elt^(12*z^2)
                c.call(prefix + "__cyclotomicSquare", E, F),
                // G = epx_by_neg_z(F)    // = elt^(-12*z^3)
                c.call(prefix + "__cyclotomicExp_w0", F, G),
                c.call(ftmPrefix + "_conjugate", G, G),
                // H = conj(D)            // = elt^(6*z)
                c.call(ftmPrefix + "_conjugate", D, H),
                // I = conj(G)            // = elt^(12*z^3)
                c.call(ftmPrefix + "_conjugate", G, I),
                // J = I * E              // = elt^(12*z^3 + 6*z^2)
                c.call(ftmPrefix + "_mul", I, E, J),
                // K = J * H              // = elt^(12*z^3 + 6*z^2 + 6*z)
                c.call(ftmPrefix + "_mul", J, H, K),
                // L = K * B              // = elt^(12*z^3 + 6*z^2 + 4*z)
                c.call(ftmPrefix + "_mul", K, B, L),
                // M = K * E              // = elt^(12*z^3 + 12*z^2 + 6*z)
                c.call(ftmPrefix + "_mul", K, E, M),

                // N = M * elt            // = elt^(12*z^3 + 12*z^2 + 6*z + 1)
                c.call(ftmPrefix + "_mul", M, elt, N),

                // O = L.Frobenius_map(1) // = elt^(q*(12*z^3 + 6*z^2 + 4*z))
                c.call(prefix + "__frobeniusMap1", L, O),
                // P = O * N              // = elt^(q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))
                c.call(ftmPrefix + "_mul", O, N, P),
                // Q = K.Frobenius_map(2) // = elt^(q^2 * (12*z^3 + 6*z^2 + 6*z))
                c.call(prefix + "__frobeniusMap2", K, Q),
                // R = Q * P              // = elt^(q^2 * (12*z^3 + 6*z^2 + 6*z) + q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))
                c.call(ftmPrefix + "_mul", Q, P, R),
                // S = conj(elt)          // = elt^(-1)
                c.call(ftmPrefix + "_conjugate", elt, S),
                // T = S * L              // = elt^(12*z^3 + 6*z^2 + 4*z - 1)
                c.call(ftmPrefix + "_mul", S, L, T),
                // U = T.Frobenius_map(3) // = elt^(q^3(12*z^3 + 6*z^2 + 4*z - 1))
                c.call(prefix + "__frobeniusMap3", T, U),
                // V = U * R              // = elt^(q^3(12*z^3 + 6*z^2 + 4*z - 1) + q^2 * (12*z^3 + 6*z^2 + 6*z) + q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))
                c.call(ftmPrefix + "_mul", U, R, result),
                // result = V
            );
        }


        function buildFinalExponentiation() {
            buildFinalExponentiationFirstChunk();
            buildFinalExponentiationLastChunk();
            const f = module.addFunction(prefix+ "_finalExponentiation");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const elt = c.getLocal("x");
            const result = c.getLocal("r");
            const eltToFirstChunk = c.i32_const(module.alloc(ftsize));

            f.addCode(
                c.call(prefix + "__finalExponentiationFirstChunk", elt, eltToFirstChunk ),
                c.call(prefix + "__finalExponentiationLastChunk", eltToFirstChunk, result )
            );
        }


        function buildFinalExponentiationOld() {
            const f = module.addFunction(prefix+ "_finalExponentiationOld");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const exponent = BigInteger("552484233613224096312617126783173147097382103762957654188882734314196910839907541213974502761540629817009608548654680343627701153829446747810907373256841551006201639677726139946029199968412598804882391702273019083653272047566316584365559776493027495458238373902875937659943504873220554161550525926302303331747463515644711876653177129578303191095900909191624817826566688241804408081892785725967931714097716709526092261278071952560171111444072049229123565057483750161460024353346284167282452756217662335528813519139808291170539072125381230815729071544861602750936964829313608137325426383735122175229541155376346436093930287402089517426973178917569713384748081827255472576937471496195752727188261435633271238710131736096299798168852925540549342330775279877006784354801422249722573783561685179618816480037695005515426162362431072245638324744480");

            const pExponent = module.alloc(utils$3.bigInt2BytesLE( exponent, 352 ));

            const c = f.getCodeBuilder();

            f.addCode(
                c.call(ftmPrefix + "_exp", c.getLocal("x"), c.i32_const(pExponent), c.i32_const(352), c.getLocal("r")),
            );
        }




        const pPreP = module.alloc(prePSize);
        const pPreQ = module.alloc(preQSize);

        function buildPairingEquation(nPairings) {

            const f = module.addFunction(prefix+ "_pairingEq"+nPairings);
            for (let i=0; i<nPairings; i++) {
                f.addParam("p_"+i, "i32");
                f.addParam("q_"+i, "i32");
            }
            f.addParam("c", "i32");
            f.setReturnType("i32");


            const c = f.getCodeBuilder();

            const resT = c.i32_const(module.alloc(ftsize));
            const auxT = c.i32_const(module.alloc(ftsize));

            f.addCode(c.call(ftmPrefix + "_one", resT ));

            for (let i=0; i<nPairings; i++) {

                f.addCode(c.call(prefix + "_prepareG1", c.getLocal("p_"+i), c.i32_const(pPreP) ));
                f.addCode(c.call(prefix + "_prepareG2", c.getLocal("q_"+i), c.i32_const(pPreQ) ));
                f.addCode(c.call(prefix + "_millerLoop", c.i32_const(pPreP), c.i32_const(pPreQ), auxT ));

                f.addCode(c.call(ftmPrefix + "_mul", resT, auxT, resT ));
            }

            f.addCode(c.call(prefix + "_finalExponentiation", resT, resT ));

            f.addCode(c.call(ftmPrefix + "_eq", resT, c.getLocal("c")));
        }


        function buildPairing() {

            const f = module.addFunction(prefix+ "_pairing");
            f.addParam("p", "i32");
            f.addParam("q", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const resT = c.i32_const(module.alloc(ftsize));

            f.addCode(c.call(prefix + "_prepareG1", c.getLocal("p"), c.i32_const(pPreP) ));
            f.addCode(c.call(prefix + "_prepareG2", c.getLocal("q"), c.i32_const(pPreQ) ));
            f.addCode(c.call(prefix + "_millerLoop", c.i32_const(pPreP), c.i32_const(pPreQ), resT ));
            f.addCode(c.call(prefix + "_finalExponentiation", resT, c.getLocal("r") ));
        }


        buildPrepAddStep();
        buildPrepDoubleStep();

        buildPrepareG1();
        buildPrepareG2();

        buildMulBy024();
        buildMulBy024Old();
        buildMillerLoop();


        for (let i=0; i<10; i++) {
            buildFrobeniusMap(i);
            module.exportFunction(prefix + "__frobeniusMap"+i);
        }

        buildFinalExponentiationOld();
        buildFinalExponentiation();

        for (let i=1; i<=5; i++) {
            buildPairingEquation(i);
            module.exportFunction(prefix + "_pairingEq"+i);
        }

        buildPairing();

        module.exportFunction(prefix + "_pairing");

        module.exportFunction(prefix + "_prepareG1");
        module.exportFunction(prefix + "_prepareG2");
        module.exportFunction(prefix + "_millerLoop");
        module.exportFunction(prefix + "_finalExponentiation");
        module.exportFunction(prefix + "_finalExponentiationOld");
        module.exportFunction(prefix + "__mulBy024");
        module.exportFunction(prefix + "__mulBy024Old");
        module.exportFunction(prefix + "__cyclotomicSquare");
        module.exportFunction(prefix + "__cyclotomicExp_w0");

        // console.log(module.functionIdxByName);

    };

    // Definition here: https://electriccoin.co/blog/new-snark-curve/

    var build_bls12381 = function buildBLS12381(module, _prefix) {

        const prefix = _prefix || "bls12381";

        if (module.modules[prefix]) return prefix;  // already builded

        const q = BigInteger("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab", 16);
        const r = BigInteger("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16);

        const n64q = Math.floor((q.minus(1).bitLength() - 1)/64) +1;
        const n8q = n64q*8;
        const f1size = n8q;
        const f2size = f1size * 2;
        const ftsize = f1size * 12;

        const n64r = Math.floor((r.minus(1).bitLength() - 1)/64) +1;
        const n8r = n64r*8;
        const frsize = n8r;


        const pr = module.alloc(utils$3.bigInt2BytesLE( r, frsize ));

        const f1mPrefix = build_f1m(module, q, "f1m", "intq");
        build_f1(module, r, "fr", "frm", "intr");
        const pG1b = module.alloc(utils$3.bigInt2BytesLE( toMontgomery(BigInteger(4)), f1size ));
        const g1mPrefix = build_curve_jacobian_a0(module, "g1m", "f1m", pG1b);

        build_fft(module, "frm", "frm", "frm", "frm_mul");

        build_pol(module, "pol", "frm");
        build_qap(module, "qap", "frm");

        const f2mPrefix = build_f2m(module, "f1m_neg", "f2m", "f1m");
        const pG2b = module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery(BigInteger("4")), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(BigInteger("4")), f1size )
        ]);
        const g2mPrefix = build_curve_jacobian_a0(module, "g2m", "f2m", pG2b);


        function buildGTimesFr(fnName, opMul) {
            const f = module.addFunction(fnName);
            f.addParam("pG", "i32");
            f.addParam("pFr", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const AUX = c.i32_const(module.alloc(n8r));

            f.addCode(
                c.call("frm_fromMontgomery", c.getLocal("pFr"), AUX),
                c.call(
                    opMul,
                    c.getLocal("pG"),
                    AUX,
                    c.i32_const(n8r),
                    c.getLocal("pr")
                )
            );

            module.exportFunction(fnName);
        }
        buildGTimesFr("g1m_timesFr", "g1m_timesScalar");
        build_fft(module, "g1m", "g1m", "frm", "g1m_timesFr");

        buildGTimesFr("g2m_timesFr", "g2m_timesScalar");
        build_fft(module, "g2m", "g2m", "frm", "g2m_timesFr");

        buildGTimesFr("g1m_timesFrAffine", "g1m_timesScalarAffine");
        buildGTimesFr("g2m_timesFrAffine", "g2m_timesScalarAffine");

        build_applykey(module, "frm_batchApplyKey", "fmr", "frm", n8r, n8r, n8r, "frm_mul");
        build_applykey(module, "g1m_batchApplyKey", "g1m", "frm", n8q*3, n8q*3, n8r, "g1m_timesFr");
        build_applykey(module, "g1m_batchApplyKeyMixed", "g1m", "frm", n8q*2, n8q*3, n8r, "g1m_timesFrAffine");
        build_applykey(module, "g2m_batchApplyKey", "g2m", "frm", n8q*2*3, n8q*3*2, n8r, "g2m_timesFr");
        build_applykey(module, "g2m_batchApplyKeyMixed", "g2m", "frm", n8q*2*2, n8q*3*2, n8r, "g2m_timesFrAffine");


        function toMontgomery(a) {
            return BigInteger(a).times( BigInteger.one.shiftLeft(f1size*8)).mod(q);
        }

        const G1gen = [
            BigInteger("3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507"),
            BigInteger("1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569"),
            BigInteger.one
        ];

        const pG1gen = module.alloc(
            [
                ...utils$3.bigInt2BytesLE( toMontgomery(G1gen[0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G1gen[1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G1gen[2]), f1size ),
            ]
        );

        const G1zero = [
            BigInteger.zero,
            BigInteger.one,
            BigInteger.zero
        ];

        const pG1zero = module.alloc(
            [
                ...utils$3.bigInt2BytesLE( toMontgomery(G1zero[0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G1zero[1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G1zero[2]), f1size )
            ]
        );

        const G2gen = [
            [
                BigInteger("352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160"),
                BigInteger("3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758"),
            ],[
                BigInteger("1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905"),
                BigInteger("927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582"),
            ],[
                BigInteger.one,
                BigInteger.zero,
            ]
        ];

        const pG2gen = module.alloc(
            [
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[0][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[0][1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[1][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[1][1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[2][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2gen[2][1]), f1size ),
            ]
        );

        const G2zero = [
            [
                BigInteger.zero,
                BigInteger.zero,
            ],[
                BigInteger.one,
                BigInteger.zero,
            ],[
                BigInteger.zero,
                BigInteger.zero,
            ]
        ];

        const pG2zero = module.alloc(
            [
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[0][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[0][1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[1][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[1][1]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[2][0]), f1size ),
                ...utils$3.bigInt2BytesLE( toMontgomery(G2zero[2][1]), f1size ),
            ]
        );

        const pOneT = module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery(1), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(0), f1size ),
        ]);

        module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery(  BigInteger(2).modInv(q)), f1size ),
            ...utils$3.bigInt2BytesLE( BigInteger(0), f1size )
        ]);

        const pBls12381Twist =  module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery(1), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery(1), f1size ),
        ]);

        module.alloc([
            ...utils$3.bigInt2BytesLE( toMontgomery("4"), f1size ),
            ...utils$3.bigInt2BytesLE( toMontgomery("4"), f1size ),
        ]);

        function build_mulNR2() {
            const f = module.addFunction(f2mPrefix + "_mulNR");
            f.addParam("x", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const x0c = c.i32_const(module.alloc(f1size));
            const x0 = c.getLocal("x");
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(f1size));
            const r0 = c.getLocal("pr");
            const r1 = c.i32_add(c.getLocal("pr"), c.i32_const(f1size));

            f.addCode(
                c.call(f1mPrefix+"_copy", x0, x0c),
                c.call(f1mPrefix+"_sub", x0, x1, r0),
                c.call(f1mPrefix+"_add", x0c, x1, r1),
            );
        }
        build_mulNR2();

        const f6mPrefix = build_f3m(module, f2mPrefix+"_mulNR", "f6m", "f2m");

        function build_mulNR6() {
            const f = module.addFunction(f6mPrefix + "_mulNR");
            f.addParam("x", "i32");
            f.addParam("pr", "i32");

            const c = f.getCodeBuilder();

            const c0copy = c.i32_const(module.alloc(f1size*2));

            f.addCode(
                c.call(
                    f2mPrefix + "_copy",
                    c.getLocal("x"),
                    c0copy
                ),
                c.call(
                    f2mPrefix + "_mulNR",
                    c.i32_add(c.getLocal("x"), c.i32_const(n8q*4)),
                    c.getLocal("pr")
                ),
                c.call(
                    f2mPrefix + "_copy",
                    c.i32_add(c.getLocal("x"), c.i32_const(n8q*2)),
                    c.i32_add(c.getLocal("pr"), c.i32_const(n8q*4)),
                ),
                c.call(
                    f2mPrefix + "_copy",
                    c0copy,
                    c.i32_add(c.getLocal("pr"), c.i32_const(n8q*2)),
                ),
            );
        }
        build_mulNR6();

        const ftmPrefix = build_f2m(module, f6mPrefix+"_mulNR", "ftm", f6mPrefix);

        const ateLoopCount = BigInteger("d201000000010000", 16);
        const ateLoopBitBytes = bits(ateLoopCount);
        const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);

        const ateCoefSize = 3 * f2size;
        const ateNDblCoefs = ateLoopBitBytes.length-1;
        const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b) =>  acc + ( b!=0 ? 1 : 0)   ,0);
        const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;
        const prePSize = 3*2*n8q;
        const preQSize = 3*n8q*2 + ateNCoefs*ateCoefSize;
        const finalExpIsNegative = true;

        const finalExpZ = BigInteger("15132376222941642752");


        module.modules[prefix] = {
            n64q: n64q,
            n64r: n64r,
            n8q: n8q,
            n8r: n8r,
            pG1gen: pG1gen,
            pG1zero: pG1zero,
            pG1b: pG1b,
            pG2gen: pG2gen,
            pG2zero: pG2zero,
            pG2b: pG2b,
            pq: module.modules["f1m"].pq,
            pr: pr,
            pOneT: pOneT,
            r: r,
            q: q,
            prePSize: prePSize,
            preQSize: preQSize
        };


        function naf(n) {
            let E = n;
            const res = [];
            while (E.gt(BigInteger.zero)) {
                if (E.isOdd()) {
                    const z = 2 - E.mod(4).toJSNumber();
                    res.push( z );
                    E = E.minus(z);
                } else {
                    res.push( 0 );
                }
                E = E.shiftRight(1);
            }
            return res;
        }

        function bits(n) {
            let E = n;
            const res = [];
            while (E.gt(BigInteger.zero)) {
                if (E.isOdd()) {
                    res.push( 1 );
                } else {
                    res.push( 0 );
                }
                E = E.shiftRight(1);
            }
            return res;
        }

        function buildPrepareG1() {
            const f = module.addFunction(prefix+ "_prepareG1");
            f.addParam("pP", "i32");
            f.addParam("ppreP", "i32");

            const c = f.getCodeBuilder();

            f.addCode(
                c.call(g1mPrefix + "_normalize", c.getLocal("pP"), c.getLocal("ppreP")),  // TODO Remove if already in affine
            );
        }



        function buildPrepDoubleStep() {
            const f = module.addFunction(prefix+ "_prepDblStep");
            f.addParam("R", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const Rx  = c.getLocal("R");
            const Ry  = c.i32_add(c.getLocal("R"), c.i32_const(2*n8q));
            const Rz  = c.i32_add(c.getLocal("R"), c.i32_const(4*n8q));

            const t0  = c.getLocal("r");
            const t3  = c.i32_add(c.getLocal("r"), c.i32_const(2*n8q));
            const t6  = c.i32_add(c.getLocal("r"), c.i32_const(4*n8q));


            const zsquared = c.i32_const(module.alloc(f2size));
            const t1 = c.i32_const(module.alloc(f2size));
            const t2 = c.i32_const(module.alloc(f2size));
            const t4 = c.i32_const(module.alloc(f2size));
            const t5 = c.i32_const(module.alloc(f2size));

            f.addCode(

                // tmp0 = r.x.square();
                c.call(f2mPrefix + "_square", Rx, t0),

                // tmp1 = r.y.square();
                c.call(f2mPrefix + "_square", Ry, t1),

                // tmp2 = tmp1.square();
                c.call(f2mPrefix + "_square", t1, t2),

                // tmp3 = (tmp1 + r.x).square() - tmp0 - tmp2;
                c.call(f2mPrefix + "_add", t1, Rx, t3),
                c.call(f2mPrefix + "_square", t3, t3),
                c.call(f2mPrefix + "_sub", t3, t0, t3),
                c.call(f2mPrefix + "_sub", t3, t2, t3),

                // tmp3 = tmp3 + tmp3;
                c.call(f2mPrefix + "_add", t3, t3, t3),

                // tmp4 = tmp0 + tmp0 + tmp0;
                c.call(f2mPrefix + "_add", t0, t0, t4),
                c.call(f2mPrefix + "_add", t4, t0, t4),

                // tmp6 = r.x + tmp4;
                c.call(f2mPrefix + "_add", Rx, t4, t6),

                // tmp5 = tmp4.square();
                c.call(f2mPrefix + "_square", t4, t5),

                // zsquared = r.z.square();
                c.call(f2mPrefix + "_square", Rz, zsquared),

                // r.x = tmp5 - tmp3 - tmp3;
                c.call(f2mPrefix + "_sub", t5, t3, Rx),
                c.call(f2mPrefix + "_sub", Rx, t3, Rx),

                // r.z = (r.z + r.y).square() - tmp1 - zsquared;
                c.call(f2mPrefix + "_add", Rz, Ry, Rz),
                c.call(f2mPrefix + "_square", Rz, Rz),
                c.call(f2mPrefix + "_sub", Rz, t1, Rz),
                c.call(f2mPrefix + "_sub", Rz, zsquared, Rz),

                // r.y = (tmp3 - r.x) * tmp4;
                c.call(f2mPrefix + "_sub", t3, Rx, Ry),
                c.call(f2mPrefix + "_mul", Ry, t4, Ry),

                // tmp2 = tmp2 + tmp2;
                c.call(f2mPrefix + "_add", t2, t2, t2),

                // tmp2 = tmp2 + tmp2;
                c.call(f2mPrefix + "_add", t2, t2, t2),

                // tmp2 = tmp2 + tmp2;
                c.call(f2mPrefix + "_add", t2, t2, t2),

                // r.y -= tmp2;
                c.call(f2mPrefix + "_sub", Ry, t2, Ry),

                // tmp3 = tmp4 * zsquared;
                c.call(f2mPrefix + "_mul", t4, zsquared, t3),

                // tmp3 = tmp3 + tmp3;
                c.call(f2mPrefix + "_add", t3, t3, t3),

                // tmp3 = -tmp3;
                c.call(f2mPrefix + "_neg", t3, t3),

                // tmp6 = tmp6.square() - tmp0 - tmp5;
                c.call(f2mPrefix + "_square", t6, t6),
                c.call(f2mPrefix + "_sub", t6, t0, t6),
                c.call(f2mPrefix + "_sub", t6, t5, t6),

                // tmp1 = tmp1 + tmp1;
                c.call(f2mPrefix + "_add", t1, t1, t1),

                // tmp1 = tmp1 + tmp1;
                c.call(f2mPrefix + "_add", t1, t1, t1),

                // tmp6 = tmp6 - tmp1;
                c.call(f2mPrefix + "_sub", t6, t1, t6),

                // tmp0 = r.z * zsquared;
                c.call(f2mPrefix + "_mul", Rz, zsquared, t0),

                // tmp0 = tmp0 + tmp0;
                c.call(f2mPrefix + "_add", t0, t0, t0),

            );
        }

        function buildPrepAddStep() {
            const f = module.addFunction(prefix+ "_prepAddStep");
            f.addParam("R", "i32");
            f.addParam("Q", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const Rx  = c.getLocal("R");
            const Ry  = c.i32_add(c.getLocal("R"), c.i32_const(2*n8q));
            const Rz  = c.i32_add(c.getLocal("R"), c.i32_const(4*n8q));

            const Qx  = c.getLocal("Q");
            const Qy  = c.i32_add(c.getLocal("Q"), c.i32_const(2*n8q));

            const t10  = c.getLocal("r");
            const t1  = c.i32_add(c.getLocal("r"), c.i32_const(2*n8q));
            const t9  = c.i32_add(c.getLocal("r"), c.i32_const(4*n8q));

            const zsquared = c.i32_const(module.alloc(f2size));
            const ysquared = c.i32_const(module.alloc(f2size));
            const ztsquared = c.i32_const(module.alloc(f2size));
            const t0 = c.i32_const(module.alloc(f2size));
            const t2 = c.i32_const(module.alloc(f2size));
            const t3 = c.i32_const(module.alloc(f2size));
            const t4 = c.i32_const(module.alloc(f2size));
            const t5 = c.i32_const(module.alloc(f2size));
            const t6 = c.i32_const(module.alloc(f2size));
            const t7 = c.i32_const(module.alloc(f2size));
            const t8 = c.i32_const(module.alloc(f2size));

            f.addCode(

                // zsquared = r.z.square();
                c.call(f2mPrefix + "_square", Rz, zsquared),

                // ysquared = q.y.square();
                c.call(f2mPrefix + "_square", Qy, ysquared),

                // t0 = zsquared * q.x;
                c.call(f2mPrefix + "_mul", zsquared, Qx, t0),

                // t1 = ((q.y + r.z).square() - ysquared - zsquared) * zsquared;
                c.call(f2mPrefix + "_add", Qy, Rz, t1),
                c.call(f2mPrefix + "_square", t1, t1),
                c.call(f2mPrefix + "_sub", t1, ysquared, t1),
                c.call(f2mPrefix + "_sub", t1, zsquared, t1),
                c.call(f2mPrefix + "_mul", t1, zsquared, t1),

                // t2 = t0 - r.x;
                c.call(f2mPrefix + "_sub", t0, Rx, t2),

                // t3 = t2.square();
                c.call(f2mPrefix + "_square", t2, t3),

                // t4 = t3 + t3;
                c.call(f2mPrefix + "_add", t3, t3, t4),

                // t4 = t4 + t4;
                c.call(f2mPrefix + "_add", t4, t4, t4),

                // t5 = t4 * t2;
                c.call(f2mPrefix + "_mul", t4, t2, t5),

                // t6 = t1 - r.y - r.y;
                c.call(f2mPrefix + "_sub", t1, Ry, t6),
                c.call(f2mPrefix + "_sub", t6, Ry, t6),

                // t9 = t6 * q.x;
                c.call(f2mPrefix + "_mul", t6, Qx, t9),

                // t7 = t4 * r.x;
                c.call(f2mPrefix + "_mul", t4, Rx, t7),

                // r.x = t6.square() - t5 - t7 - t7;
                c.call(f2mPrefix + "_square", t6, Rx),
                c.call(f2mPrefix + "_sub", Rx, t5, Rx),
                c.call(f2mPrefix + "_sub", Rx, t7, Rx),
                c.call(f2mPrefix + "_sub", Rx, t7, Rx),

                // r.z = (r.z + t2).square() - zsquared - t3;
                c.call(f2mPrefix + "_add", Rz, t2, Rz),
                c.call(f2mPrefix + "_square", Rz, Rz),
                c.call(f2mPrefix + "_sub", Rz, zsquared, Rz),
                c.call(f2mPrefix + "_sub", Rz, t3, Rz),

                // t10 = q.y + r.z;
                c.call(f2mPrefix + "_add", Qy, Rz, t10),

                // t8 = (t7 - r.x) * t6;
                c.call(f2mPrefix + "_sub", t7, Rx, t8),
                c.call(f2mPrefix + "_mul", t8, t6, t8),

                // t0 = r.y * t5;
                c.call(f2mPrefix + "_mul", Ry, t5, t0),

                // t0 = t0 + t0;
                c.call(f2mPrefix + "_add", t0, t0, t0),

                // r.y = t8 - t0;
                c.call(f2mPrefix + "_sub", t8, t0, Ry),

                // t10 = t10.square() - ysquared;
                c.call(f2mPrefix + "_square", t10, t10),
                c.call(f2mPrefix + "_sub", t10, ysquared, t10),

                // ztsquared = r.z.square();
                c.call(f2mPrefix + "_square", Rz, ztsquared),

                // t10 = t10 - ztsquared;
                c.call(f2mPrefix + "_sub", t10, ztsquared, t10),

                // t9 = t9 + t9 - t10;
                c.call(f2mPrefix + "_add", t9, t9, t9),
                c.call(f2mPrefix + "_sub", t9, t10, t9),

                // t10 = r.z + r.z;
                c.call(f2mPrefix + "_add", Rz, Rz, t10),

                // t6 = -t6;
                c.call(f2mPrefix + "_neg", t6, t6),

                // t1 = t6 + t6;
                c.call(f2mPrefix + "_add", t6, t6, t1),
            );
        }


        function buildPrepareG2() {
            const f = module.addFunction(prefix+ "_prepareG2");
            f.addParam("pQ", "i32");
            f.addParam("ppreQ", "i32");
            f.addLocal("pCoef", "i32");
            f.addLocal("i", "i32");

            const c = f.getCodeBuilder();


            const Q = c.getLocal("pQ");

            const pR = module.alloc(f2size*3);
            const R = c.i32_const(pR);

            const base = c.getLocal("ppreQ");

            f.addCode(
                c.call(g2mPrefix + "_normalize", Q, base),
                c.if(
                    c.call(g2mPrefix + "_isZero", base),
                    c.ret([])
                ),
                c.call(g2mPrefix + "_copy", base, R),
                c.setLocal("pCoef", c.i32_add(c.getLocal("ppreQ"), c.i32_const(f2size*3))),
            );

            f.addCode(
                c.setLocal("i", c.i32_const(ateLoopBitBytes.length-2)),
                c.block(c.loop(

                    c.call(prefix + "_prepDblStep", R, c.getLocal("pCoef")),
                    c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),

                    c.if(
                        c.i32_load8_s(c.getLocal("i"), pAteLoopBitBytes),
                        [
                            ...c.call(prefix + "_prepAddStep", R, base, c.getLocal("pCoef")),
                            ...c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),
                        ]
                    ),
                    c.br_if(1, c.i32_eqz ( c.getLocal("i") )),
                    c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );
        }


        function buildF6Mul1() {
            const f = module.addFunction(f6mPrefix+ "_mul1");
            f.addParam("pA", "i32");    // F6
            f.addParam("pC1", "i32");   // F2
            f.addParam("pR", "i32");    // F6

            const c = f.getCodeBuilder();

            const A_c0 = c.getLocal("pA");
            const A_c1 = c.i32_add(c.getLocal("pA"), c.i32_const(f1size*2));
            const A_c2 = c.i32_add(c.getLocal("pA"), c.i32_const(f1size*4));

            const c1  = c.getLocal("pC1");

            const t1 = c.getLocal("pR");
            const t2 = c.i32_add(c.getLocal("pR"), c.i32_const(f1size*2));
            const b_b = c.i32_add(c.getLocal("pR"), c.i32_const(f1size*4));

            const Ac0_Ac1 = c.i32_const(module.alloc(f1size*2));
            const Ac1_Ac2 = c.i32_const(module.alloc(f1size*2));

            f.addCode(

                c.call(f2mPrefix + "_add", A_c0, A_c1, Ac0_Ac1),
                c.call(f2mPrefix + "_add", A_c1, A_c2, Ac1_Ac2),

                // let b_b = self.c1 * c1;
                c.call(f2mPrefix + "_mul", A_c1, c1, b_b),

                // let t1 = (self.c1 + self.c2) * c1 - b_b;
                c.call(f2mPrefix + "_mul", Ac1_Ac2, c1, t1),
                c.call(f2mPrefix + "_sub", t1, b_b, t1),

                // let t1 = t1.mul_by_nonresidue();
                c.call(f2mPrefix + "_mulNR", t1, t1),

                // let t2 = (self.c0 + self.c1) * c1 - b_b;
                c.call(f2mPrefix + "_mul", Ac0_Ac1, c1, t2),
                c.call(f2mPrefix + "_sub", t2, b_b, t2),
            );
        }
        buildF6Mul1();

        function buildF6Mul01() {
            const f = module.addFunction(f6mPrefix+ "_mul01");
            f.addParam("pA", "i32");    // F6
            f.addParam("pC0", "i32");   // F2
            f.addParam("pC1", "i32");   // F2
            f.addParam("pR", "i32");    // F6

            const c = f.getCodeBuilder();

            const A_c0 = c.getLocal("pA");
            const A_c1 = c.i32_add(c.getLocal("pA"), c.i32_const(f1size*2));
            const A_c2 = c.i32_add(c.getLocal("pA"), c.i32_const(f1size*4));

            const c0  = c.getLocal("pC0");
            const c1  = c.getLocal("pC1");

            const t1 = c.getLocal("pR");
            const t2 = c.i32_add(c.getLocal("pR"), c.i32_const(f1size*2));
            const t3 = c.i32_add(c.getLocal("pR"), c.i32_const(f1size*4));

            const a_a = c.i32_const(module.alloc(f1size*2));
            const b_b = c.i32_const(module.alloc(f1size*2));
            const Ac0_Ac1 = c.i32_const(module.alloc(f1size*2));
            const Ac0_Ac2 = c.i32_const(module.alloc(f1size*2));

            f.addCode(
                // let a_a = self.c0 * c0;
                c.call(f2mPrefix + "_mul", A_c0, c0, a_a),

                // let b_b = self.c1 * c1;
                c.call(f2mPrefix + "_mul", A_c1, c1, b_b),


                c.call(f2mPrefix + "_add", A_c0, A_c1, Ac0_Ac1),
                c.call(f2mPrefix + "_add", A_c0, A_c2, Ac0_Ac2),

                // let t1 = (self.c1 + self.c2) * c1 - b_b;
                c.call(f2mPrefix + "_add", A_c1, A_c2, t1),
                c.call(f2mPrefix + "_mul", t1, c1, t1),
                c.call(f2mPrefix + "_sub", t1, b_b, t1),

                // let t1 = t1.mul_by_nonresidue() + a_a;
                c.call(f2mPrefix + "_mulNR", t1, t1),
                c.call(f2mPrefix + "_add", t1, a_a, t1),

                // let t2 = (c0 + c1) * (self.c0 + self.c1) - a_a - b_b;
                c.call(f2mPrefix + "_add", c0, c1, t2),
                c.call(f2mPrefix + "_mul", t2, Ac0_Ac1, t2),
                c.call(f2mPrefix + "_sub", t2, a_a, t2),
                c.call(f2mPrefix + "_sub", t2, b_b, t2),

                // let t3 = (self.c0 + self.c2) * c0 - a_a + b_b;
                c.call(f2mPrefix + "_mul", Ac0_Ac2, c0, t3),
                c.call(f2mPrefix + "_sub", t3, a_a, t3),
                c.call(f2mPrefix + "_add", t3, b_b, t3),


            );
        }
        buildF6Mul01();


        function buildF12Mul014() {

            const f = module.addFunction(ftmPrefix+ "_mul014");
            f.addParam("pA", "i32");    // F12
            f.addParam("pC0", "i32");   // F2
            f.addParam("pC1", "i32");   // F2
            f.addParam("pC4", "i32");   // F2
            f.addParam("pR", "i32");    // F12

            const c = f.getCodeBuilder();


            const A_c0 = c.getLocal("pA");
            const A_c1 = c.i32_add(c.getLocal("pA"), c.i32_const(f1size*6));

            const c0  = c.getLocal("pC0");
            const c1  = c.getLocal("pC1");
            const c4  = c.getLocal("pC4");

            const aa = c.i32_const(module.alloc(f1size*6));
            const bb = c.i32_const(module.alloc(f1size*6));
            const o = c.i32_const(module.alloc(f1size*2));

            const R_c0 = c.getLocal("pR");
            const R_c1 = c.i32_add(c.getLocal("pR"), c.i32_const(f1size*6));

            f.addCode(
                // let aa = self.c0.mul_by_01(c0, c1);
                c.call(f6mPrefix + "_mul01", A_c0, c0, c1, aa),

                // let bb = self.c1.mul_by_1(c4);
                c.call(f6mPrefix + "_mul1", A_c1, c4, bb),

                // let o = c1 + c4;
                c.call(f2mPrefix + "_add", c1, c4, o),

                // let c1 = self.c1 + self.c0;
                c.call(f6mPrefix + "_add", A_c1, A_c0, R_c1),

                // let c1 = c1.mul_by_01(c0, &o);
                c.call(f6mPrefix + "_mul01", R_c1, c0, o, R_c1),

                // let c1 = c1 - aa - bb;
                c.call(f6mPrefix + "_sub", R_c1, aa, R_c1),
                c.call(f6mPrefix + "_sub", R_c1, bb, R_c1),

                // let c0 = bb;
                c.call(f6mPrefix + "_copy", bb, R_c0),

                // let c0 = c0.mul_by_nonresidue();
                c.call(f6mPrefix + "_mulNR", R_c0, R_c0),

                // let c0 = c0 + aa;
                c.call(f6mPrefix + "_add", R_c0, aa, R_c0),
            );
        }
        buildF12Mul014();


        function buildELL() {
            const f = module.addFunction(prefix+ "_ell");
            f.addParam("pP", "i32");
            f.addParam("pCoefs", "i32");
            f.addParam("pF", "i32");

            const c = f.getCodeBuilder();

            const Px  = c.getLocal("pP");
            const Py  = c.i32_add(c.getLocal("pP"), c.i32_const(n8q));

            const F  = c.getLocal("pF");

            const coef0_0  = c.getLocal("pCoefs");
            const coef0_1  = c.i32_add(c.getLocal("pCoefs"), c.i32_const(f1size));
            const coef1_0  = c.i32_add(c.getLocal("pCoefs"), c.i32_const(f1size*2));
            const coef1_1  = c.i32_add(c.getLocal("pCoefs"), c.i32_const(f1size*3));
            const coef2  = c.i32_add(c.getLocal("pCoefs"), c.i32_const(f1size*4));

            const pc0 = module.alloc(f1size*2);
            const c0  = c.i32_const(pc0);
            const c0_c0 = c.i32_const(pc0);
            const c0_c1 = c.i32_const(pc0+f1size);

            const pc1 = module.alloc(f1size*2);
            const c1  = c.i32_const(pc1);
            const c1_c0 = c.i32_const(pc1);
            const c1_c1 = c.i32_const(pc1+f1size);
            f.addCode(
                //     let mut c0 = coeffs.0;
                //     let mut c1 = coeffs.1;
                //
                //    c0.c0 *= p.y;
                //    c0.c1 *= p.y;
                //
                //    c1.c0 *= p.x;
                //    c1.c1 *= p.x;
                //
                //     f.mul_by_014(&coeffs.2, &c1, &c0)

                c.call(f1mPrefix + "_mul", coef0_0, Py, c0_c0),
                c.call(f1mPrefix + "_mul", coef0_1, Py, c0_c1),
                c.call(f1mPrefix + "_mul", coef1_0, Px, c1_c0),
                c.call(f1mPrefix + "_mul", coef1_1, Px, c1_c1),

                c.call(ftmPrefix + "_mul014", F, coef2, c1, c0, F),

            );

        }
        buildELL();

        function buildMillerLoop() {
            const f = module.addFunction(prefix+ "_millerLoop");
            f.addParam("ppreP", "i32");
            f.addParam("ppreQ", "i32");
            f.addParam("r", "i32");
            f.addLocal("pCoef", "i32");
            f.addLocal("i", "i32");

            const c = f.getCodeBuilder();

            const preP = c.getLocal("ppreP");
            c.getLocal("ppreQ");

            const coefs  = c.getLocal("pCoef");

            const F = c.getLocal("r");


            f.addCode(
                c.call(ftmPrefix + "_one", F),

                c.if(
                    c.call(g1mPrefix + "_isZero", preP),
                    c.ret([])
                ),
                c.if(
                    c.call(g1mPrefix + "_isZero", c.getLocal("ppreQ")),
                    c.ret([])
                ),
                c.setLocal("pCoef", c.i32_add( c.getLocal("ppreQ"), c.i32_const(f2size*3))),

                c.setLocal("i", c.i32_const(ateLoopBitBytes.length-2)),
                c.block(c.loop(


                    c.call(prefix + "_ell", preP, coefs,  F),
                    c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),

                    c.if(
                        c.i32_load8_s(c.getLocal("i"), pAteLoopBitBytes),
                        [
                            ...c.call(prefix + "_ell", preP, coefs,  F),
                            ...c.setLocal("pCoef", c.i32_add(c.getLocal("pCoef"), c.i32_const(ateCoefSize))),
                        ]
                    ),
                    c.call(ftmPrefix + "_square", F, F),

                    c.br_if(1, c.i32_eq ( c.getLocal("i"), c.i32_const(1) )),
                    c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                )),
                c.call(prefix + "_ell", preP, coefs,  F),

            );


            {
                f.addCode(
                    c.call(ftmPrefix + "_conjugate", F, F),
                );
            }
        }


        function buildFrobeniusMap(n) {
            const F12 = [
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                ],
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760"), BigInteger("151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027")],
                    [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351"), BigInteger("0")],
                    [BigInteger("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530"), BigInteger("1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257")],
                    [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"), BigInteger("0")],
                    [BigInteger("3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557"), BigInteger("877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230")],
                    [BigInteger("4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786"), BigInteger("0")],
                    [BigInteger("151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027"), BigInteger("3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760")],
                    [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"), BigInteger("0")],
                    [BigInteger("1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257"), BigInteger("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530")],
                    [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437"), BigInteger("0")],
                    [BigInteger("877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230"), BigInteger("3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557")],
                ]
            ];

            const F6 = [
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("1"), BigInteger("0")],
                ],
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("0"), BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436")],
                    [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"), BigInteger("0")],
                    [BigInteger("0"), BigInteger("1")],
                    [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"), BigInteger("0")],
                    [BigInteger("0"), BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350")],
                ],
                [
                    [BigInteger("1"), BigInteger("0")],
                    [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437"), BigInteger("0")],
                    [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"), BigInteger("0")],
                    [BigInteger("4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786"), BigInteger("0")],
                    [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"), BigInteger("0")],
                    [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351"), BigInteger("0")],
                ]
            ];

            const f = module.addFunction(ftmPrefix + "_frobeniusMap"+n);
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            for (let i=0; i<6; i++) {
                const X = (i==0) ? c.getLocal("x") : c.i32_add(c.getLocal("x"), c.i32_const(i*f2size));
                const Xc0 = X;
                const Xc1 = c.i32_add(c.getLocal("x"), c.i32_const(i*f2size + f1size));
                const R = (i==0) ? c.getLocal("r") : c.i32_add(c.getLocal("r"), c.i32_const(i*f2size));
                const Rc0 = R;
                const Rc1 = c.i32_add(c.getLocal("r"), c.i32_const(i*f2size + f1size));
                const coef = mul2(F12[Math.floor(i/3)][n%12] , F6[i%3][n%6]);
                const pCoef = module.alloc([
                    ...utils$3.bigInt2BytesLE(toMontgomery(coef[0]), n8q),
                    ...utils$3.bigInt2BytesLE(toMontgomery(coef[1]), n8q),
                ]);
                if (n%2 == 1) {
                    f.addCode(
                        c.call(f1mPrefix + "_copy", Xc0, Rc0),
                        c.call(f1mPrefix + "_neg", Xc1, Rc1),
                        c.call(f2mPrefix + "_mul", R, c.i32_const(pCoef), R),
                    );
                } else {
                    f.addCode(c.call(f2mPrefix + "_mul", X, c.i32_const(pCoef), R));
                }
            }

            function mul2(a, b) {
                const ac0 = BigInteger(a[0]);
                const ac1 = BigInteger(a[1]);
                const bc0 = BigInteger(b[0]);
                const bc1 = BigInteger(b[1]);
                const res = [
                    ac0.times(bc0).minus(  ac1.times(bc1)  ).mod(q),
                    ac0.times(bc1).add(  ac1.times(bc0)  ).mod(q),
                ];
                if (res[0].isNegative()) res[0] = res[0].add(q);
                return res;
            }

        }


        function buildCyclotomicSquare() {
            const f = module.addFunction(prefix+ "__cyclotomicSquare");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const x0 = c.getLocal("x");
            const x4 = c.i32_add(c.getLocal("x"), c.i32_const(f2size));
            const x3 = c.i32_add(c.getLocal("x"), c.i32_const(2*f2size));
            const x2 = c.i32_add(c.getLocal("x"), c.i32_const(3*f2size));
            const x1 = c.i32_add(c.getLocal("x"), c.i32_const(4*f2size));
            const x5 = c.i32_add(c.getLocal("x"), c.i32_const(5*f2size));

            const r0 = c.getLocal("r");
            const r4 = c.i32_add(c.getLocal("r"), c.i32_const(f2size));
            const r3 = c.i32_add(c.getLocal("r"), c.i32_const(2*f2size));
            const r2 = c.i32_add(c.getLocal("r"), c.i32_const(3*f2size));
            const r1 = c.i32_add(c.getLocal("r"), c.i32_const(4*f2size));
            const r5 = c.i32_add(c.getLocal("r"), c.i32_const(5*f2size));

            const t0 = c.i32_const(module.alloc(f2size));
            const t1 = c.i32_const(module.alloc(f2size));
            const t2 = c.i32_const(module.alloc(f2size));
            const t3 = c.i32_const(module.alloc(f2size));
            const t4 = c.i32_const(module.alloc(f2size));
            const t5 = c.i32_const(module.alloc(f2size));
            const tmp = c.i32_const(module.alloc(f2size));
            const AUX = c.i32_const(module.alloc(f2size));


            f.addCode(

    //            c.call(ftmPrefix + "_square", x0, r0),

                //    // t0 + t1*y = (z0 + z1*y)^2 = a^2
                //    tmp = z0 * z1;
                //    t0 = (z0 + z1) * (z0 + my_Fp6::non_residue * z1) - tmp - my_Fp6::non_residue * tmp;
                //    t1 = tmp + tmp;
                c.call(f2mPrefix + "_mul", x0, x1, tmp),
                c.call(f2mPrefix + "_mulNR", x1, t0),
                c.call(f2mPrefix + "_add", x0, t0, t0),
                c.call(f2mPrefix + "_add", x0, x1, AUX),
                c.call(f2mPrefix + "_mul", AUX, t0, t0),
                c.call(f2mPrefix + "_mulNR", tmp, AUX),
                c.call(f2mPrefix + "_add", tmp, AUX, AUX),
                c.call(f2mPrefix + "_sub", t0, AUX, t0),
                c.call(f2mPrefix + "_add", tmp, tmp, t1),

                //  // t2 + t3*y = (z2 + z3*y)^2 = b^2
                //  tmp = z2 * z3;
                //  t2 = (z2 + z3) * (z2 + my_Fp6::non_residue * z3) - tmp - my_Fp6::non_residue * tmp;
                //  t3 = tmp + tmp;
                c.call(f2mPrefix + "_mul", x2, x3, tmp),
                c.call(f2mPrefix + "_mulNR", x3, t2),
                c.call(f2mPrefix + "_add", x2, t2, t2),
                c.call(f2mPrefix + "_add", x2, x3, AUX),
                c.call(f2mPrefix + "_mul", AUX, t2, t2),
                c.call(f2mPrefix + "_mulNR", tmp, AUX),
                c.call(f2mPrefix + "_add", tmp, AUX, AUX),
                c.call(f2mPrefix + "_sub", t2, AUX, t2),
                c.call(f2mPrefix + "_add", tmp, tmp, t3),

                //  // t4 + t5*y = (z4 + z5*y)^2 = c^2
                //  tmp = z4 * z5;
                //  t4 = (z4 + z5) * (z4 + my_Fp6::non_residue * z5) - tmp - my_Fp6::non_residue * tmp;
                //  t5 = tmp + tmp;
                c.call(f2mPrefix + "_mul", x4, x5, tmp),
                c.call(f2mPrefix + "_mulNR", x5, t4),
                c.call(f2mPrefix + "_add", x4, t4, t4),
                c.call(f2mPrefix + "_add", x4, x5, AUX),
                c.call(f2mPrefix + "_mul", AUX, t4, t4),
                c.call(f2mPrefix + "_mulNR", tmp, AUX),
                c.call(f2mPrefix + "_add", tmp, AUX, AUX),
                c.call(f2mPrefix + "_sub", t4, AUX, t4),
                c.call(f2mPrefix + "_add", tmp, tmp, t5),

                // For A
                // z0 = 3 * t0 - 2 * z0
                c.call(f2mPrefix + "_sub", t0, x0, r0),
                c.call(f2mPrefix + "_add", r0, r0, r0),
                c.call(f2mPrefix + "_add", t0, r0, r0),
                // z1 = 3 * t1 + 2 * z1
                c.call(f2mPrefix + "_add", t1, x1, r1),
                c.call(f2mPrefix + "_add", r1, r1, r1),
                c.call(f2mPrefix + "_add", t1, r1, r1),

                // For B
                // z2 = 3 * (xi * t5) + 2 * z2
                c.call(f2mPrefix + "_mul", t5, c.i32_const(pBls12381Twist), AUX),
                c.call(f2mPrefix + "_add", AUX, x2, r2),
                c.call(f2mPrefix + "_add", r2, r2, r2),
                c.call(f2mPrefix + "_add", AUX, r2, r2),
                // z3 = 3 * t4 - 2 * z3
                c.call(f2mPrefix + "_sub", t4, x3, r3),
                c.call(f2mPrefix + "_add", r3, r3, r3),
                c.call(f2mPrefix + "_add", t4, r3, r3),

                // For C
                // z4 = 3 * t2 - 2 * z4
                c.call(f2mPrefix + "_sub", t2, x4, r4),
                c.call(f2mPrefix + "_add", r4, r4, r4),
                c.call(f2mPrefix + "_add", t2, r4, r4),
                // z5 = 3 * t3 + 2 * z5
                c.call(f2mPrefix + "_add", t3, x5, r5),
                c.call(f2mPrefix + "_add", r5, r5, r5),
                c.call(f2mPrefix + "_add", t3, r5, r5),

            );
        }


        function buildCyclotomicExp(exponent, isExpNegative, fnName) {
            const exponentNafBytes = naf(exponent).map( (b) => (b==-1 ? 0xFF: b) );
            const pExponentNafBytes = module.alloc(exponentNafBytes);
            // const pExponent = module.alloc(utils.bigInt2BytesLE(exponent, n8));

            const f = module.addFunction(prefix+ "__cyclotomicExp_"+fnName);
            f.addParam("x", "i32");
            f.addParam("r", "i32");
            f.addLocal("bit", "i32");
            f.addLocal("i", "i32");

            const c = f.getCodeBuilder();

            const x = c.getLocal("x");

            const res = c.getLocal("r");

            const inverse = c.i32_const(module.alloc(ftsize));


            f.addCode(
    //            c.call(ftmPrefix + "_exp", x, c.i32_const(pExponent), c.i32_const(32), res),

                c.call(ftmPrefix + "_conjugate", x, inverse),
                c.call(ftmPrefix + "_one", res),

                c.if(
                    c.teeLocal("bit", c.i32_load8_s(c.i32_const(exponentNafBytes.length-1), pExponentNafBytes)),
                    c.if(
                        c.i32_eq(
                            c.getLocal("bit"),
                            c.i32_const(1)
                        ),
                        c.call(ftmPrefix + "_mul", res, x, res),
                        c.call(ftmPrefix + "_mul", res, inverse, res),
                    )
                ),

                c.setLocal("i", c.i32_const(exponentNafBytes.length-2)),
                c.block(c.loop(
    //                c.call(ftmPrefix + "_square", res, res),
                    c.call(prefix + "__cyclotomicSquare", res, res),
                    c.if(
                        c.teeLocal("bit", c.i32_load8_s(c.getLocal("i"), pExponentNafBytes)),
                        c.if(
                            c.i32_eq(
                                c.getLocal("bit"),
                                c.i32_const(1)
                            ),
                            c.call(ftmPrefix + "_mul", res, x, res),
                            c.call(ftmPrefix + "_mul", res, inverse, res),
                        )
                    ),
                    c.br_if(1, c.i32_eqz ( c.getLocal("i") )),
                    c.setLocal("i", c.i32_sub(c.getLocal("i"), c.i32_const(1))),
                    c.br(0)
                ))
            );

            if (isExpNegative) {
                f.addCode(
                    c.call(ftmPrefix + "_conjugate", res, res),
                );
            }

        }

        function buildFinalExponentiation() {
            buildCyclotomicSquare();
            buildCyclotomicExp(finalExpZ, finalExpIsNegative, "w0");

            const f = module.addFunction(prefix+ "_finalExponentiation");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const elt = c.getLocal("x");
            const res = c.getLocal("r");
            const t0 = c.i32_const(module.alloc(ftsize));
            const t1 = c.i32_const(module.alloc(ftsize));
            const t2 = c.i32_const(module.alloc(ftsize));
            const t3 = c.i32_const(module.alloc(ftsize));
            const t4 = c.i32_const(module.alloc(ftsize));
            const t5 = c.i32_const(module.alloc(ftsize));
            const t6 = c.i32_const(module.alloc(ftsize));

            f.addCode(

                // let mut t0 = f.frobenius_map(6)
                c.call(ftmPrefix + "_frobeniusMap6", elt, t0),

                // let t1 = f.invert()
                c.call(ftmPrefix + "_inverse", elt, t1),

                // let mut t2 = t0 * t1;
                c.call(ftmPrefix + "_mul", t0, t1, t2),

                // t1 = t2.clone();
                c.call(ftmPrefix + "_copy", t2, t1),

                // t2 = t2.frobenius_map().frobenius_map();
                c.call(ftmPrefix + "_frobeniusMap2", t2, t2),

                // t2 *= t1;
                c.call(ftmPrefix + "_mul", t2, t1, t2),


                // t1 = cyclotomic_square(t2).conjugate();
                c.call(prefix + "__cyclotomicSquare", t2, t1),
                c.call(ftmPrefix + "_conjugate", t1, t1),

                // let mut t3 = cycolotomic_exp(t2);
                c.call(prefix + "__cyclotomicExp_w0", t2, t3),

                // let mut t4 = cyclotomic_square(t3);
                c.call(prefix + "__cyclotomicSquare", t3, t4),

                // let mut t5 = t1 * t3;
                c.call(ftmPrefix + "_mul", t1, t3, t5),

                // t1 = cycolotomic_exp(t5);
                c.call(prefix + "__cyclotomicExp_w0", t5, t1),

                // t0 = cycolotomic_exp(t1);
                c.call(prefix + "__cyclotomicExp_w0", t1, t0),

                // let mut t6 = cycolotomic_exp(t0);
                c.call(prefix + "__cyclotomicExp_w0", t0, t6),

                // t6 *= t4;
                c.call(ftmPrefix + "_mul", t6, t4, t6),

                // t4 = cycolotomic_exp(t6);
                c.call(prefix + "__cyclotomicExp_w0", t6, t4),

                // t5 = t5.conjugate();
                c.call(ftmPrefix + "_conjugate", t5, t5),

                // t4 *= t5 * t2;
                c.call(ftmPrefix + "_mul", t4, t5, t4),
                c.call(ftmPrefix + "_mul", t4, t2, t4),

                // t5 = t2.conjugate();
                c.call(ftmPrefix + "_conjugate", t2, t5),

                // t1 *= t2;
                c.call(ftmPrefix + "_mul", t1, t2, t1),

                // t1 = t1.frobenius_map().frobenius_map().frobenius_map();
                c.call(ftmPrefix + "_frobeniusMap3", t1, t1),

                // t6 *= t5;
                c.call(ftmPrefix + "_mul", t6, t5, t6),

                // t6 = t6.frobenius_map();
                c.call(ftmPrefix + "_frobeniusMap1", t6, t6),

                // t3 *= t0;
                c.call(ftmPrefix + "_mul", t3, t0, t3),

                // t3 = t3.frobenius_map().frobenius_map();
                c.call(ftmPrefix + "_frobeniusMap2", t3, t3),

                // t3 *= t1;
                c.call(ftmPrefix + "_mul", t3, t1, t3),

                // t3 *= t6;
                c.call(ftmPrefix + "_mul", t3, t6, t3),

                // f = t3 * t4;
                c.call(ftmPrefix + "_mul", t3, t4, res),

            );
        }


        function buildFinalExponentiationOld() {
            const f = module.addFunction(prefix+ "_finalExponentiationOld");
            f.addParam("x", "i32");
            f.addParam("r", "i32");

            const exponent = BigInteger("322277361516934140462891564586510139908379969514828494218366688025288661041104682794998680497580008899973249814104447692778988208376779573819485263026159588510513834876303014016798809919343532899164848730280942609956670917565618115867287399623286813270357901731510188149934363360381614501334086825442271920079363289954510565375378443704372994881406797882676971082200626541916413184642520269678897559532260949334760604962086348898118982248842634379637598665468817769075878555493752214492790122785850202957575200176084204422751485957336465472324810982833638490904279282696134323072515220044451592646885410572234451732790590013479358343841220074174848221722017083597872017638514103174122784843925578370430843522959600095676285723737049438346544753168912974976791528535276317256904336520179281145394686565050419250614107803233314658825463117900250701199181529205942363159325765991819433914303908860460720581408201373164047773794825411011922305820065611121544561808414055302212057471395719432072209245600258134364584636810093520285711072578721435517884103526483832733289802426157301542744476740008494780363354305116978805620671467071400711358839553375340724899735460480144599782014906586543813292157922220645089192130209334926661588737007768565838519456601560804957985667880395221049249803753582637708560");

            const pExponent = module.alloc(utils$3.bigInt2BytesLE( exponent, 544 ));

            const c = f.getCodeBuilder();

            f.addCode(
                c.call(ftmPrefix + "_exp", c.getLocal("x"), c.i32_const(pExponent), c.i32_const(544), c.getLocal("r")),
            );
        }


        const pPreP = module.alloc(prePSize);
        const pPreQ = module.alloc(preQSize);

        function buildPairingEquation(nPairings) {

            const f = module.addFunction(prefix+ "_pairingEq"+nPairings);
            for (let i=0; i<nPairings; i++) {
                f.addParam("p_"+i, "i32");
                f.addParam("q_"+i, "i32");
            }
            f.addParam("c", "i32");
            f.setReturnType("i32");


            const c = f.getCodeBuilder();

            const resT = c.i32_const(module.alloc(ftsize));
            const auxT = c.i32_const(module.alloc(ftsize));

            f.addCode(c.call(ftmPrefix + "_one", resT ));

            for (let i=0; i<nPairings; i++) {

                f.addCode(c.call(prefix + "_prepareG1", c.getLocal("p_"+i), c.i32_const(pPreP) ));
                f.addCode(c.call(prefix + "_prepareG2", c.getLocal("q_"+i), c.i32_const(pPreQ) ));

                // Checks
                f.addCode(
                    c.if(
                        c.i32_eqz(c.call(g1mPrefix + "_inGroupAffine", c.i32_const(pPreP))),
                        c.ret(c.i32_const(0))
                    ),
                    c.if(
                        c.i32_eqz(c.call(g2mPrefix + "_inGroupAffine", c.i32_const(pPreQ))),
                        c.ret(c.i32_const(0))
                    )
                );

                f.addCode(c.call(prefix + "_millerLoop", c.i32_const(pPreP), c.i32_const(pPreQ), auxT ));

                f.addCode(c.call(ftmPrefix + "_mul", resT, auxT, resT ));
            }

            f.addCode(c.call(prefix + "_finalExponentiation", resT, resT ));

            f.addCode(c.call(ftmPrefix + "_eq", resT, c.getLocal("c")));
        }


        function buildPairing() {

            const f = module.addFunction(prefix+ "_pairing");
            f.addParam("p", "i32");
            f.addParam("q", "i32");
            f.addParam("r", "i32");

            const c = f.getCodeBuilder();

            const resT = c.i32_const(module.alloc(ftsize));

            f.addCode(c.call(prefix + "_prepareG1", c.getLocal("p"), c.i32_const(pPreP) ));
            f.addCode(c.call(prefix + "_prepareG2", c.getLocal("q"), c.i32_const(pPreQ) ));
            f.addCode(c.call(prefix + "_millerLoop", c.i32_const(pPreP), c.i32_const(pPreQ), resT ));
            f.addCode(c.call(prefix + "_finalExponentiation", resT, c.getLocal("r") ));
        }


        function buildInGroupG2() {
            const f = module.addFunction(g2mPrefix+ "_inGroupAffine");
            f.addParam("p", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const WINV = [
                BigInteger("2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279894"),
                BigInteger("2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279893")
            ];

            const FROB2X = BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436");
            const FROB3Y = [
                BigInteger("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530"),
                BigInteger("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530")
            ];

            const wInv = c.i32_const(module.alloc([
                ...utils$3.bigInt2BytesLE(toMontgomery(WINV[0]), n8q),
                ...utils$3.bigInt2BytesLE(toMontgomery(WINV[1]), n8q),
            ]));

            const frob2X = c.i32_const(module.alloc(utils$3.bigInt2BytesLE(toMontgomery(FROB2X), n8q)));
            const frob3Y = c.i32_const(module.alloc([
                ...utils$3.bigInt2BytesLE(toMontgomery(FROB3Y[0]), n8q),
                ...utils$3.bigInt2BytesLE(toMontgomery(FROB3Y[1]), n8q),
            ]));

            const z = c.i32_const(module.alloc(utils$3.bigInt2BytesLE(finalExpZ, 8)));

            const px = c.getLocal("p");
            const py = c.i32_add(c.getLocal("p"), c.i32_const(f2size));

            const aux = c.i32_const(module.alloc(f1size));

            const x_winv = c.i32_const(module.alloc(f2size));
            const y_winv = c.i32_const(module.alloc(f2size));
            const pf2 = module.alloc(f2size*2);
            const f2 = c.i32_const(pf2);
            const f2x = c.i32_const(pf2);
            const f2x_c1 = c.i32_const(pf2);
            const f2x_c2 = c.i32_const(pf2+f1size);
            const f2y = c.i32_const(pf2+f2size);
            const f2y_c1 = c.i32_const(pf2+f2size);
            const f2y_c2 = c.i32_const(pf2+f2size+f1size);
            const pf3 = module.alloc(f2size*3);
            const f3 = c.i32_const(pf3);
            const f3x = c.i32_const(pf3);
            const f3x_c1 = c.i32_const(pf3);
            const f3x_c2 = c.i32_const(pf3+f1size);
            const f3y = c.i32_const(pf3+f2size);
            const f3y_c1 = c.i32_const(pf3+f2size);
            const f3y_c2 = c.i32_const(pf3+f2size+f1size);
            const f3z = c.i32_const(pf3+f2size*2);


            f.addCode(
                c.if(
                    c.call(g2mPrefix + "_isZeroAffine", c.getLocal("p")),
                    c.ret( c.i32_const(1)),
                ),
                c.if(
                    c.i32_eqz(c.call(g2mPrefix + "_inCurveAffine", c.getLocal("p"))),
                    c.ret( c.i32_const(0)),
                ),
                c.call(f2mPrefix + "_mul", px, wInv, x_winv),
                c.call(f2mPrefix + "_mul", py, wInv, y_winv),

                c.call(f2mPrefix + "_mul1", x_winv, frob2X, f2x),
                c.call(f2mPrefix + "_neg", y_winv, f2y),

                c.call(f2mPrefix + "_neg", x_winv, f3x),
                c.call(f2mPrefix + "_mul", y_winv, frob3Y, f3y),

                c.call(f1mPrefix + "_sub", f2x_c1, f2x_c2, aux),
                c.call(f1mPrefix + "_add", f2x_c1, f2x_c2, f2x_c2),
                c.call(f1mPrefix + "_copy", aux, f2x_c1),

                c.call(f1mPrefix + "_sub", f2y_c1, f2y_c2, aux),
                c.call(f1mPrefix + "_add", f2y_c1, f2y_c2, f2y_c2),
                c.call(f1mPrefix + "_copy", aux, f2y_c1),

                c.call(f1mPrefix + "_add", f3x_c1, f3x_c2, aux),
                c.call(f1mPrefix + "_sub", f3x_c1, f3x_c2, f3x_c2),
                c.call(f1mPrefix + "_copy", aux, f3x_c1),

                c.call(f1mPrefix + "_sub", f3y_c2, f3y_c1, aux),
                c.call(f1mPrefix + "_add", f3y_c1, f3y_c2, f3y_c2),
                c.call(f1mPrefix + "_copy", aux, f3y_c1),

                c.call(f2mPrefix + "_one", f3z),

                c.call(g2mPrefix + "_timesScalar", f3, z, c.i32_const(8), f3),
                c.call(g2mPrefix + "_addMixed", f3, f2, f3),

                c.ret(
                    c.call(g2mPrefix + "_eqMixed", f3, c.getLocal("p"))
                )
            );

            const fInGroup = module.addFunction(g2mPrefix + "_inGroup");
            fInGroup.addParam("pIn", "i32");
            fInGroup.setReturnType("i32");

            const c2 = fInGroup.getCodeBuilder();

            const aux2 = c2.i32_const(module.alloc(f2size*2));

            fInGroup.addCode(
                c2.call(g2mPrefix + "_toAffine", c2.getLocal("pIn"), aux2),

                c2.ret(
                    c2.call(g2mPrefix + "_inGroupAffine", aux2),
                )
            );

        }

        function buildInGroupG1() {
            const f = module.addFunction(g1mPrefix+ "_inGroupAffine");
            f.addParam("p", "i32");
            f.setReturnType("i32");

            const c = f.getCodeBuilder();

            const BETA = BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436");
            const BETA2 = BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350");
            const Z2M1D3 = finalExpZ.times(finalExpZ).minus(BigInteger.one).divide(BigInteger(3));

            const beta = c.i32_const(module.alloc(utils$3.bigInt2BytesLE(toMontgomery(BETA), n8q)));
            const beta2 = c.i32_const(module.alloc(utils$3.bigInt2BytesLE(toMontgomery(BETA2), n8q)));

            const z2m1d3 = c.i32_const(module.alloc(utils$3.bigInt2BytesLE(Z2M1D3, 16)));


            const px = c.getLocal("p");
            const py = c.i32_add(c.getLocal("p"), c.i32_const(f1size));

            const psp = module.alloc(f1size*3);
            const sp = c.i32_const(psp);
            const spx = c.i32_const(psp);
            const spy = c.i32_const(psp+f1size);
            c.i32_const(psp+2*f1size);

            const ps2p = module.alloc(f1size*2);
            const s2p = c.i32_const(ps2p);
            const s2px = c.i32_const(ps2p);
            const s2py = c.i32_const(ps2p+f1size);

            f.addCode(
                c.if(
                    c.call(g1mPrefix + "_isZeroAffine", c.getLocal("p")),
                    c.ret( c.i32_const(1)),
                ),
                c.if(
                    c.i32_eqz(c.call(g1mPrefix + "_inCurveAffine", c.getLocal("p"))),
                    c.ret( c.i32_const(0)),
                ),

                c.call(f1mPrefix + "_mul", px, beta, spx),
                c.call(f1mPrefix + "_copy", py, spy),

                c.call(f1mPrefix + "_mul", px, beta2, s2px),
                c.call(f1mPrefix + "_copy", py, s2py),


                c.call(g1mPrefix + "_doubleAffine", sp, sp),
                c.call(g1mPrefix + "_subMixed", sp, c.getLocal("p"), sp),
                c.call(g1mPrefix + "_subMixed", sp, s2p, sp),

                c.call(g1mPrefix + "_timesScalar", sp, z2m1d3, c.i32_const(16), sp),

                c.ret(
                    c.call(g1mPrefix + "_eqMixed", sp, s2p)
                )

            );

            const fInGroup = module.addFunction(g1mPrefix + "_inGroup");
            fInGroup.addParam("pIn", "i32");
            fInGroup.setReturnType("i32");

            const c2 = fInGroup.getCodeBuilder();

            const aux2 = c2.i32_const(module.alloc(f1size*2));

            fInGroup.addCode(
                c2.call(g1mPrefix + "_toAffine", c2.getLocal("pIn"), aux2),

                c2.ret(
                    c2.call(g1mPrefix + "_inGroupAffine", aux2),
                )
            );
        }

        for (let i=0; i<10; i++) {
            buildFrobeniusMap(i);
            module.exportFunction(ftmPrefix + "_frobeniusMap"+i);
        }


        buildInGroupG1();
        buildInGroupG2();

        buildPrepAddStep();
        buildPrepDoubleStep();

        buildPrepareG1();
        buildPrepareG2();

        buildMillerLoop();

        buildFinalExponentiationOld();
        buildFinalExponentiation();

        for (let i=1; i<=5; i++) {
            buildPairingEquation(i);
            module.exportFunction(prefix + "_pairingEq"+i);
        }

        buildPairing();

        module.exportFunction(prefix + "_pairing");


        module.exportFunction(prefix + "_prepareG1");
        module.exportFunction(prefix + "_prepareG2");
        module.exportFunction(prefix + "_millerLoop");
        module.exportFunction(prefix + "_finalExponentiation");
        module.exportFunction(prefix + "_finalExponentiationOld");
        module.exportFunction(prefix + "__cyclotomicSquare");
        module.exportFunction(prefix + "__cyclotomicExp_w0");

        module.exportFunction(f6mPrefix + "_mul1");
        module.exportFunction(f6mPrefix + "_mul01");
        module.exportFunction(ftmPrefix + "_mul014");

        module.exportFunction(g1mPrefix + "_inGroupAffine");
        module.exportFunction(g1mPrefix + "_inGroup");
        module.exportFunction(g2mPrefix + "_inGroupAffine");
        module.exportFunction(g2mPrefix + "_inGroup");

        // console.log(module.functionIdxByName);
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    // module.exports.bn128_wasm = require("./build/bn128_wasm.js");
    // module.exports.bls12381_wasm = require("./build/bls12381_wasm.js");
    // module.exports.mnt6753_wasm = require("./build/mnt6753_wasm.js");

    var buildBn128$1 = build_bn128;
    var buildBls12381$1 = build_bls12381;

    /* global BigInt */

    function stringifyBigInts$6(o) {
        if ((typeof(o) == "bigint") || o.eq !== undefined)  {
            return o.toString(10);
        } else if (o instanceof Uint8Array) {
            return fromRprLE(o, 0);
        } else if (Array.isArray(o)) {
            return o.map(stringifyBigInts$6);
        } else if (typeof o == "object") {
            const res = {};
            const keys = Object.keys(o);
            keys.forEach( (k) => {
                res[k] = stringifyBigInts$6(o[k]);
            });
            return res;
        } else {
            return o;
        }
    }

    function unstringifyBigInts$a(o) {
        if ((typeof(o) == "string") && (/^[0-9]+$/.test(o) ))  {
            return BigInt(o);
        } else if ((typeof(o) == "string") && (/^0x[0-9a-fA-F]+$/.test(o) ))  {
            return BigInt(o);
        } else if (Array.isArray(o)) {
            return o.map(unstringifyBigInts$a);
        } else if (typeof o == "object") {
            if (o===null) return null;
            const res = {};
            const keys = Object.keys(o);
            keys.forEach( (k) => {
                res[k] = unstringifyBigInts$a(o[k]);
            });
            return res;
        } else {
            return o;
        }
    }

    function beBuff2int$2(buff) {
        let res = BigInt(0);
        let i = buff.length;
        let offset = 0;
        const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
        while (i>0) {
            if (i >= 4) {
                i -= 4;
                res += BigInt(buffV.getUint32(i)) << BigInt(offset*8);
                offset += 4;
            } else if (i >= 2) {
                i -= 2;
                res += BigInt(buffV.getUint16(i)) << BigInt(offset*8);
                offset += 2;
            } else {
                i -= 1;
                res += BigInt(buffV.getUint8(i)) << BigInt(offset*8);
                offset += 1;
            }
        }
        return res;
    }

    function beInt2Buff$2(n, len) {
        let r = n;
        const buff = new Uint8Array(len);
        const buffV = new DataView(buff.buffer);
        let o = len;
        while (o > 0) {
            if (o-4 >= 0) {
                o -= 4;
                buffV.setUint32(o, Number(r & BigInt(0xFFFFFFFF)));
                r = r >> BigInt(32);
            } else if (o-2 >= 0) {
                o -= 2;
                buffV.setUint16(o, Number(r & BigInt(0xFFFF)));
                r = r >> BigInt(16);
            } else {
                o -= 1;
                buffV.setUint8(o, Number(r & BigInt(0xFF)));
                r = r >> BigInt(8);
            }
        }
        if (r) {
            throw new Error("Number does not fit in this length");
        }
        return buff;
    }


    function leBuff2int$2(buff) {
        let res = BigInt(0);
        let i = 0;
        const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
        while (i<buff.length) {
            if (i + 4 <= buff.length) {
                res += BigInt(buffV.getUint32(i, true)) << BigInt( i*8);
                i += 4;
            } else if (i + 4 <= buff.length) {
                res += BigInt(buffV.getUint16(i, true)) << BigInt( i*8);
                i += 2;
            } else {
                res += BigInt(buffV.getUint8(i, true)) << BigInt( i*8);
                i += 1;
            }
        }
        return res;
    }

    function leInt2Buff$2(n, len) {
        let r = n;
        if (typeof len === "undefined") {
            len = Math.floor((bitLength(n) - 1) / 8) +1;
            if (len==0) len = 1;
        }
        const buff = new Uint8Array(len);
        const buffV = new DataView(buff.buffer);
        let o = 0;
        while (o < len) {
            if (o+4 <= len) {
                buffV.setUint32(o, Number(r & BigInt(0xFFFFFFFF)), true );
                o += 4;
                r = r >> BigInt(32);
            } else if (o+2 <= len) {
                buffV.setUint16(Number(o, r & BigInt(0xFFFF)), true );
                o += 2;
                r = r >> BigInt(16);
            } else {
                buffV.setUint8(Number(o, r & BigInt(0xFF)), true );
                o += 1;
                r = r >> BigInt(8);
            }
        }
        if (r) {
            throw new Error("Number does not fit in this length");
        }
        return buff;
    }


    function stringifyFElements$1(F, o) {
        if ((typeof(o) == "bigint") || o.eq !== undefined)  {
            return o.toString(10);
        } else if (o instanceof Uint8Array) {
            return F.toString(F.e(o));
        } else if (Array.isArray(o)) {
            return o.map(stringifyFElements$1.bind(this,F));
        } else if (typeof o == "object") {
            const res = {};
            const keys = Object.keys(o);
            keys.forEach( (k) => {
                res[k] = stringifyFElements$1(F, o[k]);
            });
            return res;
        } else {
            return o;
        }
    }


    function unstringifyFElements$1(F, o) {
        if ((typeof(o) == "string") && (/^[0-9]+$/.test(o) ))  {
            return F.e(o);
        } else if ((typeof(o) == "string") && (/^0x[0-9a-fA-F]+$/.test(o) ))  {
            return F.e(o);
        } else if (Array.isArray(o)) {
            return o.map(unstringifyFElements$1.bind(this,F));
        } else if (typeof o == "object") {
            if (o===null) return null;
            const res = {};
            const keys = Object.keys(o);
            keys.forEach( (k) => {
                res[k] = unstringifyFElements$1(F, o[k]);
            });
            return res;
        } else {
            return o;
        }
    }

    var utils_native = /*#__PURE__*/Object.freeze({
        __proto__: null,
        stringifyBigInts: stringifyBigInts$6,
        unstringifyBigInts: unstringifyBigInts$a,
        beBuff2int: beBuff2int$2,
        beInt2Buff: beInt2Buff$2,
        leBuff2int: leBuff2int$2,
        leInt2Buff: leInt2Buff$2,
        stringifyFElements: stringifyFElements$1,
        unstringifyFElements: unstringifyFElements$1
    });

    function stringifyBigInts$5(o) {
        if ((typeof(o) == "bigint") || o.eq !== undefined)  {
            return o.toString(10);
        } else if (Array.isArray(o)) {
            return o.map(stringifyBigInts$5);
        } else if (typeof o == "object") {
            const res = {};
            const keys = Object.keys(o);
            keys.forEach( (k) => {
                res[k] = stringifyBigInts$5(o[k]);
            });
            return res;
        } else {
            return o;
        }
    }

    function unstringifyBigInts$9(o) {
        if ((typeof(o) == "string") && (/^[0-9]+$/.test(o) ))  {
            return BigInteger(o);
        } else if ((typeof(o) == "string") && (/^0x[0-9a-fA-F]+$/.test(o) ))  {
            return BigInteger(o);
        } else if (Array.isArray(o)) {
            return o.map(unstringifyBigInts$9);
        } else if (typeof o == "object") {
            const res = {};
            const keys = Object.keys(o);
            keys.forEach( (k) => {
                res[k] = unstringifyBigInts$9(o[k]);
            });
            return res;
        } else {
            return o;
        }
    }

    function beBuff2int$1(buff) {
        let res = BigInteger.zero;
        for (let i=0; i<buff.length; i++) {
            const n = BigInteger(buff[buff.length - i - 1]);
            res = res.add(n.shiftLeft(i*8));
        }
        return res;
    }

    function beInt2Buff$1(n, len) {
        let r = n;
        let o =len-1;
        const buff = new Uint8Array(len);
        while ((r.gt(BigInteger.zero))&&(o>=0)) {
            let c = Number(r.and(BigInteger("255")));
            buff[o] = c;
            o--;
            r = r.shiftRight(8);
        }
        if (!r.eq(BigInteger.zero)) {
            throw new Error("Number does not fit in this length");
        }
        return buff;
    }


    function leBuff2int$1 (buff) {
        let res = BigInteger.zero;
        for (let i=0; i<buff.length; i++) {
            const n = BigInteger(buff[i]);
            res = res.add(n.shiftLeft(i*8));
        }
        return res;
    }

    function leInt2Buff$1(n, len) {
        let r = n;
        let o =0;
        const buff = new Uint8Array(len);
        while ((r.gt(BigInteger.zero))&&(o<buff.length)) {
            let c = Number(r.and(BigInteger(255)));
            buff[o] = c;
            o++;
            r = r.shiftRight(8);
        }
        if (!r.eq(BigInteger.zero)) {
            throw new Error("Number does not fit in this length");
        }
        return buff;
    }

    var utils_bigint = /*#__PURE__*/Object.freeze({
        __proto__: null,
        stringifyBigInts: stringifyBigInts$5,
        unstringifyBigInts: unstringifyBigInts$9,
        beBuff2int: beBuff2int$1,
        beInt2Buff: beInt2Buff$1,
        leBuff2int: leBuff2int$1,
        leInt2Buff: leInt2Buff$1
    });

    let utils$2 = {};

    const supportsNativeBigInt = typeof BigInt === "function";
    if (supportsNativeBigInt) {
        Object.assign(utils$2, utils_native);
    } else {
        Object.assign(utils$2, utils_bigint);
    }


    const _revTable$1 = [];
    for (let i=0; i<256; i++) {
        _revTable$1[i] = _revSlow$1(i, 8);
    }

    function _revSlow$1(idx, bits) {
        let res =0;
        let a = idx;
        for (let i=0; i<bits; i++) {
            res <<= 1;
            res = res | (a &1);
            a >>=1;
        }
        return res;
    }

    utils$2.bitReverse = function bitReverse(idx, bits) {
        return (
            _revTable$1[idx >>> 24] |
            (_revTable$1[(idx >>> 16) & 0xFF] << 8) |
            (_revTable$1[(idx >>> 8) & 0xFF] << 16) |
            (_revTable$1[idx & 0xFF] << 24)
        ) >>> (32-bits);
    };


    utils$2.log2 = function log2( V )
    {
        return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );
    };

    utils$2.buffReverseBits = function buffReverseBits(buff, eSize) {
        const n = buff.byteLength /eSize;
        const bits = utils$2.log2(n);
        if (n != (1 << bits)) {
            throw new Error("Invalid number of pointers");
        }
        for (let i=0; i<n; i++) {
            const r = utils$2.bitReverse(i,bits);
            if (i>r) {
                const tmp = buff.slice(i*eSize, (i+1)*eSize);
                buff.set( buff.slice(r*eSize, (r+1)*eSize), i*eSize);
                buff.set(tmp, r*eSize);
            }
        }
    };


    utils$2.array2buffer = function(arr, sG) {
        const buff = new Uint8Array(sG*arr.length);

        for (let i=0; i<arr.length; i++) {
            buff.set(arr[i], i*sG);
        }

        return buff;
    };

    utils$2.buffer2array = function(buff , sG) {
        const n= buff.byteLength / sG;
        const arr = new Array(n);
        for (let i=0; i<n; i++) {
            arr[i] = buff.slice(i*sG, i*sG+sG);
        }
        return arr;
    };

    let {
        bitReverse,
        log2: log2$1,
        buffReverseBits,
        stringifyBigInts: stringifyBigInts$4,
        unstringifyBigInts: unstringifyBigInts$8,
        beBuff2int,
        beInt2Buff,
        leBuff2int,
        leInt2Buff,
        array2buffer,
        buffer2array,
        stringifyFElements,
        unstringifyFElements
    } = utils$2;

    var _utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        bitReverse: bitReverse,
        log2: log2$1,
        buffReverseBits: buffReverseBits,
        stringifyBigInts: stringifyBigInts$4,
        unstringifyBigInts: unstringifyBigInts$8,
        beBuff2int: beBuff2int,
        beInt2Buff: beInt2Buff,
        leBuff2int: leBuff2int,
        leInt2Buff: leInt2Buff,
        array2buffer: array2buffer,
        buffer2array: buffer2array,
        stringifyFElements: stringifyFElements,
        unstringifyFElements: unstringifyFElements
    });

    const PAGE_SIZE$1 = 1<<30;

    class BigBuffer {

        constructor(size) {
            this.buffers = [];
            this.byteLength = size;
            for (let i=0; i<size; i+= PAGE_SIZE$1) {
                const n = Math.min(size-i, PAGE_SIZE$1);
                this.buffers.push(new Uint8Array(n));
            }

        }

        slice(fr, to) {
            if ( to === undefined ) to = this.byteLength;
            if ( fr === undefined ) fr = 0;
            const len = to-fr;

            const firstPage = Math.floor(fr / PAGE_SIZE$1);
            const lastPage = Math.floor((fr+len-1) / PAGE_SIZE$1);

            if ((firstPage == lastPage)||(len==0))
                return this.buffers[firstPage].slice(fr%PAGE_SIZE$1, fr%PAGE_SIZE$1 + len);

            let buff;

            let p = firstPage;
            let o = fr % PAGE_SIZE$1;
            // Remaining bytes to read
            let r = len;
            while (r>0) {
                // bytes to copy from this page
                const l = (o+r > PAGE_SIZE$1) ? (PAGE_SIZE$1 -o) : r;
                const srcView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset+o, l);
                if (l == len) return srcView.slice();
                if (!buff) {
                    if (len <= PAGE_SIZE$1) {
                        buff = new Uint8Array(len);
                    } else {
                        buff = new BigBuffer(len);
                    }
                }
                buff.set(srcView, len-r);
                r = r-l;
                p ++;
                o = 0;
            }

            return buff;
        }

        set(buff, offset) {
            if (offset === undefined) offset = 0;

            const len = buff.byteLength;

            if (len==0) return;

            const firstPage = Math.floor(offset / PAGE_SIZE$1);
            const lastPage = Math.floor((offset+len-1) / PAGE_SIZE$1);

            if (firstPage == lastPage) {
                if ((buff instanceof BigBuffer)&&(buff.buffers.length==1)) {
                    return this.buffers[firstPage].set(buff.buffers[0], offset % PAGE_SIZE$1);
                } else {
                    return this.buffers[firstPage].set(buff, offset % PAGE_SIZE$1);
                }

            }


            let p = firstPage;
            let o = offset % PAGE_SIZE$1;
            let r = len;
            while (r>0) {
                const l = (o+r > PAGE_SIZE$1) ? (PAGE_SIZE$1 -o) : r;
                const srcView = buff.slice( len -r, len -r+l);
                const dstView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset + o, l);
                dstView.set(srcView);
                r = r-l;
                p ++;
                o = 0;
            }

        }
    }

    function buildBatchConvert(tm, fnName, sIn, sOut) {
        return async function batchConvert(buffIn) {
            const nPoints = Math.floor(buffIn.byteLength / sIn);
            if ( nPoints * sIn !== buffIn.byteLength) {
                throw new Error("Invalid buffer size");
            }
            const pointsPerChunk = Math.floor(nPoints/tm.concurrency);
            const opPromises = [];
            for (let i=0; i<tm.concurrency; i++) {
                let n;
                if (i< tm.concurrency-1) {
                    n = pointsPerChunk;
                } else {
                    n = nPoints - i*pointsPerChunk;
                }
                if (n==0) continue;

                const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);
                const task = [
                    {cmd: "ALLOCSET", var: 0, buff:buffChunk},
                    {cmd: "ALLOC", var: 1, len:sOut * n},
                    {cmd: "CALL", fnName: fnName, params: [
                        {var: 0},
                        {val: n},
                        {var: 1}
                    ]},
                    {cmd: "GET", out: 0, var: 1, len:sOut * n},
                ];
                opPromises.push(
                    tm.queueAction(task)
                );
            }

            const result = await Promise.all(opPromises);

            let fullBuffOut;
            if (buffIn instanceof BigBuffer) {
                fullBuffOut = new BigBuffer(nPoints*sOut);
            } else {
                fullBuffOut = new Uint8Array(nPoints*sOut);
            }

            let p =0;
            for (let i=0; i<result.length; i++) {
                fullBuffOut.set(result[i][0], p);
                p+=result[i][0].byteLength;
            }

            return fullBuffOut;
        };
    }

    class WasmField1 {

        constructor(tm, prefix, n8, p) {
            this.tm = tm;
            this.prefix = prefix;

            this.p = p;
            this.n8 = n8;
            this.type = "F1";
            this.m = 1;

            this.half = shiftRight(p, one);
            this.bitLength = bitLength(p);
            this.mask = sub(shiftLeft(one, this.bitLength), one);

            this.pOp1 = tm.alloc(n8);
            this.pOp2 = tm.alloc(n8);
            this.pOp3 = tm.alloc(n8);
            this.tm.instance.exports[prefix + "_zero"](this.pOp1);
            this.zero = this.tm.getBuff(this.pOp1, this.n8);
            this.tm.instance.exports[prefix + "_one"](this.pOp1);
            this.one = this.tm.getBuff(this.pOp1, this.n8);

            this.negone = this.neg(this.one);
            this.two = this.add(this.one, this.one);

            this.n64 = Math.floor(n8/8);
            this.n32 = Math.floor(n8/4);

            if(this.n64*8 != this.n8) {
                throw new Error("n8 must be a multiple of 8");
            }

            this.half = shiftRight(this.p, one);
            this.nqr = this.two;
            let r = this.exp(this.nqr, this.half);
            while (!this.eq(r, this.negone)) {
                this.nqr = this.add(this.nqr, this.one);
                r = this.exp(this.nqr, this.half);
            }

            this.shift = this.mul(this.nqr, this.nqr);
            this.shiftInv = this.inv(this.shift);

            this.s = 0;
            let t = sub(this.p, one);

            while ( !isOdd(t) ) {
                this.s = this.s + 1;
                t = shiftRight(t, one);
            }

            this.w = [];
            this.w[this.s] = this.exp(this.nqr, t);

            for (let i= this.s-1; i>=0; i--) {
                this.w[i] = this.square(this.w[i+1]);
            }

            if (!this.eq(this.w[0], this.one)) {
                throw new Error("Error calculating roots of unity");
            }

            this.batchToMontgomery = buildBatchConvert(tm, prefix + "_batchToMontgomery", this.n8, this.n8);
            this.batchFromMontgomery = buildBatchConvert(tm, prefix + "_batchFromMontgomery", this.n8, this.n8);
        }


        op2(opName, a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        op2Bool(opName, a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);
        }

        op1(opName, a) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        op1Bool(opName, a) {
            this.tm.setBuff(this.pOp1, a);
            return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
        }

        add(a,b) {
            return this.op2("_add", a, b);
        }


        eq(a,b) {
            return this.op2Bool("_eq", a, b);
        }

        isZero(a) {
            return this.op1Bool("_isZero", a);
        }

        sub(a,b) {
            return this.op2("_sub", a, b);
        }

        neg(a) {
            return this.op1("_neg", a);
        }

        inv(a) {
            return this.op1("_inverse", a);
        }

        toMontgomery(a) {
            return this.op1("_toMontgomery", a);
        }

        fromMontgomery(a) {
            return this.op1("_fromMontgomery", a);
        }

        mul(a,b) {
            return this.op2("_mul", a, b);
        }

        div(a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + "_inverse"](this.pOp2, this.pOp2);
            this.tm.instance.exports[this.prefix + "_mul"](this.pOp1, this.pOp2, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        square(a) {
            return this.op1("_square", a);
        }

        isSquare(a) {
            return this.op1Bool("_isSquare", a);
        }

        sqrt(a) {
            return this.op1("_sqrt", a);
        }

        exp(a, b) {
            if (!(b instanceof Uint8Array)) {
                b = toLEBuff(e(b));
            }
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + "_exp"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        isNegative(a) {
            return this.op1Bool("_isNegative", a);
        }

        e(a, b) {
            if (a instanceof Uint8Array) return a;
            let ra = e(a, b);
            if (isNegative(ra)) {
                ra = neg(ra);
                if (gt(ra, this.p)) {
                    ra = mod(ra, this.p);
                }
                ra = sub(this.p, ra);
            } else {
                if (gt(ra, this.p)) {
                    ra = mod(ra, this.p);
                }
            }
            const buff = leInt2Buff(ra, this.n8);
            return this.toMontgomery(buff);
        }

        toString(a, radix) {
            const an = this.fromMontgomery(a);
            const s = fromRprLE(an, 0);
            return toString$6(s, radix);
        }

        fromRng(rng) {
            let v;
            const buff = new Uint8Array(this.n8);
            do {
                v = zero;
                for (let i=0; i<this.n64; i++) {
                    v = add(v,  shiftLeft(rng.nextU64(), 64*i));
                }
                v = band(v, this.mask);
            } while (geq(v, this.p));
            toRprLE(buff, 0, v, this.n8);
            return buff;
        }

        random() {
            return this.fromRng(getThreadRng());
        }

        toObject(a) {
            const an = this.fromMontgomery(a);
            return fromRprLE(an, 0);
        }

        fromObject(a) {
            const buff = new Uint8Array(this.n8);
            toRprLE(buff, 0, a, this.n8);
            return this.toMontgomery(buff);
        }

        toRprLE(buff, offset, a) {
            buff.set(this.fromMontgomery(a), offset);
        }

        toRprBE(buff, offset, a) {
            const buff2 = this.fromMontgomery(a);
            for (let i=0; i<this.n8/2; i++) {
                const aux = buff2[i];
                buff2[i] = buff2[this.n8-1-i];
                buff2[this.n8-1-i] = aux;
            }
            buff.set(buff2, offset);
        }

        fromRprLE(buff, offset) {
            offset = offset || 0;
            const res = buff.slice(offset, offset + this.n8);
            return this.toMontgomery(res);
        }

        async batchInverse(buffIn) {
            let returnArray = false;
            const sIn = this.n8;
            const sOut = this.n8;

            if (Array.isArray(buffIn)) {
                buffIn = array2buffer(buffIn, sIn );
                returnArray = true;
            } else {
                buffIn = buffIn.slice(0, buffIn.byteLength);
            }

            const nPoints = Math.floor(buffIn.byteLength / sIn);
            if ( nPoints * sIn !== buffIn.byteLength) {
                throw new Error("Invalid buffer size");
            }
            const pointsPerChunk = Math.floor(nPoints/this.tm.concurrency);
            const opPromises = [];
            for (let i=0; i<this.tm.concurrency; i++) {
                let n;
                if (i< this.tm.concurrency-1) {
                    n = pointsPerChunk;
                } else {
                    n = nPoints - i*pointsPerChunk;
                }
                if (n==0) continue;

                const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);
                const task = [
                    {cmd: "ALLOCSET", var: 0, buff:buffChunk},
                    {cmd: "ALLOC", var: 1, len:sOut * n},
                    {cmd: "CALL", fnName: this.prefix + "_batchInverse", params: [
                        {var: 0},
                        {val: sIn},
                        {val: n},
                        {var: 1},
                        {val: sOut},
                    ]},
                    {cmd: "GET", out: 0, var: 1, len:sOut * n},
                ];
                opPromises.push(
                    this.tm.queueAction(task)
                );
            }

            const result = await Promise.all(opPromises);

            let fullBuffOut;
            if (buffIn instanceof BigBuffer) {
                fullBuffOut = new BigBuffer(nPoints*sOut);
            } else {
                fullBuffOut = new Uint8Array(nPoints*sOut);
            }

            let p =0;
            for (let i=0; i<result.length; i++) {
                fullBuffOut.set(result[i][0], p);
                p+=result[i][0].byteLength;
            }

            if (returnArray) {
                return buffer2array(fullBuffOut, sOut);
            } else {
                return fullBuffOut;
            }

        }

    }

    class WasmField2 {

        constructor(tm, prefix, F) {
            this.tm = tm;
            this.prefix = prefix;

            this.F = F;
            this.type = "F2";
            this.m = F.m * 2;
            this.n8 = this.F.n8*2;
            this.n32 = this.F.n32*2;
            this.n64 = this.F.n64*2;

            this.pOp1 = tm.alloc(F.n8*2);
            this.pOp2 = tm.alloc(F.n8*2);
            this.pOp3 = tm.alloc(F.n8*2);
            this.tm.instance.exports[prefix + "_zero"](this.pOp1);
            this.zero = tm.getBuff(this.pOp1, this.n8);
            this.tm.instance.exports[prefix + "_one"](this.pOp1);
            this.one = tm.getBuff(this.pOp1, this.n8);

            this.negone = this.neg(this.one);
            this.two = this.add(this.one, this.one);

        }

        op2(opName, a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        op2Bool(opName, a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);
        }

        op1(opName, a) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        op1Bool(opName, a) {
            this.tm.setBuff(this.pOp1, a);
            return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
        }

        add(a,b) {
            return this.op2("_add", a, b);
        }

        eq(a,b) {
            return this.op2Bool("_eq", a, b);
        }

        isZero(a) {
            return this.op1Bool("_isZero", a);
        }

        sub(a,b) {
            return this.op2("_sub", a, b);
        }

        neg(a) {
            return this.op1("_neg", a);
        }

        inv(a) {
            return this.op1("_inverse", a);
        }

        isNegative(a) {
            return this.op1Bool("_isNegative", a);
        }

        toMontgomery(a) {
            return this.op1("_toMontgomery", a);
        }

        fromMontgomery(a) {
            return this.op1("_fromMontgomery", a);
        }

        mul(a,b) {
            return this.op2("_mul", a, b);
        }

        mul1(a,b) {
            return this.op2("_mul1", a, b);
        }

        div(a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + "_inverse"](this.pOp2, this.pOp2);
            this.tm.instance.exports[this.prefix + "_mul"](this.pOp1, this.pOp2, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        square(a) {
            return this.op1("_square", a);
        }

        isSquare(a) {
            return this.op1Bool("_isSquare", a);
        }

        sqrt(a) {
            return this.op1("_sqrt", a);
        }

        exp(a, b) {
            if (!(b instanceof Uint8Array)) {
                b = toLEBuff(e(b));
            }
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + "_exp"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        e(a, b) {
            if (a instanceof Uint8Array) return a;
            if ((Array.isArray(a)) && (a.length == 2)) {
                const c1 = this.F.e(a[0], b);
                const c2 = this.F.e(a[1], b);
                const res = new Uint8Array(this.F.n8*2);
                res.set(c1);
                res.set(c2, this.F.n8*2);
                return res;
            } else {
                throw new Error("invalid F2");
            }
        }

        toString(a, radix) {
            const s1 = this.F.toString(a.slice(0, this.F.n8), radix);
            const s2 = this.F.toString(a.slice(this.F.n8), radix);
            return `[${s1}, ${s2}]`;
        }

        fromRng(rng) {
            const c1 = this.F.fromRng(rng);
            const c2 = this.F.fromRng(rng);
            const res = new Uint8Array(this.F.n8*2);
            res.set(c1);
            res.set(c2, this.F.n8);
            return res;
        }

        random() {
            return this.fromRng(getThreadRng());
        }

        toObject(a) {
            const c1 = this.F.toObject(a.slice(0, this.F.n8));
            const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));
            return [c1, c2];
        }

        fromObject(a) {
            const buff = new Uint8Array(this.F.n8*2);
            const b1 = this.F.fromObject(a[0]);
            const b2 = this.F.fromObject(a[1]);
            buff.set(b1);
            buff.set(b2, this.F.n8);
            return buff;
        }

        c1(a) {
            return a.slice(0, this.F.n8);
        }

        c2(a) {
            return a.slice(this.F.n8);
        }

    }

    class WasmField3 {

        constructor(tm, prefix, F) {
            this.tm = tm;
            this.prefix = prefix;

            this.F = F;
            this.type = "F3";
            this.m = F.m * 3;
            this.n8 = this.F.n8*3;
            this.n32 = this.F.n32*3;
            this.n64 = this.F.n64*3;

            this.pOp1 = tm.alloc(F.n8*3);
            this.pOp2 = tm.alloc(F.n8*3);
            this.pOp3 = tm.alloc(F.n8*3);
            this.tm.instance.exports[prefix + "_zero"](this.pOp1);
            this.zero = tm.getBuff(this.pOp1, this.n8);
            this.tm.instance.exports[prefix + "_one"](this.pOp1);
            this.one = tm.getBuff(this.pOp1, this.n8);

            this.negone = this.neg(this.one);
            this.two = this.add(this.one, this.one);

        }

        op2(opName, a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        op2Bool(opName, a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);
        }

        op1(opName, a) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        op1Bool(opName, a) {
            this.tm.setBuff(this.pOp1, a);
            return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
        }


        eq(a,b) {
            return this.op2Bool("_eq", a, b);
        }

        isZero(a) {
            return this.op1Bool("_isZero", a);
        }

        add(a,b) {
            return this.op2("_add", a, b);
        }

        sub(a,b) {
            return this.op2("_sub", a, b);
        }

        neg(a) {
            return this.op1("_neg", a);
        }

        inv(a) {
            return this.op1("_inverse", a);
        }

        isNegative(a) {
            return this.op1Bool("_isNegative", a);
        }

        toMontgomery(a) {
            return this.op1("_toMontgomery", a);
        }

        fromMontgomery(a) {
            return this.op1("_fromMontgomery", a);
        }

        mul(a,b) {
            return this.op2("_mul", a, b);
        }

        div(a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + "_inverse"](this.pOp2, this.pOp2);
            this.tm.instance.exports[this.prefix + "_mul"](this.pOp1, this.pOp2, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.n8);
        }

        square(a) {
            return this.op1("_square", a);
        }

        isSquare(a) {
            return this.op1Bool("_isSquare", a);
        }

        sqrt(a) {
            return this.op1("_sqrt", a);
        }

        exp(a, b) {
            if (!(b instanceof Uint8Array)) {
                b = toLEBuff(e(b));
            }
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + "_exp"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);
            return this.getBuff(this.pOp3, this.n8);
        }

        e(a, b) {
            if (a instanceof Uint8Array) return a;
            if ((Array.isArray(a)) && (a.length == 3)) {
                const c1 = this.F.e(a[0], b);
                const c2 = this.F.e(a[1], b);
                const c3 = this.F.e(a[2], b);
                const res = new Uint8Array(this.F.n8*3);
                res.set(c1);
                res.set(c2, this.F.n8);
                res.set(c3, this.F.n8*2);
                return res;
            } else {
                throw new Error("invalid F3");
            }
        }

        toString(a, radix) {
            const s1 = this.F.toString(a.slice(0, this.F.n8), radix);
            const s2 = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);
            const s3 = this.F.toString(a.slice(this.F.n8*2), radix);
            return `[${s1}, ${s2}, ${s3}]`;
        }

        fromRng(rng) {
            const c1 = this.F.fromRng(rng);
            const c2 = this.F.fromRng(rng);
            const c3 = this.F.fromRng(rng);
            const res = new Uint8Array(this.F.n8*3);
            res.set(c1);
            res.set(c2, this.F.n8);
            res.set(c3, this.F.n8*2);
            return res;
        }

        random() {
            return this.fromRng(getThreadRng());
        }

        toObject(a) {
            const c1 = this.F.toObject(a.slice(0, this.F.n8));
            const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));
            const c3 = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));
            return [c1, c2, c3];
        }

        fromObject(a) {
            const buff = new Uint8Array(this.F.n8*3);
            const b1 = this.F.fromObject(a[0]);
            const b2 = this.F.fromObject(a[1]);
            const b3 = this.F.fromObject(a[2]);
            buff.set(b1);
            buff.set(b2, this.F.n8);
            buff.set(b3, this.F.n8*2);
            return buff;
        }

        c1(a) {
            return a.slice(0, this.F.n8);
        }

        c2(a) {
            return a.slice(this.F.n8, this.F.n8*2);
        }

        c3(a) {
            return a.slice(this.F.n8*2);
        }

    }

    class WasmCurve {

        constructor(tm, prefix, F, pGen, pGb, cofactor) {
            this.tm = tm;
            this.prefix = prefix;
            this.F = F;

            this.pOp1 = tm.alloc(F.n8*3);
            this.pOp2 = tm.alloc(F.n8*3);
            this.pOp3 = tm.alloc(F.n8*3);
            this.tm.instance.exports[prefix + "_zero"](this.pOp1);
            this.zero = this.tm.getBuff(this.pOp1, F.n8*3);
            this.tm.instance.exports[prefix + "_zeroAffine"](this.pOp1);
            this.zeroAffine = this.tm.getBuff(this.pOp1, F.n8*2);
            this.one = this.tm.getBuff(pGen, F.n8*3);
            this.g = this.one;
            this.oneAffine = this.tm.getBuff(pGen, F.n8*2);
            this.gAffine = this.oneAffine;
            this.b = this.tm.getBuff(pGb, F.n8);

            if (cofactor) {
                this.cofactor = toLEBuff(cofactor);
            }

            this.negone = this.neg(this.one);
            this.two = this.add(this.one, this.one);

            this.batchLEMtoC = buildBatchConvert(tm, prefix + "_batchLEMtoC", F.n8*2, F.n8);
            this.batchLEMtoU = buildBatchConvert(tm, prefix + "_batchLEMtoU", F.n8*2, F.n8*2);
            this.batchCtoLEM = buildBatchConvert(tm, prefix + "_batchCtoLEM", F.n8, F.n8*2);
            this.batchUtoLEM = buildBatchConvert(tm, prefix + "_batchUtoLEM", F.n8*2, F.n8*2);
            this.batchToJacobian = buildBatchConvert(tm, prefix + "_batchToJacobian", F.n8*2, F.n8*3);
            this.batchToAffine = buildBatchConvert(tm, prefix + "_batchToAffine", F.n8*3, F.n8*2);
        }

        op2(opName, a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.F.n8*3);
        }

        op2bool(opName, a, b) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, b);
            return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
        }

        op1(opName, a) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.F.n8*3);
        }

        op1Affine(opName, a) {
            this.tm.setBuff(this.pOp1, a);
            this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.F.n8*2);
        }

        op1Bool(opName, a) {
            this.tm.setBuff(this.pOp1, a);
            return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
        }

        add(a,b) {
            if (a.byteLength == this.F.n8*3) {
                if (b.byteLength == this.F.n8*3) {
                    return this.op2("_add", a, b);
                } else if (b.byteLength == this.F.n8*2) {
                    return this.op2("_addMixed", a, b);
                } else {
                    throw new Error("invalid point size");
                }
            } else if (a.byteLength == this.F.n8*2) {
                if (b.byteLength == this.F.n8*3) {
                    return this.op2("_addMixed", b, a);
                } else if (b.byteLength == this.F.n8*2) {
                    return this.op2("_addAffine", a, b);
                } else {
                    throw new Error("invalid point size");
                }
            } else {
                throw new Error("invalid point size");
            }
        }

        sub(a,b) {
            if (a.byteLength == this.F.n8*3) {
                if (b.byteLength == this.F.n8*3) {
                    return this.op2("_sub", a, b);
                } else if (b.byteLength == this.F.n8*2) {
                    return this.op2("_subMixed", a, b);
                } else {
                    throw new Error("invalid point size");
                }
            } else if (a.byteLength == this.F.n8*2) {
                if (b.byteLength == this.F.n8*3) {
                    return this.op2("_subMixed", b, a);
                } else if (b.byteLength == this.F.n8*2) {
                    return this.op2("_subAffine", a, b);
                } else {
                    throw new Error("invalid point size");
                }
            } else {
                throw new Error("invalid point size");
            }
        }

        neg(a) {
            if (a.byteLength == this.F.n8*3) {
                return this.op1("_neg", a);
            } else if (a.byteLength == this.F.n8*2) {
                return this.op1Affine("_negAffine", a);
            } else {
                throw new Error("invalid point size");
            }
        }

        double(a) {
            if (a.byteLength == this.F.n8*3) {
                return this.op1("_double", a);
            } else if (a.byteLength == this.F.n8*2) {
                return this.op1("_doubleAffine", a);
            } else {
                throw new Error("invalid point size");
            }
        }

        isZero(a) {
            if (a.byteLength == this.F.n8*3) {
                return this.op1Bool("_isZero", a);
            } else if (a.byteLength == this.F.n8*2) {
                return this.op1Bool("_isZeroAffine", a);
            } else {
                throw new Error("invalid point size");
            }
        }

        timesScalar(a, s) {
            if (!(s instanceof Uint8Array)) {
                s = toLEBuff(e(s));
            }
            let fnName;
            if (a.byteLength == this.F.n8*3) {
                fnName = this.prefix + "_timesScalar";
            } else if (a.byteLength == this.F.n8*2) {
                fnName = this.prefix + "_timesScalarAffine";
            } else {
                throw new Error("invalid point size");
            }
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, s);
            this.tm.instance.exports[fnName](this.pOp1, this.pOp2, s.byteLength, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.F.n8*3);
        }

        timesFr(a, s) {
            let fnName;
            if (a.byteLength == this.F.n8*3) {
                fnName = this.prefix + "_timesFr";
            } else if (a.byteLength == this.F.n8*2) {
                fnName = this.prefix + "_timesFrAffine";
            } else {
                throw new Error("invalid point size");
            }
            this.tm.setBuff(this.pOp1, a);
            this.tm.setBuff(this.pOp2, s);
            this.tm.instance.exports[fnName](this.pOp1, this.pOp2, this.pOp3);
            return this.tm.getBuff(this.pOp3, this.F.n8*3);
        }

        eq(a,b) {
            if (a.byteLength == this.F.n8*3) {
                if (b.byteLength == this.F.n8*3) {
                    return this.op2bool("_eq", a, b);
                } else if (b.byteLength == this.F.n8*2) {
                    return this.op2bool("_eqMixed", a, b);
                } else {
                    throw new Error("invalid point size");
                }
            } else if (a.byteLength == this.F.n8*2) {
                if (b.byteLength == this.F.n8*3) {
                    return this.op2bool("_eqMixed", b, a);
                } else if (b.byteLength == this.F.n8*2) {
                    return this.op2bool("_eqAffine", a, b);
                } else {
                    throw new Error("invalid point size");
                }
            } else {
                throw new Error("invalid point size");
            }
        }

        toAffine(a) {
            if (a.byteLength == this.F.n8*3) {
                return this.op1Affine("_toAffine", a);
            } else if (a.byteLength == this.F.n8*2) {
                return a;
            } else {
                throw new Error("invalid point size");
            }
        }

        toJacobian(a) {
            if (a.byteLength == this.F.n8*3) {
                return a;
            } else if (a.byteLength == this.F.n8*2) {
                return this.op1("_toJacobian", a);
            } else {
                throw new Error("invalid point size");
            }
        }

        toRprUncompressed(arr, offset, a) {
            this.tm.setBuff(this.pOp1, a);
            if (a.byteLength == this.F.n8*3) {
                this.tm.instance.exports[this.prefix + "_toAffine"](this.pOp1, this.pOp1);
            } else if (a.byteLength != this.F.n8*2) {
                throw new Error("invalid point size");
            }
            this.tm.instance.exports[this.prefix + "_LEMtoU"](this.pOp1, this.pOp1);
            const res = this.tm.getBuff(this.pOp1, this.F.n8*2);
            arr.set(res, offset);
        }

        fromRprUncompressed(arr, offset) {
            const buff = arr.slice(offset, offset + this.F.n8*2);
            this.tm.setBuff(this.pOp1, buff);
            this.tm.instance.exports[this.prefix + "_UtoLEM"](this.pOp1, this.pOp1);
            return this.tm.getBuff(this.pOp1, this.F.n8*2);
        }

        toRprCompressed(arr, offset, a) {
            this.tm.setBuff(this.pOp1, a);
            if (a.byteLength == this.F.n8*3) {
                this.tm.instance.exports[this.prefix + "_toAffine"](this.pOp1, this.pOp1);
            } else if (a.byteLength != this.F.n8*2) {
                throw new Error("invalid point size");
            }
            this.tm.instance.exports[this.prefix + "_LEMtoC"](this.pOp1, this.pOp1);
            const res = this.tm.getBuff(this.pOp1, this.F.n8);
            arr.set(res, offset);
        }

        fromRprCompressed(arr, offset) {
            const buff = arr.slice(offset, offset + this.F.n8);
            this.tm.setBuff(this.pOp1, buff);
            this.tm.instance.exports[this.prefix + "_CtoLEM"](this.pOp1, this.pOp2);
            return this.tm.getBuff(this.pOp2, this.F.n8*2);
        }

        toUncompressed(a) {
            const buff = new Uint8Array(this.F.n8*2);
            this.toRprUncompressed(buff, 0, a);
            return buff;
        }

        toRprLEM(arr, offset, a) {
            if (a.byteLength == this.F.n8*2) {
                arr.set(a, offset);
                return;
            } else if (a.byteLength == this.F.n8*3) {
                this.tm.setBuff(this.pOp1, a);
                this.tm.instance.exports[this.prefix + "_toAffine"](this.pOp1, this.pOp1);
                const res = this.tm.getBuff(this.pOp1, this.F.n8*2);
                arr.set(res, offset);
            } else {
                throw new Error("invalid point size");
            }
        }

        fromRprLEM(arr, offset) {
            offset = offset || 0;
            return arr.slice(offset, offset+this.F.n8*2);
        }

        toString(a, radix) {
            if (a.byteLength == this.F.n8*3) {
                const x = this.F.toString(a.slice(0, this.F.n8), radix);
                const y = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);
                const z = this.F.toString(a.slice(this.F.n8*2), radix);
                return `[ ${x}, ${y}, ${z} ]`;
            } else if (a.byteLength == this.F.n8*2) {
                const x = this.F.toString(a.slice(0, this.F.n8), radix);
                const y = this.F.toString(a.slice(this.F.n8), radix);
                return `[ ${x}, ${y} ]`;
            } else {
                throw new Error("invalid point size");
            }
        }

        isValid(a) {
            if (this.isZero(a)) return true;
            const F = this.F;
            const aa = this.toAffine(a);
            const x = aa.slice(0, this.F.n8);
            const y = aa.slice(this.F.n8, this.F.n8*2);
            const x3b = F.add(F.mul(F.square(x),x), this.b);
            const y2 = F.square(y);
            return F.eq(x3b, y2);
        }

        fromRng(rng) {
            const F = this.F;
            let P = [];
            let greatest;
            let x3b;
            do {
                P[0] = F.fromRng(rng);
                greatest = rng.nextBool();
                x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);
            } while (!F.isSquare(x3b));

            P[1] = F.sqrt(x3b);

            const s = F.isNegative(P[1]);
            if (greatest ^ s) P[1] = F.neg(P[1]);

            let Pbuff = new Uint8Array(this.F.n8*2);
            Pbuff.set(P[0]);
            Pbuff.set(P[1], this.F.n8);

            if (this.cofactor) {
                Pbuff = this.timesScalar(Pbuff, this.cofactor);
            }

            return Pbuff;
        }



        toObject(a) {
            if (this.isZero(a)) {
                return [
                    this.F.toObject(this.F.zero),
                    this.F.toObject(this.F.one),
                    this.F.toObject(this.F.zero),
                ];
            }
            const x = this.F.toObject(a.slice(0, this.F.n8));
            const y = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));
            let z;
            if (a.byteLength == this.F.n8*3) {
                z = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));
            } else {
                z = this.F.toObject(this.F.one);
            }
            return [x, y, z];
        }

        fromObject(a) {
            const x = this.F.fromObject(a[0]);
            const y = this.F.fromObject(a[1]);
            let z;
            if (a.length==3) {
                z = this.F.fromObject(a[2]);
            } else {
                z = this.F.one;
            }
            if (this.F.isZero(z, this.F.one)) {
                return this.zeroAffine;
            } else if (this.F.eq(z, this.F.one)) {
                const buff = new Uint8Array(this.F.n8*2);
                buff.set(x);
                buff.set(y, this.F.n8);
                return buff;
            } else {
                const buff = new Uint8Array(this.F.n8*3);
                buff.set(x);
                buff.set(y, this.F.n8);
                buff.set(z, this.F.n8*2);
                return buff;
            }
        }

        e(a) {
            if (a instanceof Uint8Array) return a;
            return this.fromObject(a);
        }

        x(a) {
            const tmp = this.toAffine(a);
            return tmp.slice(0, this.F.n8);
        }

        y(a) {
            const tmp = this.toAffine(a);
            return tmp.slice(this.F.n8);
        }

    }

    /* global WebAssembly */

    function thread(self) {
        const MAXMEM = 32767;
        let instance;
        let memory;

        if (self) {
            self.onmessage = function(e) {
                let data;
                if (e.data) {
                    data = e.data;
                } else {
                    data = e;
                }

                if (data[0].cmd == "INIT") {
                    init(data[0]).then(function() {
                        self.postMessage(data.result);
                    });
                } else if (data[0].cmd == "TERMINATE") {
                    self.close();
                } else {
                    const res = runTask(data);
                    self.postMessage(res);
                }
            };
        }

        async function init(data) {
            const code = new Uint8Array(data.code);
            const wasmModule = await WebAssembly.compile(code);
            memory = new WebAssembly.Memory({initial:data.init, maximum: MAXMEM});

            instance = await WebAssembly.instantiate(wasmModule, {
                env: {
                    "memory": memory
                }
            });
        }



        function alloc(length) {
            const u32 = new Uint32Array(memory.buffer, 0, 1);
            while (u32[0] & 3) u32[0]++;  // Return always aligned pointers
            const res = u32[0];
            u32[0] += length;
            if (u32[0] + length > memory.buffer.byteLength) {
                const currentPages = memory.buffer.byteLength / 0x10000;
                let requiredPages = Math.floor((u32[0] + length) / 0x10000)+1;
                if (requiredPages>MAXMEM) requiredPages=MAXMEM;
                memory.grow(requiredPages-currentPages);
            }
            return res;
        }

        function allocBuffer(buffer) {
            const p = alloc(buffer.byteLength);
            setBuffer(p, buffer);
            return p;
        }

        function getBuffer(pointer, length) {
            const u8 = new Uint8Array(memory.buffer);
            return new Uint8Array(u8.buffer, u8.byteOffset + pointer, length);
        }

        function setBuffer(pointer, buffer) {
            const u8 = new Uint8Array(memory.buffer);
            u8.set(new Uint8Array(buffer), pointer);
        }

        function runTask(task) {
            if (task[0].cmd == "INIT") {
                return init(task[0]);
            }
            const ctx = {
                vars: [],
                out: []
            };
            const u32a = new Uint32Array(memory.buffer, 0, 1);
            const oldAlloc = u32a[0];
            for (let i=0; i<task.length; i++) {
                switch (task[i].cmd) {
                case "ALLOCSET":
                    ctx.vars[task[i].var] = allocBuffer(task[i].buff);
                    break;
                case "ALLOC":
                    ctx.vars[task[i].var] = alloc(task[i].len);
                    break;
                case "SET":
                    setBuffer(ctx.vars[task[i].var], task[i].buff);
                    break;
                case "CALL": {
                    const params = [];
                    for (let j=0; j<task[i].params.length; j++) {
                        const p = task[i].params[j];
                        if (typeof p.var !== "undefined") {
                            params.push(ctx.vars[p.var] + (p.offset || 0));
                        } else if (typeof p.val != "undefined") {
                            params.push(p.val);
                        }
                    }
                    instance.exports[task[i].fnName](...params);
                    break;
                }
                case "GET":
                    ctx.out[task[i].out] = getBuffer(ctx.vars[task[i].var], task[i].len).slice();
                    break;
                default:
                    throw new Error("Invalid cmd");
                }
            }
            const u32b = new Uint32Array(memory.buffer, 0, 1);
            u32b[0] = oldAlloc;
            return ctx.out;
        }


        return runTask;
    }

    var os = {};

    /**
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var browser$1 = Worker;

    /* global navigator, WebAssembly */
    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmsnark (Web Assembly zkSnark Prover).

        wasmsnark is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmsnark is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.
    */

    // const MEM_SIZE = 1000;  // Memory size in 64K Pakes (512Mb)
    const MEM_SIZE = 25;  // Memory size in 64K Pakes (1600Kb)

    class Deferred {
        constructor() {
            this.promise = new Promise((resolve, reject)=> {
                this.reject = reject;
                this.resolve = resolve;
            });
        }
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function stringToBase64(str) {
        {
            return globalThis.btoa(str);
        }
    }

    const threadSource = stringToBase64("(" + thread.toString() + ")(self)");
    const workerSource = "data:application/javascript;base64," + threadSource;



    async function buildThreadManager(wasm, singleThread) {
        const tm = new ThreadManager();

        tm.memory = new WebAssembly.Memory({initial:MEM_SIZE});
        tm.u8 = new Uint8Array(tm.memory.buffer);
        tm.u32 = new Uint32Array(tm.memory.buffer);

        const wasmModule = await WebAssembly.compile(wasm.code);

        tm.instance = await WebAssembly.instantiate(wasmModule, {
            env: {
                "memory": tm.memory
            }
        });

        tm.singleThread = singleThread;
        tm.initalPFree = tm.u32[0];   // Save the Pointer to free space.
        tm.pq = wasm.pq;
        tm.pr = wasm.pr;
        tm.pG1gen = wasm.pG1gen;
        tm.pG1zero = wasm.pG1zero;
        tm.pG2gen = wasm.pG2gen;
        tm.pG2zero = wasm.pG2zero;
        tm.pOneT = wasm.pOneT;

        //    tm.pTmp0 = tm.alloc(curve.G2.F.n8*3);
        //    tm.pTmp1 = tm.alloc(curve.G2.F.n8*3);


        if (singleThread) {
            tm.code = wasm.code;
            tm.taskManager = thread();
            await tm.taskManager([{
                cmd: "INIT",
                init: MEM_SIZE,
                code: tm.code.slice()
            }]);
            tm.concurrency  = 1;
        } else {
            tm.workers = [];
            tm.pendingDeferreds = [];
            tm.working = [];

            let concurrency;

            if ((typeof(navigator) === "object") && navigator.hardwareConcurrency) {
                concurrency = navigator.hardwareConcurrency;
            } else {
                concurrency = os.cpus().length;
            }

            if(concurrency == 0){
                concurrency = 2;
            }

            // Limit to 64 threads for memory reasons.
            if (concurrency>64) concurrency=64;
            tm.concurrency = concurrency;

            for (let i = 0; i<concurrency; i++) {

                tm.workers[i] = new browser$1(workerSource);

                tm.workers[i].addEventListener("message", getOnMsg(i));

                tm.working[i]=false;
            }

            const initPromises = [];
            for (let i=0; i<tm.workers.length;i++) {
                const copyCode = wasm.code.slice();
                initPromises.push(tm.postAction(i, [{
                    cmd: "INIT",
                    init: MEM_SIZE,
                    code: copyCode
                }], [copyCode.buffer]));
            }

            await Promise.all(initPromises);

        }
        return tm;

        function getOnMsg(i) {
            return function(e) {
                let data;
                if ((e)&&(e.data)) {
                    data = e.data;
                } else {
                    data = e;
                }

                tm.working[i]=false;
                tm.pendingDeferreds[i].resolve(data);
                tm.processWorks();
            };
        }

    }

    class ThreadManager {
        constructor() {
            this.actionQueue = [];
            this.oldPFree = 0;
        }

        startSyncOp() {
            if (this.oldPFree != 0) throw new Error("Sync operation in progress");
            this.oldPFree = this.u32[0];
        }

        endSyncOp() {
            if (this.oldPFree == 0) throw new Error("No sync operation in progress");
            this.u32[0] = this.oldPFree;
            this.oldPFree = 0;
        }

        postAction(workerId, e, transfers, _deferred) {
            if (this.working[workerId]) {
                throw new Error("Posting a job t a working worker");
            }
            this.working[workerId] = true;

            this.pendingDeferreds[workerId] = _deferred ? _deferred : new Deferred();
            this.workers[workerId].postMessage(e, transfers);

            return this.pendingDeferreds[workerId].promise;
        }

        processWorks() {
            for (let i=0; (i<this.workers.length)&&(this.actionQueue.length > 0); i++) {
                if (this.working[i] == false) {
                    const work = this.actionQueue.shift();
                    this.postAction(i, work.data, work.transfers, work.deferred);
                }
            }
        }

        queueAction(actionData, transfers) {
            const d = new Deferred();

            if (this.singleThread) {
                const res = this.taskManager(actionData);
                d.resolve(res);
            } else {
                this.actionQueue.push({
                    data: actionData,
                    transfers: transfers,
                    deferred: d
                });
                this.processWorks();
            }
            return d.promise;
        }

        resetMemory() {
            this.u32[0] = this.initalPFree;
        }

        allocBuff(buff) {
            const pointer = this.alloc(buff.byteLength);
            this.setBuff(pointer, buff);
            return pointer;
        }

        getBuff(pointer, length) {
            return this.u8.slice(pointer, pointer+ length);
        }

        setBuff(pointer, buffer) {
            this.u8.set(new Uint8Array(buffer), pointer);
        }

        alloc(length) {
            while (this.u32[0] & 3) this.u32[0]++;  // Return always aligned pointers
            const res = this.u32[0];
            this.u32[0] += length;
            return res;
        }

        async terminate() {
            for (let i=0; i<this.workers.length; i++) {
                this.workers[i].postMessage([{cmd: "TERMINATE"}]);
            }
            await sleep(200);
        }

    }

    function buildBatchApplyKey(curve, groupName) {
        const G = curve[groupName];
        const Fr = curve.Fr;
        const tm = curve.tm;

        curve[groupName].batchApplyKey = async function(buff, first, inc, inType, outType) {
            inType = inType || "affine";
            outType = outType || "affine";
            let fnName, fnAffine;
            let sGin, sGmid, sGout;
            if (groupName == "G1") {
                if (inType == "jacobian") {
                    sGin = G.F.n8*3;
                    fnName = "g1m_batchApplyKey";
                } else {
                    sGin = G.F.n8*2;
                    fnName = "g1m_batchApplyKeyMixed";
                }
                sGmid = G.F.n8*3;
                if (outType == "jacobian") {
                    sGout = G.F.n8*3;
                } else {
                    fnAffine = "g1m_batchToAffine";
                    sGout = G.F.n8*2;
                }
            } else if (groupName == "G2") {
                if (inType == "jacobian") {
                    sGin = G.F.n8*3;
                    fnName = "g2m_batchApplyKey";
                } else {
                    sGin = G.F.n8*2;
                    fnName = "g2m_batchApplyKeyMixed";
                }
                sGmid = G.F.n8*3;
                if (outType == "jacobian") {
                    sGout = G.F.n8*3;
                } else {
                    fnAffine = "g2m_batchToAffine";
                    sGout = G.F.n8*2;
                }
            } else if (groupName == "Fr") {
                fnName = "frm_batchApplyKey";
                sGin = G.n8;
                sGmid = G.n8;
                sGout = G.n8;
            } else {
                throw new Error("Invalid group: " + groupName);
            }
            const nPoints = Math.floor(buff.byteLength / sGin);
            const pointsPerChunk = Math.floor(nPoints/tm.concurrency);
            const opPromises = [];
            inc = Fr.e(inc);
            let t = Fr.e(first);
            for (let i=0; i<tm.concurrency; i++) {
                let n;
                if (i< tm.concurrency-1) {
                    n = pointsPerChunk;
                } else {
                    n = nPoints - i*pointsPerChunk;
                }
                if (n==0) continue;

                const task = [];

                task.push({
                    cmd: "ALLOCSET",
                    var: 0,
                    buff: buff.slice(i*pointsPerChunk*sGin, i*pointsPerChunk*sGin + n*sGin)
                });
                task.push({cmd: "ALLOCSET", var: 1, buff: t});
                task.push({cmd: "ALLOCSET", var: 2, buff: inc});
                task.push({cmd: "ALLOC", var: 3, len: n*Math.max(sGmid, sGout)});
                task.push({
                    cmd: "CALL",
                    fnName: fnName,
                    params: [
                        {var: 0},
                        {val: n},
                        {var: 1},
                        {var: 2},
                        {var:3}
                    ]
                });
                if (fnAffine) {
                    task.push({
                        cmd: "CALL",
                        fnName: fnAffine,
                        params: [
                            {var: 3},
                            {val: n},
                            {var: 3},
                        ]
                    });
                }
                task.push({cmd: "GET", out: 0, var: 3, len: n*sGout});

                opPromises.push(tm.queueAction(task));
                t = Fr.mul(t, Fr.exp(inc, n));
            }

            const result = await Promise.all(opPromises);

            let outBuff;
            if (buff instanceof BigBuffer) {
                outBuff = new BigBuffer(nPoints*sGout);
            } else {
                outBuff = new Uint8Array(nPoints*sGout);
            }

            let p=0;
            for (let i=0; i<result.length; i++) {
                outBuff.set(result[i][0], p);
                p += result[i][0].byteLength;
            }

            return outBuff;
        };
    }

    function buildPairing(curve) {
        const tm = curve.tm;
        curve.pairing = function pairing(a, b) {

            tm.startSyncOp();
            const pA = tm.allocBuff(curve.G1.toJacobian(a));
            const pB = tm.allocBuff(curve.G2.toJacobian(b));
            const pRes = tm.alloc(curve.Gt.n8);
            tm.instance.exports[curve.name + "_pairing"](pA, pB, pRes);

            const res = tm.getBuff(pRes, curve.Gt.n8);

            tm.endSyncOp();
            return res;
        };

        curve.pairingEq = async function pairingEq() {
            let  buffCt;
            let nEqs;
            if ((arguments.length % 2) == 1) {
                buffCt = arguments[arguments.length-1];
                nEqs = (arguments.length -1) /2;
            } else {
                buffCt = curve.Gt.one;
                nEqs = arguments.length /2;
            }

            const opPromises = [];
            for (let i=0; i<nEqs; i++) {

                const task = [];

                const g1Buff = curve.G1.toJacobian(arguments[i*2]);
                task.push({cmd: "ALLOCSET", var: 0, buff: g1Buff});
                task.push({cmd: "ALLOC", var: 1, len: curve.prePSize});

                const g2Buff = curve.G2.toJacobian(arguments[i*2 +1]);
                task.push({cmd: "ALLOCSET", var: 2, buff: g2Buff});
                task.push({cmd: "ALLOC", var: 3, len: curve.preQSize});

                task.push({cmd: "ALLOC", var: 4, len: curve.Gt.n8});

                task.push({cmd: "CALL", fnName: curve.name + "_prepareG1", params: [
                    {var: 0},
                    {var: 1}
                ]});

                task.push({cmd: "CALL", fnName: curve.name + "_prepareG2", params: [
                    {var: 2},
                    {var: 3}
                ]});

                task.push({cmd: "CALL", fnName: curve.name + "_millerLoop", params: [
                    {var: 1},
                    {var: 3},
                    {var: 4}
                ]});

                task.push({cmd: "GET", out: 0, var: 4, len: curve.Gt.n8});

                opPromises.push(
                    tm.queueAction(task)
                );
            }


            const result = await Promise.all(opPromises);

            tm.startSyncOp();
            const pRes = tm.alloc(curve.Gt.n8);
            tm.instance.exports.ftm_one(pRes);

            for (let i=0; i<result.length; i++) {
                const pMR = tm.allocBuff(result[i][0]);
                tm.instance.exports.ftm_mul(pRes, pMR, pRes);
            }
            tm.instance.exports[curve.name + "_finalExponentiation"](pRes, pRes);

            const pCt = tm.allocBuff(buffCt);

            const r = !!tm.instance.exports.ftm_eq(pRes, pCt);

            tm.endSyncOp();

            return r;
        };

        curve.prepareG1 = function(p) {
            this.tm.startSyncOp();
            const pP = this.tm.allocBuff(p);
            const pPrepP = this.tm.alloc(this.prePSize);
            this.tm.instance.exports[this.name + "_prepareG1"](pP, pPrepP);
            const res = this.tm.getBuff(pPrepP, this.prePSize);
            this.tm.endSyncOp();
            return res;
        };

        curve.prepareG2 = function(q) {
            this.tm.startSyncOp();
            const pQ = this.tm.allocBuff(q);
            const pPrepQ = this.tm.alloc(this.preQSize);
            this.tm.instance.exports[this.name + "_prepareG2"](pQ, pPrepQ);
            const res = this.tm.getBuff(pPrepQ, this.preQSize);
            this.tm.endSyncOp();
            return res;
        };

        curve.millerLoop = function(preP, preQ) {
            this.tm.startSyncOp();
            const pPreP = this.tm.allocBuff(preP);
            const pPreQ = this.tm.allocBuff(preQ);
            const pRes = this.tm.alloc(this.Gt.n8);
            this.tm.instance.exports[this.name + "_millerLoop"](pPreP, pPreQ, pRes);
            const res = this.tm.getBuff(pRes, this.Gt.n8);
            this.tm.endSyncOp();
            return res;
        };

        curve.finalExponentiation = function(a) {
            this.tm.startSyncOp();
            const pA = this.tm.allocBuff(a);
            const pRes = this.tm.alloc(this.Gt.n8);
            this.tm.instance.exports[this.name + "_finalExponentiation"](pA, pRes);
            const res = this.tm.getBuff(pRes, this.Gt.n8);
            this.tm.endSyncOp();
            return res;
        };

    }

    const pTSizes = [
        1 ,  1,  1,  1,    2,  3,  4,  5,
        6 ,  7,  7,  8,    9, 10, 11, 12,
        13, 13, 14, 15,   16, 16, 17, 17,
        17, 17, 17, 17,   17, 17, 17, 17
    ];

    function buildMultiexp(curve, groupName) {
        const G = curve[groupName];
        const tm = G.tm;
        async function _multiExpChunk(buffBases, buffScalars, inType, logger, logText) {
            if ( ! (buffBases instanceof Uint8Array) ) {
                if (logger) logger.error(`${logText} _multiExpChunk buffBases is not Uint8Array`);
                throw new Error(`${logText} _multiExpChunk buffBases is not Uint8Array`);
            }
            if ( ! (buffScalars instanceof Uint8Array) ) {
                if (logger) logger.error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);
                throw new Error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);
            }
            inType = inType || "affine";

            let sGIn;
            let fnName;
            if (groupName == "G1") {
                if (inType == "affine") {
                    fnName = "g1m_multiexpAffine_chunk";
                    sGIn = G.F.n8*2;
                } else {
                    fnName = "g1m_multiexp_chunk";
                    sGIn = G.F.n8*3;
                }
            } else if (groupName == "G2") {
                if (inType == "affine") {
                    fnName = "g2m_multiexpAffine_chunk";
                    sGIn = G.F.n8*2;
                } else {
                    fnName = "g2m_multiexp_chunk";
                    sGIn = G.F.n8*3;
                }
            } else {
                throw new Error("Invalid group");
            }
            const nPoints = Math.floor(buffBases.byteLength / sGIn);

            if (nPoints == 0) return G.zero;
            const sScalar = Math.floor(buffScalars.byteLength / nPoints);
            if( sScalar * nPoints != buffScalars.byteLength) {
                throw new Error("Scalar size does not match");
            }

            const bitChunkSize = pTSizes[log2$1(nPoints)];
            const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;

            const opPromises = [];
            for (let i=0; i<nChunks; i++) {
                const task = [
                    {cmd: "ALLOCSET", var: 0, buff: buffBases},
                    {cmd: "ALLOCSET", var: 1, buff: buffScalars},
                    {cmd: "ALLOC", var: 2, len: G.F.n8*3},
                    {cmd: "CALL", fnName: fnName, params: [
                        {var: 0},
                        {var: 1},
                        {val: sScalar},
                        {val: nPoints},
                        {val: i*bitChunkSize},
                        {val: Math.min(sScalar*8 - i*bitChunkSize, bitChunkSize)},
                        {var: 2}
                    ]},
                    {cmd: "GET", out: 0, var: 2, len: G.F.n8*3}
                ];
                opPromises.push(
                    G.tm.queueAction(task)
                );
            }

            const result = await Promise.all(opPromises);

            let res = G.zero;
            for (let i=result.length-1; i>=0; i--) {
                if (!G.isZero(res)) {
                    for (let j=0; j<bitChunkSize; j++) res = G.double(res);
                }
                res = G.add(res, result[i][0]);
            }

            return res;
        }

        async function _multiExp(buffBases, buffScalars, inType, logger, logText) {
            const MAX_CHUNK_SIZE = 1 << 22;
            const MIN_CHUNK_SIZE = 1 << 10;
            let sGIn;

            if (groupName == "G1") {
                if (inType == "affine") {
                    sGIn = G.F.n8*2;
                } else {
                    sGIn = G.F.n8*3;
                }
            } else if (groupName == "G2") {
                if (inType == "affine") {
                    sGIn = G.F.n8*2;
                } else {
                    sGIn = G.F.n8*3;
                }
            } else {
                throw new Error("Invalid group");
            }

            const nPoints = Math.floor(buffBases.byteLength / sGIn);
            const sScalar = Math.floor(buffScalars.byteLength / nPoints);
            if( sScalar * nPoints != buffScalars.byteLength) {
                throw new Error("Scalar size does not match");
            }

            const bitChunkSize = pTSizes[log2$1(nPoints)];
            const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;

            let chunkSize;
            chunkSize = Math.floor(nPoints / (tm.concurrency /nChunks));
            if (chunkSize>MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;
            if (chunkSize<MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;

            const opPromises = [];
            for (let i=0; i<nPoints; i += chunkSize) {
                if (logger) logger.debug(`Multiexp start: ${logText}: ${i}/${nPoints}`);
                const n= Math.min(nPoints - i, chunkSize);
                const buffBasesChunk = buffBases.slice(i*sGIn, (i+n)*sGIn);
                const buffScalarsChunk = buffScalars.slice(i*sScalar, (i+n)*sScalar);
                opPromises.push(_multiExpChunk(buffBasesChunk, buffScalarsChunk, inType, logger, logText).then( (r) => {
                    if (logger) logger.debug(`Multiexp end: ${logText}: ${i}/${nPoints}`);
                    return r;
                }));
            }

            const result = await Promise.all(opPromises);

            let res = G.zero;
            for (let i=result.length-1; i>=0; i--) {
                res = G.add(res, result[i]);
            }

            return res;
        }

        G.multiExp = async function multiExpAffine(buffBases, buffScalars, logger, logText) {
            return await _multiExp(buffBases, buffScalars, "jacobian", logger, logText);
        };
        G.multiExpAffine = async function multiExpAffine(buffBases, buffScalars, logger, logText) {
            return await _multiExp(buffBases, buffScalars, "affine", logger, logText);
        };
    }

    function buildFFT(curve, groupName) {
        const G = curve[groupName];
        const Fr = curve.Fr;
        const tm = G.tm;
        async function _fft(buff, inverse, inType, outType, logger, loggerTxt) {

            inType = inType || "affine";
            outType = outType || "affine";
            const MAX_BITS_THREAD = 14;

            let sIn, sMid, sOut, fnIn2Mid, fnMid2Out, fnFFTMix, fnFFTJoin, fnFFTFinal;
            if (groupName == "G1") {
                if (inType == "affine") {
                    sIn = G.F.n8*2;
                    fnIn2Mid = "g1m_batchToJacobian";
                } else {
                    sIn = G.F.n8*3;
                }
                sMid = G.F.n8*3;
                if (inverse) {
                    fnFFTFinal = "g1m_fftFinal";
                }
                fnFFTJoin = "g1m_fftJoin";
                fnFFTMix = "g1m_fftMix";

                if (outType == "affine") {
                    sOut = G.F.n8*2;
                    fnMid2Out = "g1m_batchToAffine";
                } else {
                    sOut = G.F.n8*3;
                }

            } else if (groupName == "G2") {
                if (inType == "affine") {
                    sIn = G.F.n8*2;
                    fnIn2Mid = "g2m_batchToJacobian";
                } else {
                    sIn = G.F.n8*3;
                }
                sMid = G.F.n8*3;
                if (inverse) {
                    fnFFTFinal = "g2m_fftFinal";
                }
                fnFFTJoin = "g2m_fftJoin";
                fnFFTMix = "g2m_fftMix";
                if (outType == "affine") {
                    sOut = G.F.n8*2;
                    fnMid2Out = "g2m_batchToAffine";
                } else {
                    sOut = G.F.n8*3;
                }
            } else if (groupName == "Fr") {
                sIn = G.n8;
                sMid = G.n8;
                sOut = G.n8;
                if (inverse) {
                    fnFFTFinal = "frm_fftFinal";
                }
                fnFFTMix = "frm_fftMix";
                fnFFTJoin = "frm_fftJoin";
            }


            let returnArray = false;
            if (Array.isArray(buff)) {
                buff = array2buffer(buff, sIn);
                returnArray = true;
            } else {
                buff = buff.slice(0, buff.byteLength);
            }

            const nPoints = buff.byteLength / sIn;
            const bits = log2$1(nPoints);

            if  ((1 << bits) != nPoints) {
                throw new Error("fft must be multiple of 2" );
            }

            if (bits == Fr.s +1) {
                let buffOut;

                if (inverse) {
                    buffOut =  await _fftExtInv(buff, inType, outType, logger, loggerTxt);
                } else {
                    buffOut =  await _fftExt(buff, inType, outType, logger, loggerTxt);
                }

                if (returnArray) {
                    return buffer2array(buffOut, sOut);
                } else {
                    return buffOut;
                }
            }

            let inv;
            if (inverse) {
                inv = Fr.inv(Fr.e(nPoints));
            }

            let buffOut;

            buffReverseBits(buff, sIn);

            let chunks;
            let pointsInChunk = Math.min(1 << MAX_BITS_THREAD, nPoints);
            let nChunks = nPoints / pointsInChunk;

            while ((nChunks < tm.concurrency)&&(pointsInChunk>=16)) {
                nChunks *= 2;
                pointsInChunk /= 2;
            }

            const l2Chunk = log2$1(pointsInChunk);

            const promises = [];
            for (let i = 0; i< nChunks; i++) {
                if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix start: ${i}/${nChunks}`);
                const task = [];
                task.push({cmd: "ALLOC", var: 0, len: sMid*pointsInChunk});
                const buffChunk = buff.slice( (pointsInChunk * i)*sIn, (pointsInChunk * (i+1))*sIn);
                task.push({cmd: "SET", var: 0, buff: buffChunk});
                if (fnIn2Mid) {
                    task.push({cmd: "CALL", fnName:fnIn2Mid, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});
                }
                for (let j=1; j<=l2Chunk;j++) {
                    task.push({cmd: "CALL", fnName:fnFFTMix, params: [{var:0}, {val: pointsInChunk}, {val: j}]});
                }

                if (l2Chunk==bits) {
                    if (fnFFTFinal) {
                        task.push({cmd: "ALLOCSET", var: 1, buff: inv});
                        task.push({cmd: "CALL", fnName: fnFFTFinal,  params:[
                            {var: 0},
                            {val: pointsInChunk},
                            {var: 1},
                        ]});
                    }
                    if (fnMid2Out) {
                        task.push({cmd: "CALL", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});
                    }
                    task.push({cmd: "GET", out: 0, var: 0, len: pointsInChunk*sOut});
                } else {
                    task.push({cmd: "GET", out:0, var: 0, len: sMid*pointsInChunk});
                }
                promises.push(tm.queueAction(task).then( (r) => {
                    if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix end: ${i}/${nChunks}`);
                    return r;
                }));
            }

            chunks = await Promise.all(promises);
            for (let i = 0; i< nChunks; i++) chunks[i] = chunks[i][0];

            for (let i = l2Chunk+1;   i<=bits; i++) {
                if (logger) logger.debug(`${loggerTxt}: fft  ${bits}  join: ${i}/${bits}`);
                const nGroups = 1 << (bits - i);
                const nChunksPerGroup = nChunks / nGroups;
                const opPromises = [];
                for (let j=0; j<nGroups; j++) {
                    for (let k=0; k <nChunksPerGroup/2; k++) {
                        const first = Fr.exp( Fr.w[i], k*pointsInChunk);
                        const inc = Fr.w[i];
                        const o1 = j*nChunksPerGroup + k;
                        const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;

                        const task = [];
                        task.push({cmd: "ALLOCSET", var: 0, buff: chunks[o1]});
                        task.push({cmd: "ALLOCSET", var: 1, buff: chunks[o2]});
                        task.push({cmd: "ALLOCSET", var: 2, buff: first});
                        task.push({cmd: "ALLOCSET", var: 3, buff: inc});
                        task.push({cmd: "CALL", fnName: fnFFTJoin,  params:[
                            {var: 0},
                            {var: 1},
                            {val: pointsInChunk},
                            {var: 2},
                            {var: 3}
                        ]});
                        if (i==bits) {
                            if (fnFFTFinal) {
                                task.push({cmd: "ALLOCSET", var: 4, buff: inv});
                                task.push({cmd: "CALL", fnName: fnFFTFinal,  params:[
                                    {var: 0},
                                    {val: pointsInChunk},
                                    {var: 4},
                                ]});
                                task.push({cmd: "CALL", fnName: fnFFTFinal,  params:[
                                    {var: 1},
                                    {val: pointsInChunk},
                                    {var: 4},
                                ]});
                            }
                            if (fnMid2Out) {
                                task.push({cmd: "CALL", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});
                                task.push({cmd: "CALL", fnName:fnMid2Out, params: [{var:1}, {val: pointsInChunk}, {var: 1}]});
                            }
                            task.push({cmd: "GET", out: 0, var: 0, len: pointsInChunk*sOut});
                            task.push({cmd: "GET", out: 1, var: 1, len: pointsInChunk*sOut});
                        } else {
                            task.push({cmd: "GET", out: 0, var: 0, len: pointsInChunk*sMid});
                            task.push({cmd: "GET", out: 1, var: 1, len: pointsInChunk*sMid});
                        }
                        opPromises.push(tm.queueAction(task).then( (r) => {
                            if (logger) logger.debug(`${loggerTxt}: fft ${bits} join  ${i}/${bits}  ${j+1}/${nGroups} ${k}/${nChunksPerGroup/2}`);
                            return r;
                        }));
                    }
                }

                const res = await Promise.all(opPromises);
                for (let j=0; j<nGroups; j++) {
                    for (let k=0; k <nChunksPerGroup/2; k++) {
                        const o1 = j*nChunksPerGroup + k;
                        const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;
                        const resChunk = res.shift();
                        chunks[o1] = resChunk[0];
                        chunks[o2] = resChunk[1];
                    }
                }
            }

            if (buff instanceof BigBuffer) {
                buffOut = new BigBuffer(nPoints*sOut);
            } else {
                buffOut = new Uint8Array(nPoints*sOut);
            }
            if (inverse) {
                buffOut.set(chunks[0].slice((pointsInChunk-1)*sOut));
                let p= sOut;
                for (let i=nChunks-1; i>0; i--) {
                    buffOut.set(chunks[i], p);
                    p += pointsInChunk*sOut;
                    delete chunks[i];  // Liberate mem
                }
                buffOut.set(chunks[0].slice(0, (pointsInChunk-1)*sOut), p);
                delete chunks[0];
            } else {
                for (let i=0; i<nChunks; i++) {
                    buffOut.set(chunks[i], pointsInChunk*sOut*i);
                    delete chunks[i];
                }
            }

            if (returnArray) {
                return buffer2array(buffOut, sOut);
            } else {
                return buffOut;
            }
        }

        async function _fftExt(buff, inType, outType, logger, loggerTxt) {
            let b1, b2;
            b1 = buff.slice( 0 , buff.byteLength/2);
            b2 = buff.slice( buff.byteLength/2, buff.byteLength);

            const promises = [];

            [b1, b2] = await _fftJoinExt(b1, b2, "fftJoinExt", Fr.one, Fr.shift, inType, "jacobian", logger, loggerTxt);

            promises.push( _fft(b1, false, "jacobian", outType, logger, loggerTxt));
            promises.push( _fft(b2, false, "jacobian", outType, logger, loggerTxt));

            const res1 = await Promise.all(promises);

            let buffOut;
            if (res1[0].byteLength > (1<<28)) {
                buffOut = new BigBuffer(res1[0].byteLength*2);
            } else {
                buffOut = new Uint8Array(res1[0].byteLength*2);
            }

            buffOut.set(res1[0]);
            buffOut.set(res1[1], res1[0].byteLength);

            return buffOut;
        }

        async function _fftExtInv(buff, inType, outType, logger, loggerTxt) {
            let b1, b2;
            b1 = buff.slice( 0 , buff.byteLength/2);
            b2 = buff.slice( buff.byteLength/2, buff.byteLength);

            const promises = [];

            promises.push( _fft(b1, true, inType, "jacobian", logger, loggerTxt));
            promises.push( _fft(b2, true, inType, "jacobian", logger, loggerTxt));

            [b1, b2] = await Promise.all(promises);

            const res1 = await _fftJoinExt(b1, b2, "fftJoinExtInv", Fr.one, Fr.shiftInv, "jacobian", outType, logger, loggerTxt);

            let buffOut;
            if (res1[0].byteLength > (1<<28)) {
                buffOut = new BigBuffer(res1[0].byteLength*2);
            } else {
                buffOut = new Uint8Array(res1[0].byteLength*2);
            }

            buffOut.set(res1[0]);
            buffOut.set(res1[1], res1[0].byteLength);

            return buffOut;
        }


        async function _fftJoinExt(buff1, buff2, fn, first, inc, inType, outType, logger, loggerTxt) {
            const MAX_CHUNK_SIZE = 1<<16;
            const MIN_CHUNK_SIZE = 1<<4;

            let fnName;
            let fnIn2Mid, fnMid2Out;
            let sOut, sIn, sMid;

            if (groupName == "G1") {
                if (inType == "affine") {
                    sIn = G.F.n8*2;
                    fnIn2Mid = "g1m_batchToJacobian";
                } else {
                    sIn = G.F.n8*3;
                }
                sMid = G.F.n8*3;
                fnName = "g1m_"+fn;
                if (outType == "affine") {
                    fnMid2Out = "g1m_batchToAffine";
                    sOut = G.F.n8*2;
                } else {
                    sOut = G.F.n8*3;
                }
            } else if (groupName == "G2") {
                if (inType == "affine") {
                    sIn = G.F.n8*2;
                    fnIn2Mid = "g2m_batchToJacobian";
                } else {
                    sIn = G.F.n8*3;
                }
                fnName = "g2m_"+fn;
                sMid = G.F.n8*3;
                if (outType == "affine") {
                    fnMid2Out = "g2m_batchToAffine";
                    sOut = G.F.n8*2;
                } else {
                    sOut = G.F.n8*3;
                }
            } else if (groupName == "Fr") {
                sIn = Fr.n8;
                sOut = Fr.n8;
                sMid = Fr.n8;
                fnName = "frm_" + fn;
            } else {
                throw new Error("Invalid group");
            }

            if (buff1.byteLength != buff2.byteLength) {
                throw new Error("Invalid buffer size");
            }
            const nPoints = Math.floor(buff1.byteLength / sIn);
            if (nPoints != 1 << log2$1(nPoints)) {
                throw new Error("Invalid number of points");
            }

            let chunkSize = Math.floor(nPoints /tm.concurrency);
            if (chunkSize < MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;
            if (chunkSize > MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;

            const opPromises = [];

            for (let i=0; i<nPoints; i += chunkSize) {
                if (logger) logger.debug(`${loggerTxt}: fftJoinExt Start: ${i}/${nPoints}`);
                const n= Math.min(nPoints - i, chunkSize);

                const firstChunk = Fr.mul(first, Fr.exp( inc, i));
                const task = [];

                const b1 = buff1.slice(i*sIn, (i+n)*sIn);
                const b2 = buff2.slice(i*sIn, (i+n)*sIn);

                task.push({cmd: "ALLOC", var: 0, len: sMid*n});
                task.push({cmd: "SET", var: 0, buff: b1});
                task.push({cmd: "ALLOC", var: 1, len: sMid*n});
                task.push({cmd: "SET", var: 1, buff: b2});
                task.push({cmd: "ALLOCSET", var: 2, buff: firstChunk});
                task.push({cmd: "ALLOCSET", var: 3, buff: inc});
                if (fnIn2Mid) {
                    task.push({cmd: "CALL", fnName:fnIn2Mid, params: [{var:0}, {val: n}, {var: 0}]});
                    task.push({cmd: "CALL", fnName:fnIn2Mid, params: [{var:1}, {val: n}, {var: 1}]});
                }
                task.push({cmd: "CALL", fnName: fnName, params: [
                    {var: 0},
                    {var: 1},
                    {val: n},
                    {var: 2},
                    {var: 3},
                    {val: Fr.s},
                ]});
                if (fnMid2Out) {
                    task.push({cmd: "CALL", fnName:fnMid2Out, params: [{var:0}, {val: n}, {var: 0}]});
                    task.push({cmd: "CALL", fnName:fnMid2Out, params: [{var:1}, {val: n}, {var: 1}]});
                }
                task.push({cmd: "GET", out: 0, var: 0, len: n*sOut});
                task.push({cmd: "GET", out: 1, var: 1, len: n*sOut});
                opPromises.push(
                    tm.queueAction(task).then( (r) => {
                        if (logger) logger.debug(`${loggerTxt}: fftJoinExt End: ${i}/${nPoints}`);
                        return r;
                    })
                );
            }

            const result = await Promise.all(opPromises);

            let fullBuffOut1;
            let fullBuffOut2;
            if (nPoints * sOut > 1<<28) {
                fullBuffOut1 = new BigBuffer(nPoints*sOut);
                fullBuffOut2 = new BigBuffer(nPoints*sOut);
            } else {
                fullBuffOut1 = new Uint8Array(nPoints*sOut);
                fullBuffOut2 = new Uint8Array(nPoints*sOut);
            }

            let p =0;
            for (let i=0; i<result.length; i++) {
                fullBuffOut1.set(result[i][0], p);
                fullBuffOut2.set(result[i][1], p);
                p+=result[i][0].byteLength;
            }

            return [fullBuffOut1, fullBuffOut2];
        }


        G.fft = async function(buff, inType, outType, logger, loggerTxt) {
            return await _fft(buff, false, inType, outType, logger, loggerTxt);
        };

        G.ifft = async function(buff, inType, outType, logger, loggerTxt) {
            return await _fft(buff, true, inType, outType, logger, loggerTxt);
        };

        G.lagrangeEvaluations = async function (buff, inType, outType, logger, loggerTxt) {
            inType = inType || "affine";
            outType = outType || "affine";

            let sIn;
            if (groupName == "G1") {
                if (inType == "affine") {
                    sIn = G.F.n8*2;
                } else {
                    sIn = G.F.n8*3;
                }
            } else if (groupName == "G2") {
                if (inType == "affine") {
                    sIn = G.F.n8*2;
                } else {
                    sIn = G.F.n8*3;
                }
            } else if (groupName == "Fr") {
                sIn = Fr.n8;
            } else {
                throw new Error("Invalid group");
            }

            const nPoints = buff.byteLength /sIn;
            const bits = log2$1(nPoints);

            if ((2 ** bits)*sIn != buff.byteLength) {
                if (logger) logger.error("lagrangeEvaluations iinvalid input size");
                throw new Error("lagrangeEvaluations invalid Input size");
            }

            if (bits <= Fr.s) {
                return await G.ifft(buff, inType, outType, logger, loggerTxt);
            }

            if (bits > Fr.s+1) {
                if (logger) logger.error("lagrangeEvaluations input too big");
                throw new Error("lagrangeEvaluations input too big");
            }

            let t0 = buff.slice(0, buff.byteLength/2);
            let t1 = buff.slice(buff.byteLength/2, buff.byteLength);


            const shiftToSmallM = Fr.exp(Fr.shift, nPoints/2);
            const sConst = Fr.inv( Fr.sub(Fr.one, shiftToSmallM));

            [t0, t1] = await _fftJoinExt(t0, t1, "prepareLagrangeEvaluation", sConst, Fr.shiftInv, inType, "jacobian", logger, loggerTxt + " prep");

            const promises = [];

            promises.push( _fft(t0, true, "jacobian", outType, logger, loggerTxt + " t0"));
            promises.push( _fft(t1, true, "jacobian", outType, logger, loggerTxt + " t1"));

            [t0, t1] = await Promise.all(promises);

            let buffOut;
            if (t0.byteLength > (1<<28)) {
                buffOut = new BigBuffer(t0.byteLength*2);
            } else {
                buffOut = new Uint8Array(t0.byteLength*2);
            }

            buffOut.set(t0);
            buffOut.set(t1, t0.byteLength);

            return buffOut;
        };

        G.fftMix = async function fftMix(buff) {
            const sG = G.F.n8*3;
            let fnName, fnFFTJoin;
            if (groupName == "G1") {
                fnName = "g1m_fftMix";
                fnFFTJoin = "g1m_fftJoin";
            } else if (groupName == "G2") {
                fnName = "g2m_fftMix";
                fnFFTJoin = "g2m_fftJoin";
            } else if (groupName == "Fr") {
                fnName = "frm_fftMix";
                fnFFTJoin = "frm_fftJoin";
            } else {
                throw new Error("Invalid group");
            }

            const nPoints = Math.floor(buff.byteLength / sG);
            const power = log2$1(nPoints);

            let nChunks = 1 << log2$1(tm.concurrency);

            if (nPoints <= nChunks*2) nChunks = 1;

            const pointsPerChunk = nPoints / nChunks;

            const powerChunk = log2$1(pointsPerChunk);

            const opPromises = [];
            for (let i=0; i<nChunks; i++) {
                const task = [];
                const b = buff.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);
                task.push({cmd: "ALLOCSET", var: 0, buff: b});
                for (let j=1; j<=powerChunk; j++) {
                    task.push({cmd: "CALL", fnName: fnName, params: [
                        {var: 0},
                        {val: pointsPerChunk},
                        {val: j}
                    ]});
                }
                task.push({cmd: "GET", out: 0, var: 0, len: pointsPerChunk*sG});
                opPromises.push(
                    tm.queueAction(task)
                );
            }

            const result = await Promise.all(opPromises);

            const chunks = [];
            for (let i=0; i<result.length; i++) chunks[i] = result[i][0];


            for (let i = powerChunk+1; i<=power; i++) {
                const nGroups = 1 << (power - i);
                const nChunksPerGroup = nChunks / nGroups;
                const opPromises = [];
                for (let j=0; j<nGroups; j++) {
                    for (let k=0; k <nChunksPerGroup/2; k++) {
                        const first = Fr.exp( Fr.w[i], k*pointsPerChunk);
                        const inc = Fr.w[i];
                        const o1 = j*nChunksPerGroup + k;
                        const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;

                        const task = [];
                        task.push({cmd: "ALLOCSET", var: 0, buff: chunks[o1]});
                        task.push({cmd: "ALLOCSET", var: 1, buff: chunks[o2]});
                        task.push({cmd: "ALLOCSET", var: 2, buff: first});
                        task.push({cmd: "ALLOCSET", var: 3, buff: inc});
                        task.push({cmd: "CALL", fnName: fnFFTJoin,  params:[
                            {var: 0},
                            {var: 1},
                            {val: pointsPerChunk},
                            {var: 2},
                            {var: 3}
                        ]});
                        task.push({cmd: "GET", out: 0, var: 0, len: pointsPerChunk*sG});
                        task.push({cmd: "GET", out: 1, var: 1, len: pointsPerChunk*sG});
                        opPromises.push(tm.queueAction(task));
                    }
                }

                const res = await Promise.all(opPromises);
                for (let j=0; j<nGroups; j++) {
                    for (let k=0; k <nChunksPerGroup/2; k++) {
                        const o1 = j*nChunksPerGroup + k;
                        const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;
                        const resChunk = res.shift();
                        chunks[o1] = resChunk[0];
                        chunks[o2] = resChunk[1];
                    }
                }
            }

            let fullBuffOut;
            if (buff instanceof BigBuffer) {
                fullBuffOut = new BigBuffer(nPoints*sG);
            } else {
                fullBuffOut = new Uint8Array(nPoints*sG);
            }
            let p =0;
            for (let i=0; i<nChunks; i++) {
                fullBuffOut.set(chunks[i], p);
                p+=chunks[i].byteLength;
            }

            return fullBuffOut;
        };

        G.fftJoin = async function fftJoin(buff1, buff2, first, inc) {
            const sG = G.F.n8*3;
            let fnName;
            if (groupName == "G1") {
                fnName = "g1m_fftJoin";
            } else if (groupName == "G2") {
                fnName = "g2m_fftJoin";
            } else if (groupName == "Fr") {
                fnName = "frm_fftJoin";
            } else {
                throw new Error("Invalid group");
            }

            if (buff1.byteLength != buff2.byteLength) {
                throw new Error("Invalid buffer size");
            }
            const nPoints = Math.floor(buff1.byteLength / sG);
            if (nPoints != 1 << log2$1(nPoints)) {
                throw new Error("Invalid number of points");
            }

            let nChunks = 1 << log2$1(tm.concurrency);
            if (nPoints <= nChunks*2) nChunks = 1;

            const pointsPerChunk = nPoints / nChunks;


            const opPromises = [];
            for (let i=0; i<nChunks; i++) {
                const task = [];

                const firstChunk = Fr.mul(first, Fr.exp(inc, i*pointsPerChunk));
                const b1 = buff1.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);
                const b2 = buff2.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);
                task.push({cmd: "ALLOCSET", var: 0, buff: b1});
                task.push({cmd: "ALLOCSET", var: 1, buff: b2});
                task.push({cmd: "ALLOCSET", var: 2, buff: firstChunk});
                task.push({cmd: "ALLOCSET", var: 3, buff: inc});
                task.push({cmd: "CALL", fnName: fnName, params: [
                    {var: 0},
                    {var: 1},
                    {val: pointsPerChunk},
                    {var: 2},
                    {var: 3}
                ]});
                task.push({cmd: "GET", out: 0, var: 0, len: pointsPerChunk*sG});
                task.push({cmd: "GET", out: 1, var: 1, len: pointsPerChunk*sG});
                opPromises.push(
                    tm.queueAction(task)
                );

            }


            const result = await Promise.all(opPromises);

            let fullBuffOut1;
            let fullBuffOut2;
            if (buff1 instanceof BigBuffer) {
                fullBuffOut1 = new BigBuffer(nPoints*sG);
                fullBuffOut2 = new BigBuffer(nPoints*sG);
            } else {
                fullBuffOut1 = new Uint8Array(nPoints*sG);
                fullBuffOut2 = new Uint8Array(nPoints*sG);
            }

            let p =0;
            for (let i=0; i<result.length; i++) {
                fullBuffOut1.set(result[i][0], p);
                fullBuffOut2.set(result[i][1], p);
                p+=result[i][0].byteLength;
            }

            return [fullBuffOut1, fullBuffOut2];
        };



        G.fftFinal =  async function fftFinal(buff, factor) {
            const sG = G.F.n8*3;
            const sGout = G.F.n8*2;
            let fnName, fnToAffine;
            if (groupName == "G1") {
                fnName = "g1m_fftFinal";
                fnToAffine = "g1m_batchToAffine";
            } else if (groupName == "G2") {
                fnName = "g2m_fftFinal";
                fnToAffine = "g2m_batchToAffine";
            } else {
                throw new Error("Invalid group");
            }

            const nPoints = Math.floor(buff.byteLength / sG);
            if (nPoints != 1 << log2$1(nPoints)) {
                throw new Error("Invalid number of points");
            }

            const pointsPerChunk = Math.floor(nPoints / tm.concurrency);

            const opPromises = [];
            for (let i=0; i<tm.concurrency; i++) {
                let n;
                if (i< tm.concurrency-1) {
                    n = pointsPerChunk;
                } else {
                    n = nPoints - i*pointsPerChunk;
                }
                if (n==0) continue;
                const task = [];
                const b = buff.slice((i* pointsPerChunk)*sG, (i*pointsPerChunk+n)*sG);
                task.push({cmd: "ALLOCSET", var: 0, buff: b});
                task.push({cmd: "ALLOCSET", var: 1, buff: factor});
                task.push({cmd: "CALL", fnName: fnName, params: [
                    {var: 0},
                    {val: n},
                    {var: 1},
                ]});
                task.push({cmd: "CALL", fnName: fnToAffine, params: [
                    {var: 0},
                    {val: n},
                    {var: 0},
                ]});
                task.push({cmd: "GET", out: 0, var: 0, len: n*sGout});
                opPromises.push(
                    tm.queueAction(task)
                );

            }

            const result = await Promise.all(opPromises);

            let fullBuffOut;
            if (buff instanceof BigBuffer) {
                fullBuffOut = new BigBuffer(nPoints*sGout);
            } else {
                fullBuffOut = new Uint8Array(nPoints*sGout);
            }

            let p =0;
            for (let i=result.length-1; i>=0; i--) {
                fullBuffOut.set(result[i][0], p);
                p+=result[i][0].byteLength;
            }

            return fullBuffOut;
        };
    }

    async function buildEngine(params) {

        const tm = await buildThreadManager(params.wasm, params.singleThread);


        const curve = {};

        curve.q = e(params.wasm.q);
        curve.r = e(params.wasm.r);
        curve.name = params.name;
        curve.tm = tm;
        curve.prePSize = params.wasm.prePSize;
        curve.preQSize = params.wasm.preQSize;
        curve.Fr = new WasmField1(tm, "frm", params.n8r, params.r);
        curve.F1 = new WasmField1(tm, "f1m", params.n8q, params.q);
        curve.F2 = new WasmField2(tm, "f2m", curve.F1);
        curve.G1 = new WasmCurve(tm, "g1m", curve.F1, params.wasm.pG1gen, params.wasm.pG1b, params.cofactorG1);
        curve.G2 = new WasmCurve(tm, "g2m", curve.F2, params.wasm.pG2gen, params.wasm.pG2b, params.cofactorG2);
        curve.F6 = new WasmField3(tm, "f6m", curve.F2);
        curve.F12 = new WasmField2(tm, "ftm", curve.F6);

        curve.Gt = curve.F12;

        buildBatchApplyKey(curve, "G1");
        buildBatchApplyKey(curve, "G2");
        buildBatchApplyKey(curve, "Fr");

        buildMultiexp(curve, "G1");
        buildMultiexp(curve, "G2");

        buildFFT(curve, "G1");
        buildFFT(curve, "G2");
        buildFFT(curve, "Fr");

        buildPairing(curve);

        curve.array2buffer = function(arr, sG) {
            const buff = new Uint8Array(sG*arr.length);

            for (let i=0; i<arr.length; i++) {
                buff.set(arr[i], i*sG);
            }

            return buff;
        };

        curve.buffer2array = function(buff , sG) {
            const n= buff.byteLength / sG;
            const arr = new Array(n);
            for (let i=0; i<n; i++) {
                arr[i] = buff.slice(i*sG, i*sG+sG);
            }
            return arr;
        };

        return curve;
    }

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmbuilder

        wasmbuilder is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmbuilder is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.
    */

    function toNumber(n) {
        let v;
        if (typeof n=="string") {
            if (n.slice(0,2).toLowerCase() == "0x") {
                v = BigInteger(n.slice(2),16);
            } else {
                v = BigInteger(n);
            }
        } else {
            v = BigInteger(n);
        }
        return v;
    }

    function u32(n) {
        const b = [];
        const v = toNumber(n);
        b.push(v.and(0xFF).toJSNumber());
        b.push(v.shiftRight(8).and(0xFF).toJSNumber());
        b.push(v.shiftRight(16).and(0xFF).toJSNumber());
        b.push(v.shiftRight(24).and(0xFF).toJSNumber());
        return b;
    }

    function u64(n) {
        const b = [];
        const v = toNumber(n);
        b.push(v.and(0xFF).toJSNumber());
        b.push(v.shiftRight(8).and(0xFF).toJSNumber());
        b.push(v.shiftRight(16).and(0xFF).toJSNumber());
        b.push(v.shiftRight(24).and(0xFF).toJSNumber());
        b.push(v.shiftRight(32).and(0xFF).toJSNumber());
        b.push(v.shiftRight(40).and(0xFF).toJSNumber());
        b.push(v.shiftRight(48).and(0xFF).toJSNumber());
        b.push(v.shiftRight(56).and(0xFF).toJSNumber());
        return b;
    }

    function toUTF8Array(str) {
        var utf8 = [];
        for (var i=0; i < str.length; i++) {
            var charcode = str.charCodeAt(i);
            if (charcode < 0x80) utf8.push(charcode);
            else if (charcode < 0x800) {
                utf8.push(0xc0 | (charcode >> 6),
                          0x80 | (charcode & 0x3f));
            }
            else if (charcode < 0xd800 || charcode >= 0xe000) {
                utf8.push(0xe0 | (charcode >> 12),
                          0x80 | ((charcode>>6) & 0x3f),
                          0x80 | (charcode & 0x3f));
            }
            // surrogate pair
            else {
                i++;
                // UTF-16 encodes 0x10000-0x10FFFF by
                // subtracting 0x10000 and splitting the
                // 20 bits of 0x0-0xFFFFF into two halves
                charcode = 0x10000 + (((charcode & 0x3ff)<<10)
                          | (str.charCodeAt(i) & 0x3ff));
                utf8.push(0xf0 | (charcode >>18),
                          0x80 | ((charcode>>12) & 0x3f),
                          0x80 | ((charcode>>6) & 0x3f),
                          0x80 | (charcode & 0x3f));
            }
        }
        return utf8;
    }

    function string(str) {
        const bytes = toUTF8Array(str);
        return [ ...varuint32(bytes.length), ...bytes ];
    }

    function varuint(n) {
        const code = [];
        let v = toNumber(n);
        if (v.isNegative()) throw new Error("Number cannot be negative");
        while (!v.isZero()) {
            code.push(v.and(0x7F).toJSNumber());
            v = v.shiftRight(7);
        }
        if (code.length==0) code.push(0);
        for (let i=0; i<code.length-1; i++) {
            code[i] = code[i] | 0x80;
        }
        return code;
    }

    function varint(_n) {
        let n, sign;
        const bits = _n.bitLength().toJSNumber();
        if (_n<0) {
            sign = true;
            n = BigInteger.one.shiftLeft(bits).add(_n);
        } else {
            sign = false;
            n = toNumber(_n);
        }
        const paddingBits = 7 - (bits % 7);

        const padding = BigInteger.one.shiftLeft(paddingBits).minus(1).shiftLeft(bits);
        const paddingMask = ((1 << (7 - paddingBits))-1) | 0x80;

        const code = varuint(n.add(padding));

        if (!sign) {
            code[code.length-1] = code[code.length-1] & paddingMask;
        }

        return code;
    }

    function varint32(n) {
        let v = toNumber(n);
        if (v.greater(BigInteger("FFFFFFFF", 16))) throw new Error("Number too big");
        if (v.greater(BigInteger("7FFFFFFF", 16))) v = v.minus(BigInteger("100000000",16));
        if (v.lesser(BigInteger("-80000000", 16))) throw new Error("Number too small");
        return varint(v);
    }

    function varint64(n) {
        let v = toNumber(n);
        if (v.greater(BigInteger("FFFFFFFFFFFFFFFF", 16))) throw new Error("Number too big");
        if (v.greater(BigInteger("7FFFFFFFFFFFFFFF", 16))) v = v.minus(BigInteger("10000000000000000",16));
        if (v.lesser(BigInteger("-8000000000000000", 16))) throw new Error("Number too small");
        return varint(v);
    }

    function varuint32(n) {
        let v = toNumber(n);
        if (v.greater(BigInteger("FFFFFFFF", 16))) throw new Error("Number too big");
        return varuint(v);
    }

    function varuint64(n) {
        let v = toNumber(n);
        if (v.greater(BigInteger("FFFFFFFFFFFFFFFF", 16))) throw new Error("Number too big");
        return varuint(v);
    }

    function toHexString(byteArray) {
        return Array.from(byteArray, function(byte) {
            return ("0" + (byte & 0xFF).toString(16)).slice(-2);
        }).join("");
    }

    function ident(text) {
        if (typeof text === "string") {
            let lines = text.split("\n");
            for (let i=0; i<lines.length; i++) {
                if (lines[i]) lines[i] = "    "+lines[i];
            }
            return lines.join("\n");
        } else if (Array.isArray(text)) {
            for (let i=0; i<text.length; i++ ) {
                text[i] = ident(text[i]);
            }
            return text;
        }
    }

    var toNumber_1 = toNumber;
    var u32_1 = u32;
    var u64_1 = u64;
    var varuint32_1 = varuint32;
    var varuint64_1 = varuint64;
    var varint32_1 = varint32;
    var varint64_1 = varint64;
    var string_1 = string;
    var toHexString_1 = toHexString;
    var ident_1 = ident;

    var utils$1 = {
    	toNumber: toNumber_1,
    	u32: u32_1,
    	u64: u64_1,
    	varuint32: varuint32_1,
    	varuint64: varuint64_1,
    	varint32: varint32_1,
    	varint64: varint64_1,
    	string: string_1,
    	toHexString: toHexString_1,
    	ident: ident_1
    };

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmbuilder

        wasmbuilder is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmbuilder is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.
    */

    class CodeBuilder {
        constructor(func) {
            this.func = func;
            this.functionName = func.functionName;
            this.module = func.module;
        }

        setLocal(localName, valCode) {
            const idx = this.func.localIdxByName[localName];
            if (idx === undefined)
                throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);
            return [...valCode, 0x21, ...utils$1.varuint32( idx )];
        }

        teeLocal(localName, valCode) {
            const idx = this.func.localIdxByName[localName];
            if (idx === undefined)
                throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);
            return [...valCode, 0x22, ...utils$1.varuint32( idx )];
        }

        getLocal(localName) {
            const idx = this.func.localIdxByName[localName];
            if (idx === undefined)
                throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);
            return [0x20, ...utils$1.varuint32( idx )];
        }

        i64_load8_s(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default
            return [...idxCode, 0x30, align, ...utils$1.varuint32(offset)];
        }

        i64_load8_u(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default
            return [...idxCode, 0x31, align, ...utils$1.varuint32(offset)];
        }

        i64_load16_s(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default
            return [...idxCode, 0x32, align, ...utils$1.varuint32(offset)];
        }

        i64_load16_u(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default
            return [...idxCode, 0x33, align, ...utils$1.varuint32(offset)];
        }

        i64_load32_s(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default
            return [...idxCode, 0x34, align, ...utils$1.varuint32(offset)];
        }

        i64_load32_u(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default
            return [...idxCode, 0x35, align, ...utils$1.varuint32(offset)];
        }

        i64_load(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 3 : _align;  // 64 bits alignment by default
            return [...idxCode, 0x29, align, ...utils$1.varuint32(offset)];
        }


        i64_store(idxCode, _offset, _align, _codeVal) {
            let offset, align, codeVal;
            if (Array.isArray(_offset)) {
                offset = 0;
                align = 3;
                codeVal = _offset;
            } else if (Array.isArray(_align)) {
                offset = _offset;
                align = 3;
                codeVal = _align;
            } else if (Array.isArray(_codeVal)) {
                offset = _offset;
                align = _align;
                codeVal = _codeVal;
            }
            return [...idxCode, ...codeVal, 0x37, align, ...utils$1.varuint32(offset)];
        }

        i64_store32(idxCode, _offset, _align, _codeVal) {
            let offset, align, codeVal;
            if (Array.isArray(_offset)) {
                offset = 0;
                align = 2;
                codeVal = _offset;
            } else if (Array.isArray(_align)) {
                offset = _offset;
                align = 2;
                codeVal = _align;
            } else if (Array.isArray(_codeVal)) {
                offset = _offset;
                align = _align;
                codeVal = _codeVal;
            }
            return [...idxCode, ...codeVal, 0x3e, align, ...utils$1.varuint32(offset)];
        }


        i64_store16(idxCode, _offset, _align, _codeVal) {
            let offset, align, codeVal;
            if (Array.isArray(_offset)) {
                offset = 0;
                align = 1;
                codeVal = _offset;
            } else if (Array.isArray(_align)) {
                offset = _offset;
                align = 1;
                codeVal = _align;
            } else if (Array.isArray(_codeVal)) {
                offset = _offset;
                align = _align;
                codeVal = _codeVal;
            }
            return [...idxCode, ...codeVal, 0x3d, align, ...utils$1.varuint32(offset)];
        }


        i64_store8(idxCode, _offset, _align, _codeVal) {
            let offset, align, codeVal;
            if (Array.isArray(_offset)) {
                offset = 0;
                align = 0;
                codeVal = _offset;
            } else if (Array.isArray(_align)) {
                offset = _offset;
                align = 0;
                codeVal = _align;
            } else if (Array.isArray(_codeVal)) {
                offset = _offset;
                align = _align;
                codeVal = _codeVal;
            }
            return [...idxCode, ...codeVal, 0x3c, align, ...utils$1.varuint32(offset)];
        }

        i32_load8_s(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default
            return [...idxCode, 0x2c, align, ...utils$1.varuint32(offset)];
        }

        i32_load8_u(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default
            return [...idxCode, 0x2d, align, ...utils$1.varuint32(offset)];
        }

        i32_load16_s(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default
            return [...idxCode, 0x2e, align, ...utils$1.varuint32(offset)];
        }

        i32_load16_u(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default
            return [...idxCode, 0x2f, align, ...utils$1.varuint32(offset)];
        }

        i32_load(idxCode, _offset, _align) {
            const offset = _offset || 0;
            const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default
            return [...idxCode, 0x28, align, ...utils$1.varuint32(offset)];
        }

        i32_store(idxCode, _offset, _align, _codeVal) {
            let offset, align, codeVal;
            if (Array.isArray(_offset)) {
                offset = 0;
                align = 2;
                codeVal = _offset;
            } else if (Array.isArray(_align)) {
                offset = _offset;
                align = 2;
                codeVal = _align;
            } else if (Array.isArray(_codeVal)) {
                offset = _offset;
                align = _align;
                codeVal = _codeVal;
            }
            return [...idxCode, ...codeVal, 0x36, align, ...utils$1.varuint32(offset)];
        }


        i32_store16(idxCode, _offset, _align, _codeVal) {
            let offset, align, codeVal;
            if (Array.isArray(_offset)) {
                offset = 0;
                align = 1;
                codeVal = _offset;
            } else if (Array.isArray(_align)) {
                offset = _offset;
                align = 1;
                codeVal = _align;
            } else if (Array.isArray(_codeVal)) {
                offset = _offset;
                align = _align;
                codeVal = _codeVal;
            }
            return [...idxCode, ...codeVal, 0x3b, align, ...utils$1.varuint32(offset)];
        }

        i32_store8(idxCode, _offset, _align, _codeVal) {
            let offset, align, codeVal;
            if (Array.isArray(_offset)) {
                offset = 0;
                align = 0;
                codeVal = _offset;
            } else if (Array.isArray(_align)) {
                offset = _offset;
                align = 0;
                codeVal = _align;
            } else if (Array.isArray(_codeVal)) {
                offset = _offset;
                align = _align;
                codeVal = _codeVal;
            }
            return [...idxCode, ...codeVal, 0x3a, align, ...utils$1.varuint32(offset)];
        }

        call(fnName, ...args) {
            const idx = this.module.functionIdxByName[fnName];
            if (idx === undefined)
                throw new Error(`Function not defined: Function: ${fnName}`);
            return [...[].concat(...args), 0x10, ...utils$1.varuint32(idx)];
        }

        call_indirect(fnIdx, ...args) {
            return [...[].concat(...args), ...fnIdx, 0x11, 0, 0];
        }

        if(condCode, thenCode, elseCode) {
            if (elseCode) {
                return [...condCode, 0x04, 0x40, ...thenCode, 0x05, ...elseCode, 0x0b];
            } else {
                return [...condCode, 0x04, 0x40, ...thenCode, 0x0b];
            }
        }

        block(bCode) { return [0x02, 0x40, ...bCode, 0x0b]; }
        loop(...args) {
            return [0x03, 0x40, ...[].concat(...[...args]), 0x0b];
        }
        br_if(relPath, condCode) { return [...condCode, 0x0d, ...utils$1.varuint32(relPath)]; }
        br(relPath) { return [0x0c, ...utils$1.varuint32(relPath)]; }
        ret(rCode) { return [...rCode, 0x0f]; }
        drop(dCode) { return [...dCode,  0x1a]; }

        i64_const(num) { return [0x42, ...utils$1.varint64(num)]; }
        i32_const(num) { return [0x41, ...utils$1.varint32(num)]; }


        i64_eqz(opcode) { return [...opcode, 0x50]; }
        i64_eq(op1code, op2code) { return [...op1code, ...op2code, 0x51]; }
        i64_ne(op1code, op2code) { return [...op1code, ...op2code, 0x52]; }
        i64_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x53]; }
        i64_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x54]; }
        i64_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x55]; }
        i64_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x56]; }
        i64_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x57]; }
        i64_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x58]; }
        i64_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x59]; }
        i64_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x5a]; }
        i64_add(op1code, op2code) { return [...op1code, ...op2code, 0x7c]; }
        i64_sub(op1code, op2code) { return [...op1code, ...op2code, 0x7d]; }
        i64_mul(op1code, op2code) { return [...op1code, ...op2code, 0x7e]; }
        i64_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x7f]; }
        i64_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x80]; }
        i64_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x81]; }
        i64_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x82]; }
        i64_and(op1code, op2code) { return [...op1code, ...op2code, 0x83]; }
        i64_or(op1code, op2code) { return [...op1code, ...op2code, 0x84]; }
        i64_xor(op1code, op2code) { return [...op1code, ...op2code, 0x85]; }
        i64_shl(op1code, op2code) { return [...op1code, ...op2code, 0x86]; }
        i64_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x87]; }
        i64_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x88]; }
        i64_extend_i32_s(op1code) { return [...op1code, 0xac]; }
        i64_extend_i32_u(op1code) { return [...op1code, 0xad]; }
        i64_clz(op1code) { return [...op1code, 0x79]; }
        i64_ctz(op1code) { return [...op1code, 0x7a]; }

        i32_eqz(op1code) { return [...op1code, 0x45]; }
        i32_eq(op1code, op2code) { return [...op1code, ...op2code, 0x46]; }
        i32_ne(op1code, op2code) { return [...op1code, ...op2code, 0x47]; }
        i32_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x48]; }
        i32_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x49]; }
        i32_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x4a]; }
        i32_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x4b]; }
        i32_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x4c]; }
        i32_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x4d]; }
        i32_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x4e]; }
        i32_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x4f]; }
        i32_add(op1code, op2code) { return [...op1code, ...op2code, 0x6a]; }
        i32_sub(op1code, op2code) { return [...op1code, ...op2code, 0x6b]; }
        i32_mul(op1code, op2code) { return [...op1code, ...op2code, 0x6c]; }
        i32_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x6d]; }
        i32_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x6e]; }
        i32_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x6f]; }
        i32_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x70]; }
        i32_and(op1code, op2code) { return [...op1code, ...op2code, 0x71]; }
        i32_or(op1code, op2code) { return [...op1code, ...op2code, 0x72]; }
        i32_xor(op1code, op2code) { return [...op1code, ...op2code, 0x73]; }
        i32_shl(op1code, op2code) { return [...op1code, ...op2code, 0x74]; }
        i32_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x75]; }
        i32_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x76]; }
        i32_rotl(op1code, op2code) { return [...op1code, ...op2code, 0x77]; }
        i32_rotr(op1code, op2code) { return [...op1code, ...op2code, 0x78]; }
        i32_wrap_i64(op1code) { return [...op1code, 0xa7]; }
        i32_clz(op1code) { return [...op1code, 0x67]; }
        i32_ctz(op1code) { return [...op1code, 0x68]; }

        unreachable() { return [ 0x0 ]; }

        current_memory() { return [ 0x3f, 0]; }

        comment() { return []; }
    }

    var codebuilder = CodeBuilder;

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmbuilder

        wasmbuilder is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmbuilder is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.
    */

    const typeCodes = {
        "i32": 0x7f,
        "i64": 0x7e,
        "f32": 0x7d,
        "f64": 0x7c,
        "anyfunc": 0x70,
        "func": 0x60,
        "emptyblock": 0x40
    };


    class FunctionBuilder {

        constructor (module, fnName, fnType, moduleName, fieldName) {
            if (fnType == "import") {
                this.fnType = "import";
                this.moduleName = moduleName;
                this.fieldName = fieldName;
            } else if (fnType == "internal") {
                this.fnType = "internal";
            } else {
                throw new Error("Invalid function fnType: " + fnType);
            }
            this.module = module;
            this.fnName = fnName;
            this.params = [];
            this.locals = [];
            this.localIdxByName = {};
            this.code = [];
            this.returnType = null;
            this.nextLocal =0;
        }

        addParam(paramName, paramType) {
            if (this.localIdxByName[paramName])
                throw new Error(`param already exists. Function: ${this.fnName}, Param: ${paramName} `);
            const idx = this.nextLocal++;
            this.localIdxByName[paramName] = idx;
            this.params.push({
                type: paramType
            });
        }

        addLocal(localName, localType, _length) {
            const length = _length || 1;
            if (this.localIdxByName[localName])
                throw new Error(`local already exists. Function: ${this.fnName}, Param: ${localName} `);
            const idx = this.nextLocal++;
            this.localIdxByName[localName] = idx;
            this.locals.push({
                type: localType,
                length: length
            });
        }

        setReturnType(returnType) {
            if (this.returnType)
                throw new Error(`returnType already defined. Function: ${this.fnName}`);
            this.returnType = returnType;
        }

        getSignature() {
            const params = [...utils$1.varuint32(this.params.length), ...this.params.map((p) => typeCodes[p.type])];
            const returns = this.returnType ? [0x01, typeCodes[this.returnType]] : [0];
            return [0x60, ...params, ...returns];
        }

        getBody() {
            const locals = this.locals.map((l) => [
                ...utils$1.varuint32(l.length),
                typeCodes[l.type]
            ]);

            const body = [
                ...utils$1.varuint32(this.locals.length),
                ...[].concat(...locals),
                ...this.code,
                0x0b
            ];
            return [
                ...utils$1.varuint32(body.length),
                ...body
            ];
        }

        addCode(...code) {
            this.code.push(...[].concat(...[...code]));
        }

        getCodeBuilder() {
            return new codebuilder(this);
        }
    }

    var functionbuilder = FunctionBuilder;

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmbuilder

        wasmbuilder is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmbuilder is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.
    */

    class ModuleBuilder$1 {

        constructor() {
            this.functions = [];
            this.functionIdxByName = {};
            this.nImportFunctions = 0;
            this.nInternalFunctions =0;
            this.memory = {
                pagesSize: 1,
                moduleName: "env",
                fieldName: "memory"
            };
            this.free = 8;
            this.datas = [];
            this.modules = {};
            this.exports = [];
            this.functionsTable = [];
        }

        build() {
            this._setSignatures();
            return new Uint8Array([
                ...utils$1.u32(0x6d736100),
                ...utils$1.u32(1),
                ...this._buildType(),
                ...this._buildImport(),
                ...this._buildFunctionDeclarations(),
                ...this._buildFunctionsTable(),
                ...this._buildExports(),
                ...this._buildElements(),
                ...this._buildCode(),
                ...this._buildData()
            ]);
        }

        addFunction(fnName) {
            if (typeof(this.functionIdxByName[fnName]) !== "undefined")
                throw new Error(`Function already defined: ${fnName}`);

            const idx = this.functions.length;
            this.functionIdxByName[fnName] = idx;

            this.functions.push(new functionbuilder(this, fnName, "internal"));

            this.nInternalFunctions++;
            return this.functions[idx];
        }

        addIimportFunction(fnName, moduleName, _fieldName) {
            if (typeof(this.functionIdxByName[fnName]) !== "undefined")
                throw new Error(`Function already defined: ${fnName}`);

            if (  (this.functions.length>0)
                &&(this.functions[this.functions.length-1].type == "internal"))
                throw new Error(`Import functions must be declared before internal: ${fnName}`);

            let fieldName = _fieldName || fnName;

            const idx = this.functions.length;
            this.functionIdxByName[fnName] = idx;

            this.functions.push(new functionbuilder(this, fnName, "import", moduleName, fieldName));

            this.nImportFunctions ++;
            return this.functions[idx];
        }

        setMemory(pagesSize, moduleName, fieldName) {
            this.memory = {
                pagesSize: pagesSize,
                moduleName: moduleName || "env",
                fieldName: fieldName || "memory"
            };
        }

        exportFunction(fnName, _exportName) {
            const exportName = _exportName || fnName;
            if (typeof(this.functionIdxByName[fnName]) === "undefined")
                throw new Error(`Function not defined: ${fnName}`);
            const idx = this.functionIdxByName[fnName];
            if (exportName != fnName) {
                this.functionIdxByName[exportName] = idx;
            }
            this.exports.push({
                exportName: exportName,
                idx: idx
            });
        }

        addFunctionToTable(fnName) {
            const idx = this.functionIdxByName[fnName];
            this.functionsTable.push(idx);
        }

        addData(offset, bytes) {
            this.datas.push({
                offset: offset,
                bytes: bytes
            });
        }

        alloc(a, b) {
            let size;
            let bytes;
            if ((Array.isArray(a) || ArrayBuffer.isView(a)) && (typeof(b) === "undefined")) {
                size = a.length;
                bytes = a;
            } else {
                size = a;
                bytes = b;
            }
            size = (((size-1)>>3) +1)<<3;       // Align to 64 bits.
            const p = this.free;
            this.free += size;
            if (bytes) {
                this.addData(p, bytes);
            }
            return p;
        }

        allocString(s) {
            const encoder = new globalThis.TextEncoder();
            const uint8array = encoder.encode(s);
            return this.alloc([...uint8array, 0]);
        }

        _setSignatures() {
            this.signatures = [];
            const signatureIdxByName = {};
            if (this.functionsTable.length>0) {
                const signature = this.functions[this.functionsTable[0]].getSignature();
                const signatureName = "s_"+utils$1.toHexString(signature);
                signatureIdxByName[signatureName] = 0;
                this.signatures.push(signature);
            }
            for (let i=0; i<this.functions.length; i++) {
                const signature = this.functions[i].getSignature();
                const signatureName = "s_"+utils$1.toHexString(signature);
                if (typeof(signatureIdxByName[signatureName]) === "undefined") {
                    signatureIdxByName[signatureName] = this.signatures.length;
                    this.signatures.push(signature);
                }

                this.functions[i].signatureIdx = signatureIdxByName[signatureName];
            }

        }

        _buildSection(sectionType, section) {
            return [sectionType, ...utils$1.varuint32(section.length), ...section];
        }

        _buildType() {
            return this._buildSection(
                0x01,
                [
                    ...utils$1.varuint32(this.signatures.length),
                    ...[].concat(...this.signatures)
                ]
            );
        }

        _buildImport() {
            const entries = [];
            entries.push([
                ...utils$1.string(this.memory.moduleName),
                ...utils$1.string(this.memory.fieldName),
                0x02,
                0x00,   //Flags no init valua
                ...utils$1.varuint32(this.memory.pagesSize)
            ]);
            for (let i=0; i< this.nImportFunctions; i++) {
                entries.push([
                    ...utils$1.string(this.functions[i].moduleName),
                    ...utils$1.string(this.functions[i].fieldName),
                    0x00,
                    ...utils$1.varuint32(this.functions[i].signatureIdx)
                ]);
            }
            return this._buildSection(
                0x02,
                utils$1.varuint32(entries.length).concat(...entries)
            );
        }

        _buildFunctionDeclarations() {
            const entries = [];
            for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {
                entries.push(...utils$1.varuint32(this.functions[i].signatureIdx));
            }
            return this._buildSection(
                0x03,
                [
                    ...utils$1.varuint32(entries.length),
                    ...[...entries]
                ]
            );
        }

        _buildFunctionsTable() {
            if (this.functionsTable.length == 0) return [];
            return this._buildSection(
                0x04,
                [
                    ...utils$1.varuint32(1),
                    0x70, 0, ...utils$1.varuint32(this.functionsTable.length)
                ]
            );
        }

        _buildElements() {
            if (this.functionsTable.length == 0) return [];
            const entries = [];
            for (let i=0; i<this.functionsTable.length; i++) {
                entries.push(...utils$1.varuint32(this.functionsTable[i]));
            }
            return this._buildSection(
                0x09,
                [
                    ...utils$1.varuint32(1),      // 1 entry
                    ...utils$1.varuint32(0),      // Table (0 in MVP)
                    0x41,                       // offset 0
                    ...utils$1.varint32(0),
                    0x0b,
                    ...utils$1.varuint32(this.functionsTable.length), // Number of elements
                    ...[...entries]
                ]
            );
        }

        _buildExports() {
            const entries = [];
            for (let i=0; i< this.exports.length; i++) {
                entries.push([
                    ...utils$1.string(this.exports[i].exportName),
                    0x00,
                    ...utils$1.varuint32(this.exports[i].idx)
                ]);
            }
            return this._buildSection(
                0x07,
                utils$1.varuint32(entries.length).concat(...entries)
            );
        }

        _buildCode() {
            const entries = [];
            for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {
                entries.push(this.functions[i].getBody());
            }
            return this._buildSection(
                0x0a,
                utils$1.varuint32(entries.length).concat(...entries)
            );
        }

        _buildData() {
            const entries = [];
            entries.push([
                0x00,
                0x41,
                0x00,
                0x0b,
                0x04,
                ...utils$1.u32(this.free)
            ]);
            for (let i=0; i< this.datas.length; i++) {
                entries.push([
                    0x00,
                    0x41,
                    ...utils$1.varint32(this.datas[i].offset),
                    0x0b,
                    ...utils$1.varuint32(this.datas[i].bytes.length),
                    ...this.datas[i].bytes,
                ]);
            }
            return this._buildSection(
                0x0b,
                utils$1.varuint32(entries.length).concat(...entries)
            );
        }

    }

    var modulebuilder = ModuleBuilder$1;

    /*
        Copyright 2019 0KIMS association.

        This file is part of wasmbuilder

        wasmbuilder is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        wasmbuilder is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.
    */

    var ModuleBuilder = modulebuilder;

    globalThis.curve_bn128 = null;

    async function buildBn128(singleThread, plugins) {

        const moduleBuilder = new ModuleBuilder();
        moduleBuilder.setMemory(25);
        buildBn128$1(moduleBuilder);

        if (plugins) plugins(moduleBuilder);

        const bn128wasm = {};

        bn128wasm.code = moduleBuilder.build();
        bn128wasm.pq = moduleBuilder.modules.f1m.pq;
        bn128wasm.pr = moduleBuilder.modules.frm.pq;
        bn128wasm.pG1gen = moduleBuilder.modules.bn128.pG1gen;
        bn128wasm.pG1zero = moduleBuilder.modules.bn128.pG1zero;
        bn128wasm.pG1b = moduleBuilder.modules.bn128.pG1b;
        bn128wasm.pG2gen = moduleBuilder.modules.bn128.pG2gen;
        bn128wasm.pG2zero = moduleBuilder.modules.bn128.pG2zero;
        bn128wasm.pG2b = moduleBuilder.modules.bn128.pG2b;
        bn128wasm.pOneT = moduleBuilder.modules.bn128.pOneT;
        bn128wasm.prePSize = moduleBuilder.modules.bn128.prePSize;
        bn128wasm.preQSize = moduleBuilder.modules.bn128.preQSize;
        bn128wasm.n8q = 32;
        bn128wasm.n8r = 32;
        bn128wasm.q = moduleBuilder.modules.bn128.q;
        bn128wasm.r = moduleBuilder.modules.bn128.r;

        if ((!singleThread) && (globalThis.curve_bn128)) return globalThis.curve_bn128;
        const params = {
            name: "bn128",
            wasm: bn128wasm,
            q: e("21888242871839275222246405745257275088696311157297823662689037894645226208583"),
            r: e("21888242871839275222246405745257275088548364400416034343698204186575808495617"),
            n8q: 32,
            n8r: 32,
            cofactorG2: e("30644e72e131a029b85045b68181585e06ceecda572a2489345f2299c0f9fa8d", 16),
            singleThread: singleThread ? true : false
        };

        const curve = await buildEngine(params);
        curve.terminate = async function () {
            if (!params.singleThread) {
                globalThis.curve_bn128 = null;
                await this.tm.terminate();
            }
        };

        if (!singleThread) {
            globalThis.curve_bn128 = curve;
        }

        return curve;
    }

    globalThis.curve_bls12381 = null;

    async function buildBls12381(singleThread, plugins) {

        const moduleBuilder = new ModuleBuilder();
        moduleBuilder.setMemory(25);
        buildBls12381$1(moduleBuilder);

        if (plugins) plugins(moduleBuilder);

        const bls12381wasm = {};

        bls12381wasm.code = moduleBuilder.build();
        bls12381wasm.pq = moduleBuilder.modules.f1m.pq;
        bls12381wasm.pr = moduleBuilder.modules.frm.pq;
        bls12381wasm.pG1gen = moduleBuilder.modules.bls12381.pG1gen;
        bls12381wasm.pG1zero = moduleBuilder.modules.bls12381.pG1zero;
        bls12381wasm.pG1b = moduleBuilder.modules.bls12381.pG1b;
        bls12381wasm.pG2gen = moduleBuilder.modules.bls12381.pG2gen;
        bls12381wasm.pG2zero = moduleBuilder.modules.bls12381.pG2zero;
        bls12381wasm.pG2b = moduleBuilder.modules.bls12381.pG2b;
        bls12381wasm.pOneT = moduleBuilder.modules.bls12381.pOneT;
        bls12381wasm.prePSize = moduleBuilder.modules.bls12381.prePSize;
        bls12381wasm.preQSize = moduleBuilder.modules.bls12381.preQSize;
        bls12381wasm.n8q = 48;
        bls12381wasm.n8r = 32;
        bls12381wasm.q = moduleBuilder.modules.bn128.q;
        bls12381wasm.r = moduleBuilder.modules.bn128.r;


        if ((!singleThread) && (globalThis.curve_bls12381)) return globalThis.curve_bls12381;
        const params = {
            name: "bls12381",
            wasm: bls12381wasm,
            q: e("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab", 16),
            r: e("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16),
            n8q: 48,
            n8r: 32,
            cofactorG1: e("0x396c8c005555e1568c00aaab0000aaab", 16),
            cofactorG2: e("0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5", 16),
            singleThread: singleThread ? true : false
        };

        const curve = await buildEngine(params);
        curve.terminate = async function () {
            if (!params.singleThread) {
                globalThis.curve_bls12381 = null;
                await this.tm.terminate();
            }
        };

        if (!singleThread) {
            globalThis.curve_bls12381 = curve;
        }

        return curve;
    }

    const bls12381r$1 = e("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16);
    const bn128r$1 = e("21888242871839275222246405745257275088548364400416034343698204186575808495617");

    e("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab", 16);
    e("21888242871839275222246405745257275088696311157297823662689037894645226208583");

    async function getCurveFromR(r, singleThread, plugins) {
        let curve;
        if (eq(r, bn128r$1)) {
            curve = await buildBn128(singleThread, plugins);
        } else if (eq(r, bls12381r$1)) {
            curve = await buildBls12381(singleThread, plugins);
        } else {
            throw new Error(`Curve not supported: ${toString$6(r)}`);
        }
        return curve;
    }

    const Scalar=_Scalar;
    const utils = _utils;

    var fs = {};

    async function open(fileName, openFlags, cacheSize, pageSize) {
        cacheSize = cacheSize || 4096*64;
        if (["w+", "wx+", "r", "ax+", "a+"].indexOf(openFlags) <0)
            throw new Error("Invalid open option");
        const fd =await fs.promises.open(fileName, openFlags);

        const stats = await fd.stat();

        return  new FastFile(fd, stats, cacheSize, pageSize, fileName);
    }


    class FastFile {

        constructor(fd, stats, cacheSize, pageSize, fileName) {
            this.fileName = fileName;
            this.fd = fd;
            this.pos = 0;
            this.pageSize = pageSize || (1 << 8);
            while (this.pageSize < stats.blksize) {
                this.pageSize *= 2;
            }
            this.totalSize = stats.size;
            this.totalPages = Math.floor((stats.size -1) / this.pageSize)+1;
            this.maxPagesLoaded = Math.floor( cacheSize / this.pageSize)+1;
            this.pages = {};
            this.pendingLoads = [];
            this.writing = false;
            this.reading = false;
            this.avBuffs = [];
            this.history = {};
        }

        _loadPage(p) {
            const self = this;
            const P = new Promise((resolve, reject)=> {
                self.pendingLoads.push({
                    page: p,
                    resolve: resolve,
                    reject: reject
                });
            });
            self.__statusPage("After Load request: ", p);
            return P;
        }

        __statusPage(s, p) {
            const logEntry = [];
            const self=this;
            if (!self.logHistory) return;
            logEntry.push("==" + s+ " " +p);
            let S = "";
            for (let i=0; i<self.pendingLoads.length; i++) {
                if (self.pendingLoads[i].page == p) S = S + " " + i;
            }
            if (S) logEntry.push("Pending loads:"+S);
            if (typeof self.pages[p] != "undefined") {
                const page = self.pages[p];
                logEntry.push("Loaded");
                logEntry.push("pendingOps: "+page.pendingOps);
                if (page.loading) logEntry.push("loading: "+page.loading);
                if (page.writing) logEntry.push("writing");
                if (page.dirty) logEntry.push("dirty");
            }
            logEntry.push("==");

            if (!self.history[p]) self.history[p] = [];
            self.history[p].push(logEntry);
        }

        __printHistory(p) {
            const self = this;
            if (!self.history[p]) console.log("Empty History ", p);
            console.log("History "+p);
            for (let i=0; i<self.history[p].length; i++) {
                for (let j=0; j<self.history[p][i].length; j++) {
                    console.log("-> " + self.history[p][i][j]);
                }
            }
        }



        _triggerLoad() {
            const self = this;

            if (self.reading) return;
            if (self.pendingLoads.length==0) return;

            const pageIdxs = Object.keys(self.pages);

            const deletablePages = [];
            for (let i=0; i<pageIdxs.length; i++) {
                const page = self.pages[parseInt(pageIdxs[i])];
                if ((page.dirty == false)&&(page.pendingOps==0)&&(!page.writing)&&(!page.loading)) deletablePages.push(parseInt(pageIdxs[i]));
            }

            let freePages = self.maxPagesLoaded - pageIdxs.length;

            const ops = [];

            // while pending loads and
            //     the page is loaded or I can recover one.
            while (
                (self.pendingLoads.length>0) &&
                (   (typeof self.pages[self.pendingLoads[0].page] != "undefined" )
                  ||(  (freePages>0)
                     ||(deletablePages.length>0)))) {
                const load = self.pendingLoads.shift();
                if (typeof self.pages[load.page] != "undefined") {
                    self.pages[load.page].pendingOps ++;
                    const idx = deletablePages.indexOf(load.page);
                    if (idx>=0) deletablePages.splice(idx, 1);
                    if (self.pages[load.page].loading) {
                        self.pages[load.page].loading.push(load);
                    } else {
                        load.resolve();
                    }
                    self.__statusPage("After Load (cached): ", load.page);

                } else {
                    if (freePages) {
                        freePages--;
                    } else {
                        const fp = deletablePages.shift();
                        self.__statusPage("Before Unload: ", fp);
                        self.avBuffs.unshift(self.pages[fp]);
                        delete self.pages[fp];
                        self.__statusPage("After Unload: ", fp);
                    }

                    if (load.page>=self.totalPages) {
                        self.pages[load.page] = getNewPage();
                        load.resolve();
                        self.__statusPage("After Load (new): ", load.page);
                    } else {
                        self.reading = true;
                        self.pages[load.page] = getNewPage();
                        self.pages[load.page].loading = [load];
                        ops.push(self.fd.read(self.pages[load.page].buff, 0, self.pageSize, load.page*self.pageSize).then((res)=> {
                            self.pages[load.page].size = res.bytesRead;
                            const loading = self.pages[load.page].loading;
                            delete self.pages[load.page].loading;
                            for (let i=0; i<loading.length; i++) {
                                loading[i].resolve();
                            }
                            self.__statusPage("After Load (loaded): ", load.page);
                            return res;
                        }, (err) => {
                            load.reject(err);
                        }));
                        self.__statusPage("After Load (loading): ", load.page);
                    }
                }
            }
            // if (ops.length>1) console.log(ops.length);

            Promise.all(ops).then( () => {
                self.reading = false;
                if (self.pendingLoads.length>0) setImmediate(self._triggerLoad.bind(self));
                self._tryClose();
            });

            function getNewPage() {
                if (self.avBuffs.length>0) {
                    const p = self.avBuffs.shift();
                    p.dirty = false;
                    p.pendingOps = 1;
                    p.size =0;
                    return p;
                } else {
                    return {
                        dirty: false,
                        buff: new Uint8Array(self.pageSize),
                        pendingOps: 1,
                        size: 0
                    };
                }
            }

        }


        _triggerWrite() {
            const self = this;
            if (self.writing) return;

            const pageIdxs = Object.keys(self.pages);

            const ops = [];

            for (let i=0; i<pageIdxs.length; i++) {
                const page = self.pages[parseInt(pageIdxs[i])];
                if (page.dirty) {
                    page.dirty = false;
                    page.writing = true;
                    self.writing = true;
                    ops.push( self.fd.write(page.buff, 0, page.size, parseInt(pageIdxs[i])*self.pageSize).then(() => {
                        page.writing = false;
                        return;
                    }, (err) => {
                        console.log("ERROR Writing: "+err);
                        self.error = err;
                        self._tryClose();
                    }));
                }
            }

            if (self.writing) {
                Promise.all(ops).then( () => {
                    self.writing = false;
                    setImmediate(self._triggerWrite.bind(self));
                    self._tryClose();
                    if (self.pendingLoads.length>0) setImmediate(self._triggerLoad.bind(self));
                });
            }
        }

        _getDirtyPage() {
            for (let p in this.pages) {
                if (this.pages[p].dirty) return p;
            }
            return -1;
        }

        async write(buff, pos) {
            if (buff.byteLength == 0) return;
            const self = this;
    /*
            if (buff.byteLength > self.pageSize*self.maxPagesLoaded*0.8) {
                const cacheSize = Math.floor(buff.byteLength * 1.1);
                this.maxPagesLoaded = Math.floor( cacheSize / self.pageSize)+1;
            }
    */
            if (typeof pos == "undefined") pos = self.pos;
            self.pos = pos+buff.byteLength;
            if (self.totalSize < pos + buff.byteLength) self.totalSize = pos + buff.byteLength;
            if (self.pendingClose)
                throw new Error("Writing a closing file");
            const firstPage = Math.floor(pos / self.pageSize);
            const lastPage = Math.floor((pos + buff.byteLength -1) / self.pageSize);

            const pagePromises = [];
            for (let i=firstPage; i<=lastPage; i++) pagePromises.push(self._loadPage(i));
            self._triggerLoad();

            let p = firstPage;
            let o = pos % self.pageSize;
            let r = buff.byteLength;
            while (r>0) {
                await pagePromises[p-firstPage];
                const l = (o+r > self.pageSize) ? (self.pageSize -o) : r;
                const srcView = buff.slice( buff.byteLength - r, buff.byteLength - r + l);
                const dstView = new Uint8Array(self.pages[p].buff.buffer, o, l);
                dstView.set(srcView);
                self.pages[p].dirty = true;
                self.pages[p].pendingOps --;
                self.pages[p].size = Math.max(o+l, self.pages[p].size);
                if (p>=self.totalPages) {
                    self.totalPages = p+1;
                }
                r = r-l;
                p ++;
                o = 0;
                if (!self.writing) setImmediate(self._triggerWrite.bind(self));
            }
        }

        async read(len, pos) {
            const self = this;
            let buff = new Uint8Array(len);
            await self.readToBuffer(buff, 0, len, pos);

            return buff;
        }

        async readToBuffer(buffDst, offset, len, pos) {
            if (len == 0) {
                return;
            }
            const self = this;
            if (len > self.pageSize*self.maxPagesLoaded*0.8) {
                const cacheSize = Math.floor(len * 1.1);
                this.maxPagesLoaded = Math.floor( cacheSize / self.pageSize)+1;
            }
            if (typeof pos == "undefined") pos = self.pos;
            self.pos = pos+len;
            if (self.pendingClose)
                throw new Error("Reading a closing file");
            const firstPage = Math.floor(pos / self.pageSize);
            const lastPage = Math.floor((pos + len -1) / self.pageSize);

            const pagePromises = [];
            for (let i=firstPage; i<=lastPage; i++) pagePromises.push(self._loadPage(i));

            self._triggerLoad();

            let p = firstPage;
            let o = pos % self.pageSize;
            // Remaining bytes to read
            let r = pos + len > self.totalSize ? len - (pos + len - self.totalSize): len;
            while (r>0) {
                await pagePromises[p - firstPage];
                self.__statusPage("After Await (read): ", p);

                // bytes to copy from this page
                const l = (o+r > self.pageSize) ? (self.pageSize -o) : r;
                const srcView = new Uint8Array(self.pages[p].buff.buffer, self.pages[p].buff.byteOffset + o, l);
                buffDst.set(srcView, offset+len-r);
                self.pages[p].pendingOps --;

                self.__statusPage("After Op done: ", p);

                r = r-l;
                p ++;
                o = 0;
                if (self.pendingLoads.length>0) setImmediate(self._triggerLoad.bind(self));
            }

            this.pos = pos + len;

        }


        _tryClose() {
            const self = this;
            if (!self.pendingClose) return;
            if (self.error) {
                self.pendingCloseReject(self.error);
            }
            const p = self._getDirtyPage();
            if ((p>=0) || (self.writing) || (self.reading) || (self.pendingLoads.length>0)) return;
            self.pendingClose();
        }

        close() {
            const self = this;
            if (self.pendingClose)
                throw new Error("Closing the file twice");
            return new Promise((resolve, reject) => {
                self.pendingClose = resolve;
                self.pendingCloseReject = reject;
                self._tryClose();
            }).then(()=> {
                self.fd.close();
            }, (err) => {
                self.fd.close();
                throw (err);
            });
        }

        async discard() {
            const self = this;
            await self.close();
            await fs.promises.unlink(this.fileName);
        }

        async writeULE32(v, pos) {
            const self = this;
            const tmpBuff32 = new Uint8Array(4);
            const tmpBuff32v = new DataView(tmpBuff32.buffer);

            tmpBuff32v.setUint32(0, v, true);

            await self.write(tmpBuff32, pos);
        }

        async writeUBE32(v, pos) {
            const self = this;

            const tmpBuff32 = new Uint8Array(4);
            const tmpBuff32v = new DataView(tmpBuff32.buffer);

            tmpBuff32v.setUint32(0, v, false);

            await self.write(tmpBuff32, pos);
        }


        async writeULE64(v, pos) {
            const self = this;

            const tmpBuff64 = new Uint8Array(8);
            const tmpBuff64v = new DataView(tmpBuff64.buffer);

            tmpBuff64v.setUint32(0, v & 0xFFFFFFFF, true);
            tmpBuff64v.setUint32(4, Math.floor(v / 0x100000000) , true);

            await self.write(tmpBuff64, pos);
        }

        async readULE32(pos) {
            const self = this;
            const b = await self.read(4, pos);

            const view = new Uint32Array(b.buffer);

            return view[0];
        }

        async readUBE32(pos) {
            const self = this;
            const b = await self.read(4, pos);

            const view = new DataView(b.buffer);

            return view.getUint32(0, false);
        }

        async readULE64(pos) {
            const self = this;
            const b = await self.read(8, pos);

            const view = new Uint32Array(b.buffer);

            return view[1] * 0x100000000 + view[0];
        }

    }

    function createNew$1(o) {
        const initialSize = o.initialSize || 1<<20;
        const fd = new MemFile();
        fd.o = o;
        fd.o.data = new Uint8Array(initialSize);
        fd.allocSize = initialSize;
        fd.totalSize = 0;
        fd.readOnly = false;
        fd.pos = 0;
        return fd;
    }

    function readExisting$2(o) {
        const fd = new MemFile();
        fd.o = o;
        fd.allocSize = o.data.byteLength;
        fd.totalSize = o.data.byteLength;
        fd.readOnly = true;
        fd.pos = 0;
        return fd;
    }

    const tmpBuff32$1 = new Uint8Array(4);
    const tmpBuff32v$1 = new DataView(tmpBuff32$1.buffer);
    const tmpBuff64$1 = new Uint8Array(8);
    const tmpBuff64v$1 = new DataView(tmpBuff64$1.buffer);

    class MemFile {

        constructor() {
            this.pageSize = 1 << 14;  // for compatibility
        }

        _resizeIfNeeded(newLen) {
            if (newLen > this.allocSize) {
                const newAllocSize = Math.max(
                    this.allocSize + (1 << 20),
                    Math.floor(this.allocSize * 1.1),
                    newLen
                );
                const newData = new Uint8Array(newAllocSize);
                newData.set(this.o.data);
                this.o.data = newData;
                this.allocSize = newAllocSize;
            }
        }

        async write(buff, pos) {
            const self =this;
            if (typeof pos == "undefined") pos = self.pos;
            if (this.readOnly) throw new Error("Writing a read only file");

            this._resizeIfNeeded(pos + buff.byteLength);

            this.o.data.set(buff.slice(), pos);

            if (pos + buff.byteLength > this.totalSize) this.totalSize = pos + buff.byteLength;

            this.pos = pos + buff.byteLength;
        }

        async readToBuffer(buffDest, offset, len, pos) {
            const self = this;
            if (typeof pos == "undefined") pos = self.pos;
            if (this.readOnly) {
                if (pos + len > this.totalSize) throw new Error("Reading out of bounds");
            }
            this._resizeIfNeeded(pos + len);

            const buffSrc = new Uint8Array(this.o.data.buffer, this.o.data.byteOffset + pos, len);

            buffDest.set(buffSrc, offset);

            this.pos = pos + len;
        }

        async read(len, pos) {
            const self = this;

            const buff = new Uint8Array(len);
            await self.readToBuffer(buff, 0, len, pos);

            return buff;
        }

        close() {
            if (this.o.data.byteLength != this.totalSize) {
                this.o.data = this.o.data.slice(0, this.totalSize);
            }
        }

        async discard() {
        }


        async writeULE32(v, pos) {
            const self = this;

            tmpBuff32v$1.setUint32(0, v, true);

            await self.write(tmpBuff32$1, pos);
        }

        async writeUBE32(v, pos) {
            const self = this;

            tmpBuff32v$1.setUint32(0, v, false);

            await self.write(tmpBuff32$1, pos);
        }


        async writeULE64(v, pos) {
            const self = this;

            tmpBuff64v$1.setUint32(0, v & 0xFFFFFFFF, true);
            tmpBuff64v$1.setUint32(4, Math.floor(v / 0x100000000) , true);

            await self.write(tmpBuff64$1, pos);
        }


        async readULE32(pos) {
            const self = this;
            const b = await self.read(4, pos);

            const view = new Uint32Array(b.buffer);

            return view[0];
        }

        async readUBE32(pos) {
            const self = this;
            const b = await self.read(4, pos);

            const view = new DataView(b.buffer);

            return view.getUint32(0, false);
        }

        async readULE64(pos) {
            const self = this;
            const b = await self.read(8, pos);

            const view = new Uint32Array(b.buffer);

            return view[1] * 0x100000000 + view[0];
        }

    }

    const PAGE_SIZE = 1<<22;

    function createNew(o) {
        const initialSize = o.initialSize || 0;
        const fd = new BigMemFile();
        fd.o = o;
        const nPages = initialSize ? Math.floor((initialSize - 1) / PAGE_SIZE)+1 : 0;
        fd.o.data = [];
        for (let i=0; i<nPages-1; i++) {
            fd.o.data.push( new Uint8Array(PAGE_SIZE));
        }
        if (nPages) fd.o.data.push( new Uint8Array(initialSize - PAGE_SIZE*(nPages-1)));
        fd.totalSize = 0;
        fd.readOnly = false;
        fd.pos = 0;
        return fd;
    }

    function readExisting$1(o) {
        const fd = new BigMemFile();
        fd.o = o;
        fd.totalSize = (o.data.length-1)* PAGE_SIZE + o.data[o.data.length-1].byteLength;
        fd.readOnly = true;
        fd.pos = 0;
        return fd;
    }

    const tmpBuff32 = new Uint8Array(4);
    const tmpBuff32v = new DataView(tmpBuff32.buffer);
    const tmpBuff64 = new Uint8Array(8);
    const tmpBuff64v = new DataView(tmpBuff64.buffer);

    class BigMemFile {

        constructor() {
            this.pageSize = 1 << 14;  // for compatibility
        }

        _resizeIfNeeded(newLen) {

            if (newLen <= this.totalSize) return;

            if (this.readOnly) throw new Error("Reading out of file bounds");

            const nPages = Math.floor((newLen - 1) / PAGE_SIZE)+1;
            for (let i= Math.max(this.o.data.length-1, 0); i<nPages; i++) {
                const newSize = i<nPages-1 ? PAGE_SIZE : newLen - (nPages-1)*PAGE_SIZE;
                const p = new Uint8Array(newSize);
                if (i == this.o.data.length-1) p.set(this.o.data[i]);
                this.o.data[i] = p;
            }
            this.totalSize = newLen;
        }

        async write(buff, pos) {
            const self =this;
            if (typeof pos == "undefined") pos = self.pos;
            if (this.readOnly) throw new Error("Writing a read only file");

            this._resizeIfNeeded(pos + buff.byteLength);

            const firstPage = Math.floor(pos / PAGE_SIZE);

            let p = firstPage;
            let o = pos % PAGE_SIZE;
            let r = buff.byteLength;
            while (r>0) {
                const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;
                const srcView = buff.slice(buff.byteLength - r, buff.byteLength - r + l);
                const dstView = new Uint8Array(self.o.data[p].buffer, o, l);
                dstView.set(srcView);
                r = r-l;
                p ++;
                o = 0;
            }

            this.pos = pos + buff.byteLength;
        }

        async readToBuffer(buffDst, offset, len, pos) {
            const self = this;
            if (typeof pos == "undefined") pos = self.pos;
            if (this.readOnly) {
                if (pos + len > this.totalSize) throw new Error("Reading out of bounds");
            }
            this._resizeIfNeeded(pos + len);

            const firstPage = Math.floor(pos / PAGE_SIZE);

            let p = firstPage;
            let o = pos % PAGE_SIZE;
            // Remaining bytes to read
            let r = len;
            while (r>0) {
                // bytes to copy from this page
                const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;
                const srcView = new Uint8Array(self.o.data[p].buffer, o, l);
                buffDst.set(srcView, offset+len-r);
                r = r-l;
                p ++;
                o = 0;
            }

            this.pos = pos + len;
        }

        async read(len, pos) {
            const self = this;
            const buff = new Uint8Array(len);

            await self.readToBuffer(buff, 0, len, pos);

            return buff;
        }

        close() {
        }

        async discard() {
        }


        async writeULE32(v, pos) {
            const self = this;

            tmpBuff32v.setUint32(0, v, true);

            await self.write(tmpBuff32, pos);
        }

        async writeUBE32(v, pos) {
            const self = this;

            tmpBuff32v.setUint32(0, v, false);

            await self.write(tmpBuff32, pos);
        }


        async writeULE64(v, pos) {
            const self = this;

            tmpBuff64v.setUint32(0, v & 0xFFFFFFFF, true);
            tmpBuff64v.setUint32(4, Math.floor(v / 0x100000000) , true);

            await self.write(tmpBuff64, pos);
        }


        async readULE32(pos) {
            const self = this;
            const b = await self.read(4, pos);

            const view = new Uint32Array(b.buffer);

            return view[0];
        }

        async readUBE32(pos) {
            const self = this;
            const b = await self.read(4, pos);

            const view = new DataView(b.buffer);

            return view.getUint32(0, false);
        }

        async readULE64(pos) {
            const self = this;
            const b = await self.read(8, pos);

            const view = new Uint32Array(b.buffer);

            return view[1] * 0x100000000 + view[0];
        }

    }

    /* global fetch */

    const DEFAULT_CACHE_SIZE = (1 << 16);
    const DEFAULT_PAGE_SIZE = (1 << 13);


    async function createOverride(o, b, c) {
        if (typeof o === "string") {
            o = {
                type: "file",
                fileName: o,
                cacheSize: b || DEFAULT_CACHE_SIZE,
                pageSize: c || DEFAULT_PAGE_SIZE
            };
        }
        if (o.type == "file") {
            return await open(o.fileName, "w+", o.cacheSize, o.pageSize);
        } else if (o.type == "mem") {
            return createNew$1(o);
        } else if (o.type == "bigMem") {
            return createNew(o);
        } else {
            throw new Error("Invalid FastFile type: "+o.type);
        }
    }

    async function readExisting(o, b, c) {
        if (o instanceof Uint8Array) {
            o = {
                type: "mem",
                data: o
            };
        }
        {
            if (typeof o === "string") {
                const buff = await fetch(o).then( function(res) {
                    return res.arrayBuffer();
                }).then(function (ab) {
                    return new Uint8Array(ab);
                });
                o = {
                    type: "mem",
                    data: buff
                };
            }
        }
        if (o.type == "file") {
            return await open(o.fileName, "r", o.cacheSize, o.pageSize);
        } else if (o.type == "mem") {
            return await readExisting$2(o);
        } else if (o.type == "bigMem") {
            return await readExisting$1(o);
        } else {
            throw new Error("Invalid FastFile type: "+o.type);
        }
    }

    async function readBinFile(fileName, type, maxVersion, cacheSize, pageSize) {

        const fd = await readExisting(fileName);

        const b = await fd.read(4);
        let readedType = "";
        for (let i=0; i<4; i++) readedType += String.fromCharCode(b[i]);

        if (readedType != type) throw new Error(fileName + ": Invalid File format");

        let v = await fd.readULE32();

        if (v>maxVersion) throw new Error("Version not supported");

        const nSections = await fd.readULE32();

        // Scan sections
        let sections = [];
        for (let i=0; i<nSections; i++) {
            let ht = await fd.readULE32();
            let hl = await fd.readULE64();
            if (typeof sections[ht] == "undefined") sections[ht] = [];
            sections[ht].push({
                p: fd.pos,
                size: hl
            });
            fd.pos += hl;
        }

        return {fd, sections};
    }

    async function createBinFile(fileName, type, version, nSections, cacheSize, pageSize) {

        const fd = await createOverride(fileName, cacheSize, pageSize);

        const buff = new Uint8Array(4);
        for (let i=0; i<4; i++) buff[i] = type.charCodeAt(i);
        await fd.write(buff, 0); // Magic "r1cs"

        await fd.writeULE32(version); // Version
        await fd.writeULE32(nSections); // Number of Sections

        return fd;
    }

    async function startWriteSection(fd, idSection) {
        if (typeof fd.writingSection !== "undefined") throw new Error("Already writing a section");
        await fd.writeULE32(idSection); // Header type
        fd.writingSection = {
            pSectionSize: fd.pos
        };
        await fd.writeULE64(0); // Temporally set to 0 length
    }

    async function endWriteSection(fd) {
        if (typeof fd.writingSection === "undefined") throw new Error("Not writing a section");

        const sectionSize = fd.pos - fd.writingSection.pSectionSize - 8;
        const oldPos = fd.pos;
        fd.pos = fd.writingSection.pSectionSize;
        await fd.writeULE64(sectionSize);
        fd.pos = oldPos;
        delete fd.writingSection;
    }

    async function startReadUniqueSection(fd, sections, idSection) {
        if (typeof fd.readingSection !== "undefined") throw new Error("Already reading a section");
        if (!sections[idSection])  throw new Error(fd.fileName + ": Missing section "+ idSection );
        if (sections[idSection].length>1) throw new Error(fd.fileName +": Section Duplicated " +idSection);

        fd.pos = sections[idSection][0].p;

        fd.readingSection = sections[idSection][0];
    }

    async function endReadSection(fd, noCheck) {
        if (typeof fd.readingSection === "undefined") throw new Error("Not reading a section");
        if (!noCheck) {
            if (fd.pos-fd.readingSection.p !=  fd.readingSection.size) throw new Error("Invalid section size reading");
        }
        delete fd.readingSection;
    }

    async function writeBigInt(fd, n, n8, pos) {
        const buff = new Uint8Array(n8);
        Scalar.toRprLE(buff, 0, n, n8);
        await fd.write(buff, pos);
    }

    async function readBigInt(fd, n8, pos) {
        const buff = await fd.read(n8, pos);
        return Scalar.fromRprLE(buff, 0, n8);
    }

    async function copySection(fdFrom, sections, fdTo, sectionId, size) {
        if (typeof size === "undefined") {
            size = sections[sectionId][0].size;
        }
        const chunkSize = fdFrom.pageSize;
        await startReadUniqueSection(fdFrom, sections, sectionId);
        await startWriteSection(fdTo, sectionId);
        for (let p=0; p<size; p+=chunkSize) {
            const l = Math.min(size -p, chunkSize);
            const buff = await fdFrom.read(l);
            await fdTo.write(buff);
        }
        await endWriteSection(fdTo);
        await endReadSection(fdFrom, size != sections[sectionId][0].size);

    }

    async function readSection(fd, sections, idSection, offset, length) {

        offset = (typeof offset === "undefined") ? 0 : offset;
        length = (typeof length === "undefined") ? sections[idSection][0].size - offset : length;

        if (offset + length > sections[idSection][0].size) {
            throw new Error("Reading out of the range of the section");
        }

        let buff;
        if (length < (1 << 30) ) {
            buff = new Uint8Array(length);
        } else {
            buff = new BigBuffer(length);
        }

        await fd.readToBuffer(buff, 0, length, sections[idSection][0].p + offset);
        return buff;
    }

    async function sectionIsEqual(fd1, sections1, fd2, sections2, idSection) {
        const MAX_BUFF_SIZE = fd1.pageSize * 16;
        await startReadUniqueSection(fd1, sections1, idSection);
        await startReadUniqueSection(fd2, sections2, idSection);
        if (sections1[idSection][0].size != sections2[idSection][0].size) return false;
        const totalBytes=sections1[idSection][0].size;
        for (let i=0; i<totalBytes; i+= MAX_BUFF_SIZE) {
            const n = Math.min(totalBytes-i, MAX_BUFF_SIZE);
            const buff1 = await fd1.read(n);
            const buff2 = await fd2.read(n);
            for (let j=0; j<n; j++) if (buff1[j] != buff2[j]) return false;
        }
        await endReadSection(fd1);
        await endReadSection(fd2);
        return true;
    }

    Scalar.e("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16);
    Scalar.e("21888242871839275222246405745257275088548364400416034343698204186575808495617");

    const bls12381q = Scalar.e("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab", 16);
    const bn128q = Scalar.e("21888242871839275222246405745257275088696311157297823662689037894645226208583");

    async function getCurveFromQ(q) {
        let curve;
        if (Scalar.eq(q, bn128q)) {
            curve = await buildBn128();
        } else if (Scalar.eq(q, bls12381q)) {
            curve = await buildBls12381();
        } else {
            throw new Error(`Curve not supported: ${Scalar.toString(q)}`);
        }
        return curve;
    }

    async function getCurveFromName(name) {
        let curve;
        const normName = normalizeName(name);
        if (["BN128", "BN254", "ALTBN128"].indexOf(normName) >= 0) {
            curve = await buildBn128();
        } else if (["BLS12381"].indexOf(normName) >= 0) {
            curve = await buildBls12381();
        } else {
            throw new Error(`Curve not supported: ${name}`);
        }
        return curve;

        function normalizeName(n) {
            return n.toUpperCase().match(/[A-Za-z0-9]+/g).join("");
        }

    }

    var nanoassert = assert;

    class AssertionError extends Error {}
    AssertionError.prototype.name = 'AssertionError';

    /**
     * Minimal assert function
     * @param  {any} t Value to check if falsy
     * @param  {string=} m Optional assertion error message
     * @throws {AssertionError}
     */
    function assert (t, m) {
      if (!t) {
        var err = new AssertionError(m);
        if (Error.captureStackTrace) Error.captureStackTrace(err, assert);
        throw err
      }
    }

    function byteLength$5 (string) {
      return string.length
    }

    function toString$5 (buffer) {
      const len = buffer.byteLength;

      let result = '';

      for (let i = 0; i < len; i++) {
        result += String.fromCharCode(buffer[i]);
      }

      return result
    }

    function write$6 (buffer, string, offset = 0, length = byteLength$5(string)) {
      const len = Math.min(length, buffer.byteLength - offset);

      for (let i = 0; i < len; i++) {
        buffer[offset + i] = string.charCodeAt(i);
      }

      return len
    }

    var ascii = {
      byteLength: byteLength$5,
      toString: toString$5,
      write: write$6
    };

    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    const codes = new Uint8Array(256);

    for (let i = 0; i < alphabet.length; i++) {
      codes[alphabet.charCodeAt(i)] = i;
    }

    codes[/* - */ 0x2d] = 62;
    codes[/* _ */ 0x5f] = 63;

    function byteLength$4 (string) {
      let len = string.length;

      if (string.charCodeAt(len - 1) === 0x3d) len--;
      if (len > 1 && string.charCodeAt(len - 1) === 0x3d) len--;

      return (len * 3) >>> 2
    }

    function toString$4 (buffer) {
      const len = buffer.byteLength;

      let result = '';

      for (let i = 0; i < len; i += 3) {
        result += (
          alphabet[buffer[i] >> 2] +
          alphabet[((buffer[i] & 3) << 4) | (buffer[i + 1] >> 4)] +
          alphabet[((buffer[i + 1] & 15) << 2) | (buffer[i + 2] >> 6)] +
          alphabet[buffer[i + 2] & 63]
        );
      }

      if (len % 3 === 2) {
        result = result.substring(0, result.length - 1) + '=';
      } else if (len % 3 === 1) {
        result = result.substring(0, result.length - 2) + '==';
      }

      return result
    }
    function write$5 (buffer, string, offset = 0, length = byteLength$4(string)) {
      const len = Math.min(length, buffer.byteLength - offset);

      for (let i = 0, j = 0; i < len; i += 4) {
        const a = codes[string.charCodeAt(i)];
        const b = codes[string.charCodeAt(i + 1)];
        const c = codes[string.charCodeAt(i + 2)];
        const d = codes[string.charCodeAt(i + 3)];

        buffer[j++] = (a << 2) | (b >> 4);
        buffer[j++] = ((b & 15) << 4) | (c >> 2);
        buffer[j++] = ((c & 3) << 6) | (d & 63);
      }

      return len
    }
    var base64 = {
      byteLength: byteLength$4,
      toString: toString$4,
      write: write$5
    };

    function byteLength$3 (string) {
      return string.length >>> 1
    }

    function toString$3 (buffer) {
      const len = buffer.byteLength;

      buffer = new DataView(buffer.buffer, buffer.byteOffset, len);

      let result = '';
      let i = 0;

      for (let n = len - (len % 4); i < n; i += 4) {
        result += buffer.getUint32(i).toString(16).padStart(8, '0');
      }

      for (; i < len; i++) {
        result += buffer.getUint8(i).toString(16).padStart(2, '0');
      }

      return result
    }

    function write$4 (buffer, string, offset = 0, length = byteLength$3(string)) {
      const len = Math.min(length, buffer.byteLength - offset);

      for (let i = 0; i < len; i++) {
        const a = hexValue(string.charCodeAt(i * 2));
        const b = hexValue(string.charCodeAt(i * 2 + 1));

        if (a === undefined || b === undefined) {
          return buffer.subarray(0, i)
        }

        buffer[offset + i] = (a << 4) | b;
      }

      return len
    }

    var hex = {
      byteLength: byteLength$3,
      toString: toString$3,
      write: write$4
    };

    function hexValue (char) {
      if (char >= 0x30 && char <= 0x39) return char - 0x30
      if (char >= 0x41 && char <= 0x46) return char - 0x41 + 10
      if (char >= 0x61 && char <= 0x66) return char - 0x61 + 10
    }

    function byteLength$2 (string) {
      let length = 0;

      for (let i = 0, n = string.length; i < n; i++) {
        const code = string.charCodeAt(i);

        if (code >= 0xd800 && code <= 0xdbff && i + 1 < n) {
          const code = string.charCodeAt(i + 1);

          if (code >= 0xdc00 && code <= 0xdfff) {
            length += 4;
            i++;
            continue
          }
        }

        if (code <= 0x7f) length += 1;
        else if (code <= 0x7ff) length += 2;
        else length += 3;
      }

      return length
    }

    let toString$2;

    if (typeof TextDecoder !== 'undefined') {
      const decoder = new TextDecoder();

      toString$2 = function toString (buffer) {
        return decoder.decode(buffer)
      };
    } else {
      toString$2 = function toString (buffer) {
        const len = buffer.byteLength;

        let output = '';
        let i = 0;

        while (i < len) {
          let byte = buffer[i];

          if (byte <= 0x7f) {
            output += String.fromCharCode(byte);
            i++;
            continue
          }

          let bytesNeeded = 0;
          let codePoint = 0;

          if (byte <= 0xdf) {
            bytesNeeded = 1;
            codePoint = byte & 0x1f;
          } else if (byte <= 0xef) {
            bytesNeeded = 2;
            codePoint = byte & 0x0f;
          } else if (byte <= 0xf4) {
            bytesNeeded = 3;
            codePoint = byte & 0x07;
          }

          if (len - i - bytesNeeded > 0) {
            let k = 0;

            while (k < bytesNeeded) {
              byte = buffer[i + k + 1];
              codePoint = (codePoint << 6) | (byte & 0x3f);
              k += 1;
            }
          } else {
            codePoint = 0xfffd;
            bytesNeeded = len - i;
          }

          output += String.fromCodePoint(codePoint);
          i += bytesNeeded + 1;
        }

        return output
      };
    }

    let write$3;

    if (typeof TextEncoder !== 'undefined') {
      const encoder = new TextEncoder();

      write$3 = function write (buffer, string, offset = 0, length = byteLength$2(string)) {
        const len = Math.min(length, buffer.byteLength - offset);
        encoder.encodeInto(string, buffer.subarray(offset, offset + len));
        return len
      };
    } else {
      write$3 = function write (buffer, string, offset = 0, length = byteLength$2(string)) {
        const len = Math.min(length, buffer.byteLength - offset);

        buffer = buffer.subarray(offset, offset + len);

        let i = 0;
        let j = 0;

        while (i < string.length) {
          const code = string.codePointAt(i);

          if (code <= 0x7f) {
            buffer[j++] = code;
            i++;
            continue
          }

          let count = 0;
          let bits = 0;

          if (code <= 0x7ff) {
            count = 6;
            bits = 0xc0;
          } else if (code <= 0xffff) {
            count = 12;
            bits = 0xe0;
          } else if (code <= 0x1fffff) {
            count = 18;
            bits = 0xf0;
          }

          buffer[j++] = bits | (code >> count);
          count -= 6;

          while (count >= 0) {
            buffer[j++] = 0x80 | ((code >> count) & 0x3f);
            count -= 6;
          }

          i += code >= 0x10000 ? 2 : 1;
        }

        return len
      };
    }

    var utf8 = {
      byteLength: byteLength$2,
      toString: toString$2,
      write: write$3
    };

    function byteLength$1 (string) {
      return string.length * 2
    }

    function toString$1 (buffer) {
      const len = buffer.byteLength;

      let result = '';

      for (let i = 0; i < len - 1; i += 2) {
        result += String.fromCharCode(buffer[i] + (buffer[i + 1] * 256));
      }

      return result
    }

    function write$2 (buffer, string, offset = 0, length = byteLength$1(string)) {
      const len = Math.min(length, buffer.byteLength - offset);

      let units = len;

      for (let i = 0; i < string.length; ++i) {
        if ((units -= 2) < 0) break

        const c = string.charCodeAt(i);
        const hi = c >> 8;
        const lo = c % 256;

        buffer[offset + i * 2] = lo;
        buffer[offset + i * 2 + 1] = hi;
      }

      return len
    }

    var utf16le = {
      byteLength: byteLength$1,
      toString: toString$1,
      write: write$2
    };

    function codecFor (encoding) {
      switch (encoding) {
        case 'ascii':
          return ascii
        case 'base64':
          return base64
        case 'hex':
          return hex
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16le
        default:
          throw new Error(`Unknown encoding: ${encoding}`)
      }
    }

    function isBuffer (value) {
      return value instanceof Uint8Array
    }

    function alloc (size, fill, encoding) {
      const buffer = new Uint8Array(size);
      if (fill !== undefined) fill(buffer, fill, 0, buffer.byteLength, encoding);
      return buffer
    }

    function allocUnsafe (size) {
      return new Uint8Array(size)
    }

    function allocUnsafeSlow (size) {
      return new Uint8Array(size)
    }

    function byteLength (string, encoding) {
      return codecFor(encoding).byteLength(string)
    }

    function compare (a, b) {
      if (a === b) return 0

      const len = Math.min(a.byteLength, b.byteLength);

      a = new DataView(a.buffer, a.byteOffset, a.byteLength);
      b = new DataView(b.buffer, b.byteOffset, b.byteLength);

      let i = 0;

      for (let n = len - (len % 4); i < n; i += 4) {
        const x = a.getUint32(i);
        const y = b.getUint32(i);
        if (x < y) return -1
        if (x > y) return 1
      }

      for (; i < len; i++) {
        const x = a.getUint8(i);
        const y = b.getUint8(i);
        if (x < y) return -1
        if (x > y) return 1
      }

      return a.byteLength > b.byteLength ? 1 : a.byteLength < b.byteLength ? -1 : 0
    }

    function concat (buffers, totalLength) {
      if (totalLength === undefined) {
        totalLength = buffers.reduce((len, buffer) => len + buffer.byteLength, 0);
      }

      const result = new Uint8Array(totalLength);

      buffers.reduce(
        (offset, buffer) => {
          result.set(buffer, offset);
          return offset + buffer.byteLength
        },
        0
      );

      return result
    }

    function copy (source, target, targetStart = 0, start = 0, end = source.byteLength) {
      if (end > 0 && end < start) return 0
      if (end === start) return 0
      if (source.byteLength === 0 || target.byteLength === 0) return 0

      if (targetStart < 0) throw new RangeError('targetStart is out of range')
      if (start < 0 || start >= source.byteLength) throw new RangeError('sourceStart is out of range')
      if (end < 0) throw new RangeError('sourceEnd is out of range')

      if (targetStart >= target.byteLength) targetStart = target.byteLength;
      if (end > source.byteLength) end = source.byteLength;
      if (target.byteLength - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      const len = end - start;

      if (source === target) {
        target.copyWithin(targetStart, start, end);
      } else {
        target.set(source.subarray(start, end), targetStart);
      }

      return len
    }

    function equals (a, b) {
      if (a === b) return true
      if (a.byteLength !== b.byteLength) return false

      const len = a.byteLength;

      a = new DataView(a.buffer, a.byteOffset, a.byteLength);
      b = new DataView(b.buffer, b.byteOffset, b.byteLength);

      let i = 0;

      for (let n = len - (len % 4); i < n; i += 4) {
        if (a.getUint32(i) !== b.getUint32(i)) return false
      }

      for (; i < len; i++) {
        if (a.getUint8(i) !== b.getUint8(i)) return false
      }

      return true
    }

    function fill (buffer, value, offset, end, encoding) {
      if (typeof value === 'string') {
        // fill(buffer, string, encoding)
        if (typeof offset === 'string') {
          encoding = offset;
          offset = 0;
          end = buffer.byteLength;

        // fill(buffer, string, offset, encoding)
        } else if (typeof end === 'string') {
          encoding = end;
          end = buffer.byteLength;
        }
      } else if (typeof val === 'number') {
        value = value & 255;
      } else if (typeof val === 'boolean') {
        value = +value;
      }

      if (offset < 0 || buffer.byteLength < offset || buffer.byteLength < end) {
        throw new RangeError('Out of range index')
      }

      if (offset === undefined) offset = 0;
      if (end === undefined) end = buffer.byteLength;

      if (end <= offset) return buffer

      if (!value) value = 0;

      if (typeof value === 'number') {
        for (let i = offset; i < end; ++i) {
          buffer[i] = value;
        }
      } else {
        value = isBuffer(value) ? value : from(value, encoding);

        const len = value.byteLength;

        for (let i = 0; i < end - offset; ++i) {
          buffer[i + offset] = value[i % len];
        }
      }

      return buffer
    }

    function from (value, encodingOrOffset, length) {
      // from(string, encoding)
      if (typeof value === 'string') return fromString(value, encodingOrOffset)

      // from(array)
      if (Array.isArray(value)) return fromArray(value)

      // from(buffer)
      if (ArrayBuffer.isView(value)) return fromBuffer(value)

      // from(arrayBuffer[, byteOffset[, length]])
      return fromArrayBuffer(value, encodingOrOffset, length)
    }

    function fromString (string, encoding) {
      const codec = codecFor(encoding);
      const buffer = new Uint8Array(codec.byteLength(string));
      codec.write(buffer, string, 0, buffer.byteLength);
      return buffer
    }

    function fromArray (array) {
      const buffer = new Uint8Array(array.length);
      buffer.set(array);
      return buffer
    }

    function fromBuffer (buffer) {
      const copy = new Uint8Array(buffer.byteLength);
      copy.set(buffer);
      return copy
    }

    function fromArrayBuffer (arrayBuffer, byteOffset, length) {
      return new Uint8Array(arrayBuffer, byteOffset, length)
    }

    function swap (buffer, n, m) {
      const i = buffer[n];
      buffer[n] = buffer[m];
      buffer[m] = i;
    }

    function swap16 (buffer) {
      const len = buffer.byteLength;

      if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits')

      for (let i = 0; i < len; i += 2) swap(buffer, i, i + 1);

      return buffer
    }

    function swap32 (buffer) {
      const len = buffer.byteLength;

      if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits')

      for (let i = 0; i < len; i += 4) {
        swap(buffer, i, i + 3);
        swap(buffer, i + 1, i + 2);
      }

      return buffer
    }

    function swap64 (buffer) {
      const len = buffer.byteLength;

      if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits')

      for (let i = 0; i < len; i += 8) {
        swap(buffer, i, i + 7);
        swap(buffer, i + 1, i + 6);
        swap(buffer, i + 2, i + 5);
        swap(buffer, i + 3, i + 4);
      }

      return buffer
    }

    function toBuffer (buffer) {
      return buffer
    }

    function toString (buffer, encoding, start = 0, end = buffer.byteLength) {
      const len = buffer.byteLength;

      if (start >= len) return ''
      if (end <= start) return ''
      if (start < 0) start = 0;
      if (end > len) end = len;

      if (start !== 0 || end < len) buffer = buffer.subarray(start, end);

      return codecFor(encoding).toString(buffer)
    }

    function write$1 (buffer, string, offset, length, encoding) {
      // write(buffer, string)
      if (offset === undefined) {
        encoding = 'utf8';

      // write(buffer, string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        offset = undefined;

      // write(buffer, string, offset, encoding)
      } else if (encoding === undefined && typeof length === 'string') {
        encoding = length;
        length = undefined;
      }

      return codecFor(encoding).write(buffer, string, offset, length)
    }

    var browser = {
      isBuffer,
      alloc,
      allocUnsafe,
      allocUnsafeSlow,
      byteLength,
      compare,
      concat,
      copy,
      equals,
      fill,
      from,
      swap16,
      swap32,
      swap64,
      toBuffer,
      toString,
      write: write$1
    };

    var __commonJS = (cb, mod) => function __require() {
      return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __toBinary = /* @__PURE__ */ (() => {
      var table = new Uint8Array(128);
      for (var i = 0; i < 64; i++)
        table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
      return (base64) => {
        var n = base64.length, bytes2 = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
        for (var i2 = 0, j = 0; i2 < n; ) {
          var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
          var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
          bytes2[j++] = c0 << 2 | c1 >> 4;
          bytes2[j++] = c1 << 4 | c2 >> 2;
          bytes2[j++] = c2 << 6 | c3;
        }
        return bytes2;
      };
    })();

    // wasm-binary:./blake2b.wat
    var require_blake2b = __commonJS({
      "wasm-binary:./blake2b.wat"(exports2, module2) {
        module2.exports = __toBinary("");
      }
    });

    // wasm-module:./blake2b.wat
    var bytes = require_blake2b();
    var compiled = WebAssembly.compile(bytes);
    var blake2b = async (imports) => {
      const instance = await WebAssembly.instantiate(await compiled, imports);
      return instance.exports;
    };

    var blake2bWasm = createCommonjsModule(function (module) {
    var wasm = null;
    var wasmPromise = typeof WebAssembly !== "undefined" && blake2b().then(mod => {
      wasm = mod;
    });

    var head = 64;
    var freeList = [];

    module.exports = Blake2b;
    var BYTES_MIN = module.exports.BYTES_MIN = 16;
    var BYTES_MAX = module.exports.BYTES_MAX = 64;
    module.exports.BYTES = 32;
    var KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16;
    var KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64;
    module.exports.KEYBYTES = 32;
    var SALTBYTES = module.exports.SALTBYTES = 16;
    var PERSONALBYTES = module.exports.PERSONALBYTES = 16;

    function Blake2b (digestLength, key, salt, personal, noAssert) {
      if (!(this instanceof Blake2b)) return new Blake2b(digestLength, key, salt, personal, noAssert)
      if (!wasm) throw new Error('WASM not loaded. Wait for Blake2b.ready(cb)')
      if (!digestLength) digestLength = 32;

      if (noAssert !== true) {
        nanoassert(digestLength >= BYTES_MIN, 'digestLength must be at least ' + BYTES_MIN + ', was given ' + digestLength);
        nanoassert(digestLength <= BYTES_MAX, 'digestLength must be at most ' + BYTES_MAX + ', was given ' + digestLength);
        if (key != null) {
          nanoassert(key instanceof Uint8Array, 'key must be Uint8Array or Buffer');
          nanoassert(key.length >= KEYBYTES_MIN, 'key must be at least ' + KEYBYTES_MIN + ', was given ' + key.length);
          nanoassert(key.length <= KEYBYTES_MAX, 'key must be at least ' + KEYBYTES_MAX + ', was given ' + key.length);
        }
        if (salt != null) {
          nanoassert(salt instanceof Uint8Array, 'salt must be Uint8Array or Buffer');
          nanoassert(salt.length === SALTBYTES, 'salt must be exactly ' + SALTBYTES + ', was given ' + salt.length);
        }
        if (personal != null) {
          nanoassert(personal instanceof Uint8Array, 'personal must be Uint8Array or Buffer');
          nanoassert(personal.length === PERSONALBYTES, 'personal must be exactly ' + PERSONALBYTES + ', was given ' + personal.length);
        }
      }

      if (!freeList.length) {
        freeList.push(head);
        head += 216;
      }

      this.digestLength = digestLength;
      this.finalized = false;
      this.pointer = freeList.pop();
      this._memory = new Uint8Array(wasm.memory.buffer);

      this._memory.fill(0, 0, 64);
      this._memory[0] = this.digestLength;
      this._memory[1] = key ? key.length : 0;
      this._memory[2] = 1; // fanout
      this._memory[3] = 1; // depth

      if (salt) this._memory.set(salt, 32);
      if (personal) this._memory.set(personal, 48);

      if (this.pointer + 216 > this._memory.length) this._realloc(this.pointer + 216); // we need 216 bytes for the state
      wasm.blake2b_init(this.pointer, this.digestLength);

      if (key) {
        this.update(key);
        this._memory.fill(0, head, head + key.length); // whiteout key
        this._memory[this.pointer + 200] = 128;
      }
    }

    Blake2b.prototype._realloc = function (size) {
      wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - this._memory.length) / 65536)));
      this._memory = new Uint8Array(wasm.memory.buffer);
    };

    Blake2b.prototype.update = function (input) {
      nanoassert(this.finalized === false, 'Hash instance finalized');
      nanoassert(input instanceof Uint8Array, 'input must be Uint8Array or Buffer');

      if (head + input.length > this._memory.length) this._realloc(head + input.length);
      this._memory.set(input, head);
      wasm.blake2b_update(this.pointer, head, head + input.length);
      return this
    };

    Blake2b.prototype.digest = function (enc) {
      nanoassert(this.finalized === false, 'Hash instance finalized');
      this.finalized = true;

      freeList.push(this.pointer);
      wasm.blake2b_final(this.pointer);

      if (!enc || enc === 'binary') {
        return this._memory.slice(this.pointer + 128, this.pointer + 128 + this.digestLength)
      }

      if (typeof enc === 'string') {
        return browser.toString(this._memory, enc, this.pointer + 128, this.pointer + 128 + this.digestLength)
      }

      nanoassert(enc instanceof Uint8Array && enc.length >= this.digestLength, 'input must be Uint8Array or Buffer');
      for (var i = 0; i < this.digestLength; i++) {
        enc[i] = this._memory[this.pointer + 128 + i];
      }

      return enc
    };

    // libsodium compat
    Blake2b.prototype.final = Blake2b.prototype.digest;

    Blake2b.WASM = wasm;
    Blake2b.SUPPORTED = typeof WebAssembly !== 'undefined';

    Blake2b.ready = function (cb) {
      if (!cb) cb = noop;
      if (!wasmPromise) return cb(new Error('WebAssembly not supported'))
      return wasmPromise.then(() => cb(), cb)
    };

    Blake2b.prototype.ready = Blake2b.ready;

    Blake2b.prototype.getPartialHash = function () {
      return this._memory.slice(this.pointer, this.pointer + 216);
    };

    Blake2b.prototype.setPartialHash = function (ph) {
      this._memory.set(ph, this.pointer);
    };

    function noop () {}
    });

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    const _revTable = [];
    for (let i=0; i<256; i++) {
        _revTable[i] = _revSlow(i, 8);
    }

    function _revSlow(idx, bits) {
        let res =0;
        let a = idx;
        for (let i=0; i<bits; i++) {
            res <<= 1;
            res = res | (a &1);
            a >>=1;
        }
        return res;
    }


    function log2( V )
    {
        return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );
    }


    function formatHash(b, title) {
        const a = new DataView(b.buffer, b.byteOffset, b.byteLength);
        let S = "";
        for (let i=0; i<4; i++) {
            if (i>0) S += "\n";
            S += "\t\t";
            for (let j=0; j<4; j++) {
                if (j>0) S += " ";
                S += a.getUint32(i*16+j*4).toString(16).padStart(8, "0");
            }
        }
        if (title) S = title + "\n" + S;
        return S;
    }

    function hashIsEqual(h1, h2) {
        if (h1.byteLength != h2.byteLength) return false;
        var dv1 = new Int8Array(h1);
        var dv2 = new Int8Array(h2);
        for (var i = 0 ; i != h1.byteLength ; i++)
        {
            if (dv1[i] != dv2[i]) return false;
        }
        return true;
    }

    function cloneHasher(h) {
        const ph = h.getPartialHash();
        const res = blake2bWasm(64);
        res.setPartialHash(ph);
        return res;
    }

    async function sameRatio$2(curve, g1s, g1sx, g2s, g2sx) {
        if (curve.G1.isZero(g1s)) return false;
        if (curve.G1.isZero(g1sx)) return false;
        if (curve.G2.isZero(g2s)) return false;
        if (curve.G2.isZero(g2sx)) return false;
        // return curve.F12.eq(curve.pairing(g1s, g2sx), curve.pairing(g1sx, g2s));
        const res = await curve.pairingEq(g1s, g2sx, curve.G1.neg(g1sx), g2s);
        return res;
    }


    function askEntropy() {
        {
            return window.prompt("Enter a random text. (Entropy): ", "");
        }
    }

    async function getRandomRng(entropy) {
        // Generate a random Rng
        while (!entropy) {
            entropy = await askEntropy();
        }
        const hasher = blake2bWasm(64);
        hasher.update(crypto.randomBytes(64));
        const enc = new TextEncoder(); // always utf-8
        hasher.update(enc.encode(entropy));
        const hash = Buffer.from(hasher.digest());

        const seed = [];
        for (let i=0;i<8;i++) {
            seed[i] = hash.readUInt32BE(i*4);
        }
        const rng = new ChaCha(seed);
        return rng;
    }

    function rngFromBeaconParams(beaconHash, numIterationsExp) {
        let nIterationsInner;
        let nIterationsOuter;
        if (numIterationsExp<32) {
            nIterationsInner = (1 << numIterationsExp) >>> 0;
            nIterationsOuter = 1;
        } else {
            nIterationsInner = 0x100000000;
            nIterationsOuter = (1 << (numIterationsExp-32)) >>> 0;
        }

        let curHash = beaconHash;
        for (let i=0; i<nIterationsOuter; i++) {
            for (let j=0; j<nIterationsInner; j++) {
                curHash = crypto.createHash("sha256").update(curHash).digest();
            }
        }

        const curHashV = new DataView(curHash.buffer, curHash.byteOffset, curHash.byteLength);
        const seed = [];
        for (let i=0; i<8; i++) {
            seed[i] = curHashV.getUint32(i*4, false);
        }

        const rng = new ChaCha(seed);

        return rng;
    }

    function hex2ByteArray(s) {
        if (s instanceof Uint8Array) return s;
        if (s.slice(0,2) == "0x") s= s.slice(2);
        return new Uint8Array(s.match(/[\da-f]{2}/gi).map(function (h) {
            return parseInt(h, 16);
        }));
    }

    function byteArray2hex(byteArray) {
        return Array.prototype.map.call(byteArray, function(byte) {
            return ("0" + (byte & 0xFF).toString(16)).slice(-2);
        }).join("");
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function writeHeader(fd, zkey) {

        // Write the header
        ///////////
        await startWriteSection(fd, 1);
        await fd.writeULE32(1); // Groth
        await endWriteSection(fd);

        // Write the Groth header section
        ///////////

        const curve = await getCurveFromQ(zkey.q);

        await startWriteSection(fd, 2);
        const primeQ = curve.q;
        const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;

        const primeR = curve.r;
        const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;

        await fd.writeULE32(n8q);
        await writeBigInt(fd, primeQ, n8q);
        await fd.writeULE32(n8r);
        await writeBigInt(fd, primeR, n8r);
        await fd.writeULE32(zkey.nVars);                         // Total number of bars
        await fd.writeULE32(zkey.nPublic);                       // Total number of public vars (not including ONE)
        await fd.writeULE32(zkey.domainSize);                  // domainSize
        await writeG1(fd, curve, zkey.vk_alpha_1);
        await writeG1(fd, curve, zkey.vk_beta_1);
        await writeG2(fd, curve, zkey.vk_beta_2);
        await writeG2(fd, curve, zkey.vk_gamma_2);
        await writeG1(fd, curve, zkey.vk_delta_1);
        await writeG2(fd, curve, zkey.vk_delta_2);

        await endWriteSection(fd);


    }

    async function writeG1(fd, curve, p) {
        const buff = new Uint8Array(curve.G1.F.n8*2);
        curve.G1.toRprLEM(buff, 0, p);
        await fd.write(buff);
    }

    async function writeG2(fd, curve, p) {
        const buff = new Uint8Array(curve.G2.F.n8*2);
        curve.G2.toRprLEM(buff, 0, p);
        await fd.write(buff);
    }

    async function readG1(fd, curve, toObject) {
        const buff = await fd.read(curve.G1.F.n8*2);
        const res = curve.G1.fromRprLEM(buff, 0);
        return toObject ? curve.G1.toObject(res) : res;
    }

    async function readG2(fd, curve, toObject) {
        const buff = await fd.read(curve.G2.F.n8*2);
        const res = curve.G2.fromRprLEM(buff, 0);
        return toObject ? curve.G2.toObject(res) : res;
    }


    async function readHeader$1(fd, sections, toObject) {
        // Read Header
        /////////////////////
        await startReadUniqueSection(fd, sections, 1);
        const protocolId = await fd.readULE32();
        await endReadSection(fd);

        if (protocolId == 1) {
            return await readHeaderGroth16(fd, sections, toObject);
        } else if (protocolId == 2) {
            return await readHeaderPlonk(fd, sections);
        } else {
            throw new Error("Protocol not supported: ");
        }        
    }




    async function readHeaderGroth16(fd, sections, toObject) {
        const zkey = {};

        zkey.protocol = "groth16";

        // Read Groth Header
        /////////////////////
        await startReadUniqueSection(fd, sections, 2);
        const n8q = await fd.readULE32();
        zkey.n8q = n8q;
        zkey.q = await readBigInt(fd, n8q);

        const n8r = await fd.readULE32();
        zkey.n8r = n8r;
        zkey.r = await readBigInt(fd, n8r);

        let curve = await getCurveFromQ(zkey.q);

        zkey.nVars = await fd.readULE32();
        zkey.nPublic = await fd.readULE32();
        zkey.domainSize = await fd.readULE32();
        zkey.power = log2(zkey.domainSize);
        zkey.vk_alpha_1 = await readG1(fd, curve, toObject);
        zkey.vk_beta_1 = await readG1(fd, curve, toObject);
        zkey.vk_beta_2 = await readG2(fd, curve, toObject);
        zkey.vk_gamma_2 = await readG2(fd, curve, toObject);
        zkey.vk_delta_1 = await readG1(fd, curve, toObject);
        zkey.vk_delta_2 = await readG2(fd, curve, toObject);
        await endReadSection(fd);

        return zkey;

    }




    async function readHeaderPlonk(fd, sections, protocol, toObject) {
        const zkey = {};

        zkey.protocol = "plonk";

        // Read Plonk Header
        /////////////////////
        await startReadUniqueSection(fd, sections, 2);
        const n8q = await fd.readULE32();
        zkey.n8q = n8q;
        zkey.q = await readBigInt(fd, n8q);

        const n8r = await fd.readULE32();
        zkey.n8r = n8r;
        zkey.r = await readBigInt(fd, n8r);

        let curve = await getCurveFromQ(zkey.q);

        zkey.nVars = await fd.readULE32();
        zkey.nPublic = await fd.readULE32();
        zkey.domainSize = await fd.readULE32();
        zkey.power = log2(zkey.domainSize);
        zkey.nAdditions = await fd.readULE32();
        zkey.nConstrains = await fd.readULE32();
        zkey.k1 = await fd.read(n8r);
        zkey.k2 = await fd.read(n8r);

        zkey.Qm = await readG1(fd, curve, toObject);
        zkey.Ql = await readG1(fd, curve, toObject);
        zkey.Qr = await readG1(fd, curve, toObject);
        zkey.Qo = await readG1(fd, curve, toObject);
        zkey.Qc = await readG1(fd, curve, toObject);
        zkey.S1 = await readG1(fd, curve, toObject);
        zkey.S2 = await readG1(fd, curve, toObject);
        zkey.S3 = await readG1(fd, curve, toObject);
        zkey.X_2 = await readG2(fd, curve, toObject);

        await endReadSection(fd);

        return zkey;
    }

    async function readZKey(fileName, toObject) {
        const {fd, sections} = await readBinFile(fileName, "zkey", 1);

        const zkey = await readHeader$1(fd, sections, "groth16");

        const Fr = new F1Field(zkey.r);
        const Rr = Scalar.mod(Scalar.shl(1, zkey.n8r*8), zkey.r);
        const Rri = Fr.inv(Rr);
        const Rri2 = Fr.mul(Rri, Rri);

        let curve = await getCurveFromQ(zkey.q);

        // Read IC Section
        ///////////
        await startReadUniqueSection(fd, sections, 3);
        zkey.IC = [];
        for (let i=0; i<= zkey.nPublic; i++) {
            const P = await readG1(fd, curve, toObject);
            zkey.IC.push(P);
        }
        await endReadSection(fd);


        // Read Coefs
        ///////////
        await startReadUniqueSection(fd, sections, 4);
        const nCCoefs = await fd.readULE32();
        zkey.ccoefs = [];
        for (let i=0; i<nCCoefs; i++) {
            const m = await fd.readULE32();
            const c = await fd.readULE32();
            const s = await fd.readULE32();
            const v = await readFr2();
            zkey.ccoefs.push({
                matrix: m,
                constraint: c,
                signal: s,
                value: v
            });
        }
        await endReadSection(fd);

        // Read A points
        ///////////
        await startReadUniqueSection(fd, sections, 5);
        zkey.A = [];
        for (let i=0; i<zkey.nVars; i++) {
            const A = await readG1(fd, curve, toObject);
            zkey.A[i] = A;
        }
        await endReadSection(fd);


        // Read B1
        ///////////
        await startReadUniqueSection(fd, sections, 6);
        zkey.B1 = [];
        for (let i=0; i<zkey.nVars; i++) {
            const B1 = await readG1(fd, curve, toObject);

            zkey.B1[i] = B1;
        }
        await endReadSection(fd);


        // Read B2 points
        ///////////
        await startReadUniqueSection(fd, sections, 7);
        zkey.B2 = [];
        for (let i=0; i<zkey.nVars; i++) {
            const B2 = await readG2(fd, curve, toObject);
            zkey.B2[i] = B2;
        }
        await endReadSection(fd);


        // Read C points
        ///////////
        await startReadUniqueSection(fd, sections, 8);
        zkey.C = [];
        for (let i=zkey.nPublic+1; i<zkey.nVars; i++) {
            const C = await readG1(fd, curve, toObject);

            zkey.C[i] = C;
        }
        await endReadSection(fd);


        // Read H points
        ///////////
        await startReadUniqueSection(fd, sections, 9);
        zkey.hExps = [];
        for (let i=0; i<zkey.domainSize; i++) {
            const H = await readG1(fd, curve, toObject);
            zkey.hExps.push(H);
        }
        await endReadSection(fd);

        await fd.close();

        return zkey;

        async function readFr2(/* toObject */) {
            const n = await readBigInt(fd, zkey.n8r);
            return Fr.mul(n, Rri2);
        }

    }


    async function readContribution$1(fd, curve, toObject) {
        const c = {delta:{}};
        c.deltaAfter = await readG1(fd, curve, toObject);
        c.delta.g1_s = await readG1(fd, curve, toObject);
        c.delta.g1_sx = await readG1(fd, curve, toObject);
        c.delta.g2_spx = await readG2(fd, curve, toObject);
        c.transcript = await fd.read(64);
        c.type = await fd.readULE32();

        const paramLength = await fd.readULE32();
        const curPos = fd.pos;
        let lastType =0;
        while (fd.pos-curPos < paramLength) {
            const buffType = await fd.read(1);
            if (buffType[0]<= lastType) throw new Error("Parameters in the contribution must be sorted");
            lastType = buffType[0];
            if (buffType[0]==1) {     // Name
                const buffLen = await fd.read(1);
                const buffStr = await fd.read(buffLen[0]);
                c.name = new TextDecoder().decode(buffStr);
            } else if (buffType[0]==2) {
                const buffExp = await fd.read(1);
                c.numIterationsExp = buffExp[0];
            } else if (buffType[0]==3) {
                const buffLen = await fd.read(1);
                c.beaconHash = await fd.read(buffLen[0]);
            } else {
                throw new Error("Parameter not recognized");
            }
        }
        if (fd.pos != curPos + paramLength) {
            throw new Error("Parametes do not match");
        }

        return c;
    }


    async function readMPCParams(fd, curve, sections) {
        await startReadUniqueSection(fd, sections, 10);
        const res = { contributions: []};
        res.csHash = await fd.read(64);
        const n = await fd.readULE32();
        for (let i=0; i<n; i++) {
            const c = await readContribution$1(fd, curve);
            res.contributions.push(c);
        }
        await endReadSection(fd);

        return res;
    }

    async function writeContribution$1(fd, curve, c) {
        await writeG1(fd, curve, c.deltaAfter);
        await writeG1(fd, curve, c.delta.g1_s);
        await writeG1(fd, curve, c.delta.g1_sx);
        await writeG2(fd, curve, c.delta.g2_spx);
        await fd.write(c.transcript);
        await fd.writeULE32(c.type || 0);

        const params = [];
        if (c.name) {
            params.push(1);      // Param Name
            const nameData = new TextEncoder("utf-8").encode(c.name.substring(0,64));
            params.push(nameData.byteLength);
            for (let i=0; i<nameData.byteLength; i++) params.push(nameData[i]);
        }
        if (c.type == 1) {
            params.push(2);      // Param numIterationsExp
            params.push(c.numIterationsExp);

            params.push(3);      // Beacon Hash
            params.push(c.beaconHash.byteLength);
            for (let i=0; i<c.beaconHash.byteLength; i++) params.push(c.beaconHash[i]);
        }
        if (params.length>0) {
            const paramsBuff = new Uint8Array(params);
            await fd.writeULE32(paramsBuff.byteLength);
            await fd.write(paramsBuff);
        } else {
            await fd.writeULE32(0);
        }

    }

    async function writeMPCParams(fd, curve, mpcParams) {
        await startWriteSection(fd, 10);
        await fd.write(mpcParams.csHash);
        await fd.writeULE32(mpcParams.contributions.length);
        for (let i=0; i<mpcParams.contributions.length; i++) {
            await writeContribution$1(fd, curve,mpcParams.contributions[i]);
        }
        await endWriteSection(fd);
    }

    function hashG1(hasher, curve, p) {
        const buff = new Uint8Array(curve.G1.F.n8*2);
        curve.G1.toRprUncompressed(buff, 0, p);
        hasher.update(buff);
    }

    function hashG2(hasher,curve, p) {
        const buff = new Uint8Array(curve.G2.F.n8*2);
        curve.G2.toRprUncompressed(buff, 0, p);
        hasher.update(buff);
    }

    function hashPubKey(hasher, curve, c) {
        hashG1(hasher, curve, c.deltaAfter);
        hashG1(hasher, curve, c.delta.g1_s);
        hashG1(hasher, curve, c.delta.g1_sx);
        hashG2(hasher, curve, c.delta.g2_spx);
        hasher.update(c.transcript);
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */


    async function write(fd, witness, prime) {

        await startWriteSection(fd, 1);
        const n8 = (Math.floor( (Scalar.bitLength(prime) - 1) / 64) +1)*8;
        await fd.writeULE32(n8);
        await writeBigInt(fd, prime, n8);
        await fd.writeULE32(witness.length);
        await endWriteSection(fd);

        await startWriteSection(fd, 2);
        for (let i=0; i<witness.length; i++) {
            await writeBigInt(fd, witness[i], n8);
        }
        await endWriteSection(fd);


    }

    async function writeBin(fd, witnessBin, prime) {

        await startWriteSection(fd, 1);
        const n8 = (Math.floor( (Scalar.bitLength(prime) - 1) / 64) +1)*8;
        await fd.writeULE32(n8);
        await writeBigInt(fd, prime, n8);
        if (witnessBin.byteLength % n8 != 0) {
            throw new Error("Invalid witness length");
        }
        await fd.writeULE32(witnessBin.byteLength / n8);
        await endWriteSection(fd);


        await startWriteSection(fd, 2);
        await fd.write(witnessBin);
        await endWriteSection(fd);

    }

    async function readHeader(fd, sections) {

        await startReadUniqueSection(fd, sections, 1);
        const n8 = await fd.readULE32();
        const q = await readBigInt(fd, n8);
        const nWitness = await fd.readULE32();
        await endReadSection(fd);

        return {n8, q, nWitness};

    }

    async function read(fileName) {

        const {fd, sections} = await readBinFile(fileName, "wtns", 2);

        const {n8, nWitness} = await readHeader(fd, sections);

        await startReadUniqueSection(fd, sections, 2);
        const res = [];
        for (let i=0; i<nWitness; i++) {
            const v = await readBigInt(fd, n8);
            res.push(v);
        }
        await endReadSection(fd);

        await fd.close();

        return res;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const {stringifyBigInts: stringifyBigInts$3} = utils;

    async function groth16Prove(zkeyFileName, witnessFileName, logger) {
        const {fd: fdWtns, sections: sectionsWtns} = await readBinFile(witnessFileName, "wtns", 2);

        const wtns = await readHeader(fdWtns, sectionsWtns);

        const {fd: fdZKey, sections: sectionsZKey} = await readBinFile(zkeyFileName, "zkey", 2);

        const zkey = await readHeader$1(fdZKey, sectionsZKey);

        if (zkey.protocol != "groth16") {
            throw new Error("zkey file is not groth16");
        }

        if (!Scalar.eq(zkey.r,  wtns.q)) {
            throw new Error("Curve of the witness does not match the curve of the proving key");
        }

        if (wtns.nWitness != zkey.nVars) {
            throw new Error(`Invalid witness length. Circuit: ${zkey.nVars}, witness: ${wtns.nWitness}`);
        }

        const curve = await getCurveFromQ(zkey.q);
        const Fr = curve.Fr;
        const G1 = curve.G1;
        const G2 = curve.G2;

        const power = log2(zkey.domainSize);

        if (logger) logger.debug("Reading Wtns");
        const buffWitness = await readSection(fdWtns, sectionsWtns, 2);
        if (logger) logger.debug("Reading Coeffs");
        const buffCoeffs = await readSection(fdZKey, sectionsZKey, 4);

        if (logger) logger.debug("Building ABC");
        const [buffA_T, buffB_T, buffC_T] = await buildABC1(curve, zkey, buffWitness, buffCoeffs, logger);

        const inc = power == Fr.s ? curve.Fr.shift : curve.Fr.w[power+1];

        const buffA = await Fr.ifft(buffA_T, "", "", logger, "IFFT_A");
        const buffAodd = await Fr.batchApplyKey(buffA, Fr.e(1), inc);
        const buffAodd_T = await Fr.fft(buffAodd, "", "", logger, "FFT_A");

        const buffB = await Fr.ifft(buffB_T, "", "", logger, "IFFT_B");
        const buffBodd = await Fr.batchApplyKey(buffB, Fr.e(1), inc);
        const buffBodd_T = await Fr.fft(buffBodd, "", "", logger, "FFT_B");

        const buffC = await Fr.ifft(buffC_T, "", "", logger, "IFFT_C");
        const buffCodd = await Fr.batchApplyKey(buffC, Fr.e(1), inc);
        const buffCodd_T = await Fr.fft(buffCodd, "", "", logger, "FFT_C");

        if (logger) logger.debug("Join ABC");
        const buffPodd_T = await joinABC(curve, zkey, buffAodd_T, buffBodd_T, buffCodd_T, logger);

        let proof = {};

        if (logger) logger.debug("Reading A Points");
        const buffBasesA = await readSection(fdZKey, sectionsZKey, 5);
        proof.pi_a = await curve.G1.multiExpAffine(buffBasesA, buffWitness, logger, "multiexp A");

        if (logger) logger.debug("Reading B1 Points");
        const buffBasesB1 = await readSection(fdZKey, sectionsZKey, 6);
        let pib1 = await curve.G1.multiExpAffine(buffBasesB1, buffWitness, logger, "multiexp B1");

        if (logger) logger.debug("Reading B2 Points");
        const buffBasesB2 = await readSection(fdZKey, sectionsZKey, 7);
        proof.pi_b = await curve.G2.multiExpAffine(buffBasesB2, buffWitness, logger, "multiexp B2");

        if (logger) logger.debug("Reading C Points");
        const buffBasesC = await readSection(fdZKey, sectionsZKey, 8);
        proof.pi_c = await curve.G1.multiExpAffine(buffBasesC, buffWitness.slice((zkey.nPublic+1)*curve.Fr.n8), logger, "multiexp C");

        if (logger) logger.debug("Reading H Points");
        const buffBasesH = await readSection(fdZKey, sectionsZKey, 9);
        const resH = await curve.G1.multiExpAffine(buffBasesH, buffPodd_T, logger, "multiexp H");

        const r = curve.Fr.random();
        const s = curve.Fr.random();

        proof.pi_a  = G1.add( proof.pi_a, zkey.vk_alpha_1 );
        proof.pi_a  = G1.add( proof.pi_a, G1.timesFr( zkey.vk_delta_1, r ));

        proof.pi_b  = G2.add( proof.pi_b, zkey.vk_beta_2 );
        proof.pi_b  = G2.add( proof.pi_b, G2.timesFr( zkey.vk_delta_2, s ));

        pib1 = G1.add( pib1, zkey.vk_beta_1 );
        pib1 = G1.add( pib1, G1.timesFr( zkey.vk_delta_1, s ));

        proof.pi_c = G1.add(proof.pi_c, resH);


        proof.pi_c  = G1.add( proof.pi_c, G1.timesFr( proof.pi_a, s ));
        proof.pi_c  = G1.add( proof.pi_c, G1.timesFr( pib1, r ));
        proof.pi_c  = G1.add( proof.pi_c, G1.timesFr( zkey.vk_delta_1, Fr.neg(Fr.mul(r,s) )));


        let publicSignals = [];

        for (let i=1; i<= zkey.nPublic; i++) {
            const b = buffWitness.slice(i*Fr.n8, i*Fr.n8+Fr.n8);
            publicSignals.push(Scalar.fromRprLE(b));
        }

        proof.pi_a = G1.toObject(G1.toAffine(proof.pi_a));
        proof.pi_b = G2.toObject(G2.toAffine(proof.pi_b));
        proof.pi_c = G1.toObject(G1.toAffine(proof.pi_c));

        proof.protocol = "groth16";
        proof.curve = curve.name;

        await fdZKey.close();
        await fdWtns.close();

        proof = stringifyBigInts$3(proof);
        publicSignals = stringifyBigInts$3(publicSignals);

        return {proof, publicSignals};
    }


    async function buildABC1(curve, zkey, witness, coeffs, logger) {
        const n8 = curve.Fr.n8;
        const sCoef = 4*3 + zkey.n8r;
        const nCoef = (coeffs.byteLength-4) / sCoef;

        const outBuffA = new BigBuffer(zkey.domainSize * n8);
        const outBuffB = new BigBuffer(zkey.domainSize * n8);
        const outBuffC = new BigBuffer(zkey.domainSize * n8);

        const outBuf = [ outBuffA, outBuffB ];
        for (let i=0; i<nCoef; i++) {
            if ((logger)&&(i%1000000 == 0)) logger.debug(`QAP AB: ${i}/${nCoef}`);
            const buffCoef = coeffs.slice(4+i*sCoef, 4+i*sCoef+sCoef);
            const buffCoefV = new DataView(buffCoef.buffer);
            const m= buffCoefV.getUint32(0, true);
            const c= buffCoefV.getUint32(4, true);
            const s= buffCoefV.getUint32(8, true);
            const coef = buffCoef.slice(12, 12+n8);
            outBuf[m].set(
                curve.Fr.add(
                    outBuf[m].slice(c*n8, c*n8+n8),
                    curve.Fr.mul(coef, witness.slice(s*n8, s*n8+n8))
                ),
                c*n8
            );
        }

        for (let i=0; i<zkey.domainSize; i++) {
            if ((logger)&&(i%1000000 == 0)) logger.debug(`QAP C: ${i}/${zkey.domainSize}`);
            outBuffC.set(
                curve.Fr.mul(
                    outBuffA.slice(i*n8, i*n8+n8),
                    outBuffB.slice(i*n8, i*n8+n8),
                ),
                i*n8
            );
        }

        return [outBuffA, outBuffB, outBuffC];

    }

    /*
    async function buldABC(curve, zkey, witness, coeffs, logger) {
        const concurrency = curve.tm.concurrency;
        const sCoef = 4*3 + zkey.n8r;

        let getUint32;

        if (coeffs instanceof BigBuffer) {
            const coeffsDV = [];
            const PAGE_LEN = coeffs.buffers[0].length;
            for (let i=0; i< coeffs.buffers.length; i++) {
                coeffsDV.push(new DataView(coeffs.buffers[i].buffer));
            }
            getUint32 = function (pos) {
                return coeffsDV[Math.floor(pos/PAGE_LEN)].getUint32(pos % PAGE_LEN, true);
            };
        } else {
            const coeffsDV = new DataView(coeffs.buffer, coeffs.byteOffset, coeffs.byteLength);
            getUint32 = function (pos) {
                return coeffsDV.getUint32(pos, true);
            };
        }

        const elementsPerChunk = Math.floor(zkey.domainSize/concurrency);
        const promises = [];

        const cutPoints = [];
        for (let i=0; i<concurrency; i++) {
            cutPoints.push( getCutPoint( Math.floor(i*elementsPerChunk) ));
        }
        cutPoints.push(coeffs.byteLength);

        const chunkSize = 2**26;
        for (let s=0 ; s<zkey.nVars ; s+= chunkSize) {
            if (logger) logger.debug(`QAP ${s}: ${s}/${zkey.nVars}`);
            const ns= Math.min(zkey.nVars-s, chunkSize );

            for (let i=0; i<concurrency; i++) {
                let n;
                if (i< concurrency-1) {
                    n = elementsPerChunk;
                } else {
                    n = zkey.domainSize - i*elementsPerChunk;
                }
                if (n==0) continue;

                const task = [];

                task.push({cmd: "ALLOCSET", var: 0, buff: coeffs.slice(cutPoints[i], cutPoints[i+1])});
                task.push({cmd: "ALLOCSET", var: 1, buff: witness.slice(s*curve.Fr.n8, (s+ns)*curve.Fr.n8)});
                task.push({cmd: "ALLOC", var: 2, len: n*curve.Fr.n8});
                task.push({cmd: "ALLOC", var: 3, len: n*curve.Fr.n8});
                task.push({cmd: "ALLOC", var: 4, len: n*curve.Fr.n8});
                task.push({cmd: "CALL", fnName: "qap_buildABC", params:[
                    {var: 0},
                    {val: (cutPoints[i+1] - cutPoints[i])/sCoef},
                    {var: 1},
                    {var: 2},
                    {var: 3},
                    {var: 4},
                    {val: i*elementsPerChunk},
                    {val: n},
                    {val: s},
                    {val: ns}
                ]});
                task.push({cmd: "GET", out: 0, var: 2, len: n*curve.Fr.n8});
                task.push({cmd: "GET", out: 1, var: 3, len: n*curve.Fr.n8});
                task.push({cmd: "GET", out: 2, var: 4, len: n*curve.Fr.n8});
                promises.push(curve.tm.queueAction(task));
            }
        }

        let result = await Promise.all(promises);

        const nGroups = result.length / concurrency;
        if (nGroups>1) {
            const promises2 = [];
            for (let i=0; i<concurrency; i++) {
                const task=[];
                task.push({cmd: "ALLOC", var: 0, len: result[i][0].byteLength});
                task.push({cmd: "ALLOC", var: 1, len: result[i][0].byteLength});
                for (let m=0; m<3; m++) {
                    task.push({cmd: "SET", var: 0, buff: result[i][m]});
                    for (let s=1; s<nGroups; s++) {
                        task.push({cmd: "SET", var: 1, buff: result[s*concurrency + i][m]});
                        task.push({cmd: "CALL", fnName: "qap_batchAdd", params:[
                            {var: 0},
                            {var: 1},
                            {val: result[i][m].length/curve.Fr.n8},
                            {var: 0}
                        ]});
                    }
                    task.push({cmd: "GET", out: m, var: 0, len: result[i][m].length});
                }
                promises2.push(curve.tm.queueAction(task));
            }
            result = await Promise.all(promises2);
        }

        const outBuffA = new BigBuffer(zkey.domainSize * curve.Fr.n8);
        const outBuffB = new BigBuffer(zkey.domainSize * curve.Fr.n8);
        const outBuffC = new BigBuffer(zkey.domainSize * curve.Fr.n8);
        let p=0;
        for (let i=0; i<result.length; i++) {
            outBuffA.set(result[i][0], p);
            outBuffB.set(result[i][1], p);
            outBuffC.set(result[i][2], p);
            p += result[i][0].byteLength;
        }

        return [outBuffA, outBuffB, outBuffC];

        function getCutPoint(v) {
            let m = 0;
            let n = getUint32(0);
            while (m < n) {
                var k = Math.floor((n + m) / 2);
                const va = getUint32(4 + k*sCoef + 4);
                if (va > v) {
                    n = k - 1;
                } else if (va < v) {
                    m = k + 1;
                } else {
                    n = k;
                }
            }
            return 4 + m*sCoef;
        }
    }
    */

    async function joinABC(curve, zkey, a, b, c, logger) {
        const MAX_CHUNK_SIZE = 1 << 22;

        const n8 = curve.Fr.n8;
        const nElements = Math.floor(a.byteLength / curve.Fr.n8);

        const promises = [];

        for (let i=0; i<nElements; i += MAX_CHUNK_SIZE) {
            if (logger) logger.debug(`JoinABC: ${i}/${nElements}`);
            const n= Math.min(nElements - i, MAX_CHUNK_SIZE);

            const task = [];

            const aChunk = a.slice(i*n8, (i + n)*n8 );
            const bChunk = b.slice(i*n8, (i + n)*n8 );
            const cChunk = c.slice(i*n8, (i + n)*n8 );

            task.push({cmd: "ALLOCSET", var: 0, buff: aChunk});
            task.push({cmd: "ALLOCSET", var: 1, buff: bChunk});
            task.push({cmd: "ALLOCSET", var: 2, buff: cChunk});
            task.push({cmd: "ALLOC", var: 3, len: n*n8});
            task.push({cmd: "CALL", fnName: "qap_joinABC", params:[
                {var: 0},
                {var: 1},
                {var: 2},
                {val: n},
                {var: 3},
            ]});
            task.push({cmd: "CALL", fnName: "frm_batchFromMontgomery", params:[
                {var: 3},
                {val: n},
                {var: 3}
            ]});
            task.push({cmd: "GET", out: 0, var: 3, len: n*n8});
            promises.push(curve.tm.queueAction(task));
        }

        const result = await Promise.all(promises);

        let outBuff;
        if (a instanceof BigBuffer) {
            outBuff = new BigBuffer(a.byteLength);
        } else {
            outBuff = new Uint8Array(a.byteLength);
        }

        let p=0;
        for (let i=0; i<result.length; i++) {
            outBuff.set(result[i][0], p);
            p += result[i][0].byteLength;
        }

        return outBuff;
    }

    /*

    Copyright 2020 0KIMS association.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    */

    function flatArray(a) {
        var res = [];
        fillArray(res, a);
        return res;

        function fillArray(res, a) {
            if (Array.isArray(a)) {
                for (let i=0; i<a.length; i++) {
                    fillArray(res, a[i]);
                }
            } else {
                res.push(a);
            }
        }
    }

    function fnvHash(str) {
        const uint64_max = BigInt(2) ** BigInt(64);
        let hash = BigInt("0xCBF29CE484222325");
        for (var i = 0; i < str.length; i++) {
        hash ^= BigInt(str[i].charCodeAt());
        hash *= BigInt(0x100000001B3);
        hash %= uint64_max;
        }
        let shash = hash.toString(16);
        let n = 16 - shash.length;
        shash = '0'.repeat(n).concat(shash);
        return shash;
    }

    // Note that this pads zeros
    function toArray32(s,size) {
        const res = []; //new Uint32Array(size); //has no unshift
        let rem = BigInt(s);
        const radix = BigInt(0x100000000);
        while (rem) {
            res.unshift( Number(rem % radix));
            rem = rem / radix;
        }
        if (size) {
        var i = size - res.length;
        while (i>0) {
            res.unshift(0);
            i--;
        }
        }
        return res;
    }

    /* globals WebAssembly */

    async function builder(code, options) {

        options = options || {};

        let memorySize = 32767;
        let memory;
        let memoryAllocated = false;
        while (!memoryAllocated){
            try{
                memory = new WebAssembly.Memory({initial:memorySize});
                memoryAllocated = true;
            } catch(err){
                if(memorySize === 1){
                    throw err;
                }
                console.warn("Could not allocate " + memorySize * 1024 * 64 + " bytes. This may cause severe instability. Trying with " + memorySize * 1024 * 64 / 2 + " bytes");
                memorySize = Math.floor(memorySize/2);
            }
        }

        const wasmModule = await WebAssembly.compile(code);

        let wc;

        const instance = await WebAssembly.instantiate(wasmModule, {
            env: {
                "memory": memory
            },
            runtime: {
                exceptionHandler: function(code) {
                    let errStr;
                    if (code == 1) {
                        errStr = "Signal not found. ";
                    } else if (code == 2) {
                        errStr = "Too many signals set. ";
                    } else if (code == 3) {
                        errStr = "Signal already set. ";
                    } else if (code == 4) {
                        errStr = "Assert Failed. ";
                    } else if (code == 5) {
                        errStr = "Not enough memory. ";
                    } else {
                        errStr = "Unknown error.";
                    }
                    console.log("ERROR: ", code, errStr);
                    throw new Error(errStr);
                },
                showSharedRWMemory: function() {
                    const shared_rw_memory_size = instance.exports.getFieldNumLen32();
                    const arr = new Uint32Array(shared_rw_memory_size);
                    for (let j=0; j<shared_rw_memory_size; j++) {
                        arr[shared_rw_memory_size-1-j] = instance.exports.readSharedRWMemory(j);
                    }
                    console.log(Scalar.fromArray(arr, 0x100000000));
                },
                error: function(code, pstr, a,b,c,d) {
                    let errStr;
                    if (code == 7) {
                        errStr=p2str(pstr) + " " + wc.getFr(b).toString() + " != " + wc.getFr(c).toString() + " " +p2str(d);
                    } else if (code == 9) {
                        errStr=p2str(pstr) + " " + wc.getFr(b).toString() + " " +p2str(c);
                    } else if ((code == 5)&&(options.sym)) {
                        errStr=p2str(pstr)+ " " + options.sym.labelIdx2Name[c];
                    } else {
                        errStr=p2str(pstr)+ " " + a + " " + b + " " + c + " " + d;
                    }
                    console.log("ERROR: ", code, errStr);
                    throw new Error(errStr);
                },
                log: function(a) {
                    console.log(wc.getFr(a).toString());
                },
                logGetSignal: function(signal, pVal) {
                    if (options.logGetSignal) {
                        options.logGetSignal(signal, wc.getFr(pVal) );
                    }
                },
                logSetSignal: function(signal, pVal) {
                    if (options.logSetSignal) {
                        options.logSetSignal(signal, wc.getFr(pVal) );
                    }
                },
                logStartComponent: function(cIdx) {
                    if (options.logStartComponent) {
                        options.logStartComponent(cIdx);
                    }
                },
                logFinishComponent: function(cIdx) {
                    if (options.logFinishComponent) {
                        options.logFinishComponent(cIdx);
                    }
                }
            }
        });

        const sanityCheck =
            options &&
            (
                options.sanityCheck ||
                options.logGetSignal ||
                options.logSetSignal ||
                options.logStartComponent ||
                options.logFinishComponent
            );

        if (typeof instance.exports.getVersion == 'function') {
            // Only circom 2 WASMs implement versioning
            wc = new WitnessCalculatorCircom2(instance, sanityCheck);
        } else {
            wc = new WitnessCalculatorCircom1(memory, instance, sanityCheck);
        }
        return wc;

        function p2str(p) {
            const i8 = new Uint8Array(memory.buffer);

            const bytes = [];

            for (let i=0; i8[p+i]>0; i++)  bytes.push(i8[p+i]);

            return String.fromCharCode.apply(null, bytes);
        }
    }
    class WitnessCalculatorCircom1 {
        constructor(memory, instance, sanityCheck) {
            this.memory = memory;
            this.i32 = new Uint32Array(memory.buffer);
            this.instance = instance;

            this.n32 = (this.instance.exports.getFrLen() >> 2) - 2;
            const pRawPrime = this.instance.exports.getPRawPrime();

            const arr = new Array(this.n32);
            for (let i=0; i<this.n32; i++) {
                arr[this.n32-1-i] = this.i32[(pRawPrime >> 2) + i];
            }

            this.prime = Scalar.fromArray(arr, 0x100000000);

            this.Fr = new F1Field(this.prime);

            this.mask32 = Scalar.fromString("FFFFFFFF", 16);
            this.NVars = this.instance.exports.getNVars();
            this.n64 = Math.floor((this.Fr.bitLength - 1) / 64)+1;
            this.R = this.Fr.e( Scalar.shiftLeft(1 , this.n64*64));
            this.RInv = this.Fr.inv(this.R);
            this.sanityCheck = sanityCheck;
        }

        circom_version() {
            return 1;
        }

        async _doCalculateWitness(input, sanityCheck) {
            this.instance.exports.init((this.sanityCheck || sanityCheck) ? 1 : 0);
            const pSigOffset = this.allocInt();
            const pFr = this.allocFr();
            const keys = Object.keys(input);
            keys.forEach( (k) => {
                const h = fnvHash(k);
                const hMSB = parseInt(h.slice(0,8), 16);
                const hLSB = parseInt(h.slice(8,16), 16);
                try {
                    this.instance.exports.getSignalOffset32(pSigOffset, 0, hMSB, hLSB);
                } catch (err) {
                    throw new Error(`Signal ${k} is not an input of the circuit.`);
                }
                const sigOffset = this.getInt(pSigOffset);
                const fArr = flatArray(input[k]);
                for (let i=0; i<fArr.length; i++) {
                    this.setFr(pFr, fArr[i]);
                    this.instance.exports.setSignal(0, 0, sigOffset + i, pFr);
                }
            });
        }

        async calculateWitness(input, sanityCheck) {
            const self = this;

            const old0 = self.i32[0];
            const w = [];

            await self._doCalculateWitness(input, sanityCheck);

            for (let i=0; i<self.NVars; i++) {
                const pWitness = self.instance.exports.getPWitness(i);
                w.push(self.getFr(pWitness));
            }

            self.i32[0] = old0;
            return w;
        }

        async calculateBinWitness(input, sanityCheck) {
            const self = this;

            const old0 = self.i32[0];

            await self._doCalculateWitness(input, sanityCheck);

            const pWitnessBuffer = self.instance.exports.getWitnessBuffer();

            self.i32[0] = old0;

            const buff = self.memory.buffer.slice(pWitnessBuffer, pWitnessBuffer + (self.NVars * self.n64 * 8));
            return new Uint8Array(buff);
        }

        allocInt() {
            const p = this.i32[0];
            this.i32[0] = p+8;
            return p;
        }

        allocFr() {
            const p = this.i32[0];
            this.i32[0] = p+this.n32*4 + 8;
            return p;
        }

        getInt(p) {
            return this.i32[p>>2];
        }

        setInt(p, v) {
            this.i32[p>>2] = v;
        }

        getFr(p) {
            const self = this;
            const idx = (p>>2);

            if (self.i32[idx + 1] & 0x80000000) {
                const arr = new Array(self.n32);
                for (let i=0; i<self.n32; i++) {
                    arr[self.n32-1-i] = self.i32[idx+2+i];
                }
                const res = self.Fr.e(Scalar.fromArray(arr, 0x100000000));
                if (self.i32[idx + 1] & 0x40000000) {
                    return fromMontgomery(res);
                } else {
                    return res;
                }

            } else {
                if (self.i32[idx] & 0x80000000) {
                    return self.Fr.e( self.i32[idx] - 0x100000000);
                } else {
                    return self.Fr.e(self.i32[idx]);
                }
            }

            function fromMontgomery(n) {
                return self.Fr.mul(self.RInv, n);
            }

        }


        setFr(p, v) {
            const self = this;

            v = self.Fr.e(v);

            const minShort = self.Fr.neg(self.Fr.e("80000000", 16));
            const maxShort = self.Fr.e("7FFFFFFF", 16);

            if (  (self.Fr.geq(v, minShort))
                &&(self.Fr.leq(v, maxShort)))
            {
                let a;
                if (self.Fr.geq(v, self.Fr.zero)) {
                    a = Scalar.toNumber(v);
                } else {
                    a = Scalar.toNumber( self.Fr.sub(v, minShort));
                    a = a - 0x80000000;
                    a = 0x100000000 + a;
                }
                self.i32[(p >> 2)] = a;
                self.i32[(p >> 2) + 1] = 0;
                return;
            }

            self.i32[(p >> 2)] = 0;
            self.i32[(p >> 2) + 1] = 0x80000000;
            const arr = Scalar.toArray(v, 0x100000000);
            for (let i=0; i<self.n32; i++) {
                const idx = arr.length-1-i;

                if ( idx >=0) {
                    self.i32[(p >> 2) + 2 + i] = arr[idx];
                } else {
                    self.i32[(p >> 2) + 2 + i] = 0;
                }
            }
        }
    }

    class WitnessCalculatorCircom2 {
        constructor(instance, sanityCheck) {
            this.instance = instance;

            this.version = this.instance.exports.getVersion();
            this.n32 = this.instance.exports.getFieldNumLen32();

            this.instance.exports.getRawPrime();
            const arr = new Array(this.n32);
            for (let i=0; i<this.n32; i++) {
                arr[this.n32-1-i] = this.instance.exports.readSharedRWMemory(i);
            }
            this.prime = Scalar.fromArray(arr, 0x100000000);

            this.witnessSize = this.instance.exports.getWitnessSize();

            this.sanityCheck = sanityCheck;
        }
        
        circom_version() {
            return this.instance.exports.getVersion();
        }

        async _doCalculateWitness(input, sanityCheck) {
            //input is assumed to be a map from signals to arrays of bigints
            this.instance.exports.init((this.sanityCheck || sanityCheck) ? 1 : 0);
            const keys = Object.keys(input);
            var input_counter = 0;
            keys.forEach( (k) => {
                const h = fnvHash(k);
                const hMSB = parseInt(h.slice(0,8), 16);
                const hLSB = parseInt(h.slice(8,16), 16);
                const fArr = flatArray(input[k]);
                for (let i=0; i<fArr.length; i++) {
            const arrFr = toArray32(fArr[i],this.n32);
            for (let j=0; j<this.n32; j++) {
                this.instance.exports.writeSharedRWMemory(j,arrFr[this.n32-1-j]);
            }
            try {
                        this.instance.exports.setInputSignal(hMSB, hLSB,i);
                input_counter++;
            } catch (err) {
                // console.log(`After adding signal ${i} of ${k}`)
                        throw new Error(err);
            }
                }

            });
            if (input_counter < this.instance.exports.getInputSize()) {
                throw new Error(`Not all inputs have been set. Only ${input_counter} out of ${this.instance.exports.getInputSize()}`);
            }
        }

        async calculateWitness(input, sanityCheck) {
            const w = [];

            await this._doCalculateWitness(input, sanityCheck);

            for (let i=0; i<this.witnessSize; i++) {
                this.instance.exports.getWitness(i);
            const arr = new Uint32Array(this.n32);
                for (let j=0; j<this.n32; j++) {
                arr[this.n32-1-j] = this.instance.exports.readSharedRWMemory(j);
                }
                w.push(fromArray32(arr));
            }

            return w;
        }

        async calculateWTNSBin(input, sanityCheck) {
            const buff32 = new Uint32Array(this.witnessSize*this.n32+this.n32+11);
            const buff = new  Uint8Array( buff32.buffer);
            await this._doCalculateWitness(input, sanityCheck);
          
            //"wtns"
            buff[0] = "w".charCodeAt(0);
            buff[1] = "t".charCodeAt(0);
            buff[2] = "n".charCodeAt(0);
            buff[3] = "s".charCodeAt(0);

            //version 2
            buff32[1] = 2;

            //number of sections: 2
            buff32[2] = 2;

            //id section 1
            buff32[3] = 1;

            const n8 = this.n32*4;
            //id section 1 length in 64bytes
            const idSection1length = 8 + n8;
            const idSection1lengthHex = idSection1length.toString(16);
                buff32[4] = parseInt(idSection1lengthHex.slice(0,8), 16);
                buff32[5] = parseInt(idSection1lengthHex.slice(8,16), 16);

            //this.n32
            buff32[6] = n8;

            //prime number
            this.instance.exports.getRawPrime();

            var pos = 7;
            for (let j=0; j<this.n32; j++) {
                buff32[pos+j] = this.instance.exports.readSharedRWMemory(j);
            }
            pos += this.n32;

            // witness size
            buff32[pos] = this.witnessSize;
            pos++;

            //id section 2
            buff32[pos] = 2;
            pos++;

            // section 2 length
            const idSection2length = n8*this.witnessSize;
            const idSection2lengthHex = idSection2length.toString(16);
            buff32[pos] = parseInt(idSection2lengthHex.slice(0,8), 16);
            buff32[pos+1] = parseInt(idSection2lengthHex.slice(8,16), 16);

            pos += 2;
            for (let i=0; i<this.witnessSize; i++) {
                this.instance.exports.getWitness(i);
                for (let j=0; j<this.n32; j++) {
                    buff32[pos+j] = this.instance.exports.readSharedRWMemory(j);
                }
                pos += this.n32;
            }

            return buff;
        }

    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const { unstringifyBigInts: unstringifyBigInts$7} = utils;

    async function wtnsCalculate(_input, wasmFileName, wtnsFileName, options) {
        const input = unstringifyBigInts$7(_input);

        const fdWasm = await readExisting(wasmFileName);
        const wasm = await fdWasm.read(fdWasm.totalSize);
        await fdWasm.close();

        const wc = await builder(wasm);
        if (wc.circom_version() == 1) {
            const w = await wc.calculateBinWitness(input);

            const fdWtns = await createBinFile(wtnsFileName, "wtns", 2, 2);

            await writeBin(fdWtns, w, wc.prime);
            await fdWtns.close();
        } else {
            const fdWtns = await createOverride(wtnsFileName);

            const w = await wc.calculateWTNSBin(input);

            await fdWtns.write(w);
            await fdWtns.close();
        }
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const {unstringifyBigInts: unstringifyBigInts$6} = utils;

    async function groth16FullProve(_input, wasmFile, zkeyFileName, logger) {
        const input = unstringifyBigInts$6(_input);

        const wtns= {
            type: "mem"
        };
        await wtnsCalculate(input, wasmFile, wtns);
        return await groth16Prove(zkeyFileName, wtns, logger);
    }

    /*
        Copyright 2018 0kims association.

        This file is part of snarkjs.

        snarkjs is a free software: you can redistribute it and/or
        modify it under the terms of the GNU General Public License as published by the
        Free Software Foundation, either version 3 of the License, or (at your option)
        any later version.

        snarkjs is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details.

        You should have received a copy of the GNU General Public License along with
        snarkjs. If not, see <https://www.gnu.org/licenses/>.
    */
    const {unstringifyBigInts: unstringifyBigInts$5} = utils;

    async function groth16Verify(_vk_verifier, _publicSignals, _proof, logger) {
    /*
        let cpub = vk_verifier.IC[0];
        for (let s= 0; s< vk_verifier.nPublic; s++) {
            cpub  = G1.add( cpub, G1.timesScalar( vk_verifier.IC[s+1], publicSignals[s]));
        }
    */

        const vk_verifier = unstringifyBigInts$5(_vk_verifier);
        const proof = unstringifyBigInts$5(_proof);
        const publicSignals = unstringifyBigInts$5(_publicSignals);

        const curve = await getCurveFromName(vk_verifier.curve);

        const IC0 = curve.G1.fromObject(vk_verifier.IC[0]);
        const IC = new Uint8Array(curve.G1.F.n8*2 * publicSignals.length);
        const w = new Uint8Array(curve.Fr.n8 * publicSignals.length);

        for (let i=0; i<publicSignals.length; i++) {
            const buffP = curve.G1.fromObject(vk_verifier.IC[i+1]);
            IC.set(buffP, i*curve.G1.F.n8*2);
            Scalar.toRprLE(w, curve.Fr.n8*i, publicSignals[i], curve.Fr.n8);
        }

        let cpub = await curve.G1.multiExpAffine(IC, w);
        cpub = curve.G1.add(cpub, IC0);

        const pi_a = curve.G1.fromObject(proof.pi_a);
        const pi_b = curve.G2.fromObject(proof.pi_b);
        const pi_c = curve.G1.fromObject(proof.pi_c);

        const vk_gamma_2 = curve.G2.fromObject(vk_verifier.vk_gamma_2);
        const vk_delta_2 = curve.G2.fromObject(vk_verifier.vk_delta_2);
        const vk_alpha_1 = curve.G1.fromObject(vk_verifier.vk_alpha_1);
        const vk_beta_2 = curve.G2.fromObject(vk_verifier.vk_beta_2);

        const res = await curve.pairingEq(
            curve.G1.neg(pi_a) , pi_b,
            cpub , vk_gamma_2,
            pi_c , vk_delta_2,

            vk_alpha_1, vk_beta_2
        );

        if (! res) {
            if (logger) logger.error("Invalid proof");
            return false;
        }

        if (logger) logger.info("OK!");
        return true;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const { unstringifyBigInts: unstringifyBigInts$4} = utils;

    function p256$1(n) {
        let nstr = n.toString(16);
        while (nstr.length < 64) nstr = "0"+nstr;
        nstr = `"0x${nstr}"`;
        return nstr;
    }

    async function groth16ExportSolidityCallData(_proof, _pub) {
        const pub = unstringifyBigInts$4(_proof);
        const proof = unstringifyBigInts$4(_pub);

        let inputs = "";
        for (let i=0; i<pub.length; i++) {
            if (inputs != "") inputs = inputs + ",";
            inputs = inputs + p256$1(pub[i]);
        }

        let S;
        S=`[${p256$1(proof.pi_a[0])}, ${p256$1(proof.pi_a[1])}],` +
            `[[${p256$1(proof.pi_b[0][1])}, ${p256$1(proof.pi_b[0][0])}],[${p256$1(proof.pi_b[1][1])}, ${p256$1(proof.pi_b[1][0])}]],` +
            `[${p256$1(proof.pi_c[0])}, ${p256$1(proof.pi_c[1])}],` +
            `[${inputs}]`;

        return S;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    var groth16 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        fullProve: groth16FullProve,
        prove: groth16Prove,
        verify: groth16Verify,
        exportSolidityCallData: groth16ExportSolidityCallData
    });

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    function hashToG2(curve, hash) {
        const hashV = new DataView(hash.buffer, hash.byteOffset, hash.byteLength);
        const seed = [];
        for (let i=0; i<8; i++) {
            seed[i] = hashV.getUint32(i*4);
        }

        const rng = new ChaCha(seed);

        const g2_sp = curve.G2.fromRng(rng);

        return g2_sp;
    }

    function getG2sp(curve, persinalization, challenge, g1s, g1sx) {

        const h = blake2bWasm(64);
        const b1 = new Uint8Array([persinalization]);
        h.update(b1);
        h.update(challenge);
        const b3 = curve.G1.toUncompressed(g1s);
        h.update( b3);
        const b4 = curve.G1.toUncompressed(g1sx);
        h.update( b4);
        const hash =h.digest();

        return hashToG2(curve, hash);
    }

    function calculatePubKey(k, curve, personalization, challengeHash, rng ) {
        k.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));
        k.g1_sx = curve.G1.toAffine(curve.G1.timesFr(k.g1_s, k.prvKey));
        k.g2_sp = curve.G2.toAffine(getG2sp(curve, personalization, challengeHash, k.g1_s, k.g1_sx));
        k.g2_spx = curve.G2.toAffine(curve.G2.timesFr(k.g2_sp, k.prvKey));
        return k;
    }

    function createPTauKey(curve, challengeHash, rng) {
        const key = {
            tau: {},
            alpha: {},
            beta: {}
        };
        key.tau.prvKey = curve.Fr.fromRng(rng);
        key.alpha.prvKey = curve.Fr.fromRng(rng);
        key.beta.prvKey = curve.Fr.fromRng(rng);
        calculatePubKey(key.tau, curve, 0, challengeHash, rng);
        calculatePubKey(key.alpha, curve, 1, challengeHash, rng);
        calculatePubKey(key.beta, curve, 2, challengeHash, rng);
        return key;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function writePTauHeader(fd, curve, power, ceremonyPower) {
        // Write the header
        ///////////

        if (! ceremonyPower) ceremonyPower = power;
        await fd.writeULE32(1); // Header type
        const pHeaderSize = fd.pos;
        await fd.writeULE64(0); // Temporally set to 0 length

        await fd.writeULE32(curve.F1.n64*8);

        const buff = new Uint8Array(curve.F1.n8);
        Scalar.toRprLE(buff, 0, curve.q, curve.F1.n8);
        await fd.write(buff);
        await fd.writeULE32(power);                    // power
        await fd.writeULE32(ceremonyPower);               // power

        const headerSize = fd.pos - pHeaderSize - 8;

        const oldPos = fd.pos;

        await fd.writeULE64(headerSize, pHeaderSize);

        fd.pos = oldPos;
    }

    async function readPTauHeader(fd, sections) {
        if (!sections[1])  throw new Error(fd.fileName + ": File has no  header");
        if (sections[1].length>1) throw new Error(fd.fileName +": File has more than one header");

        fd.pos = sections[1][0].p;
        const n8 = await fd.readULE32();
        const buff = await fd.read(n8);
        const q = Scalar.fromRprLE(buff);

        const curve = await getCurveFromQ(q);

        if (curve.F1.n64*8 != n8) throw new Error(fd.fileName +": Invalid size");

        const power = await fd.readULE32();
        const ceremonyPower = await fd.readULE32();

        if (fd.pos-sections[1][0].p != sections[1][0].size) throw new Error("Invalid PTau header size");

        return {curve, power, ceremonyPower};
    }


    async function readPtauPubKey(fd, curve, montgomery) {

        const buff = await fd.read(curve.F1.n8*2*6 + curve.F2.n8*2*3);

        return fromPtauPubKeyRpr(buff, 0, curve, montgomery);
    }

    function fromPtauPubKeyRpr(buff, pos, curve, montgomery) {

        const key = {
            tau: {},
            alpha: {},
            beta: {}
        };

        key.tau.g1_s = readG1();
        key.tau.g1_sx = readG1();
        key.alpha.g1_s = readG1();
        key.alpha.g1_sx = readG1();
        key.beta.g1_s = readG1();
        key.beta.g1_sx = readG1();
        key.tau.g2_spx = readG2();
        key.alpha.g2_spx = readG2();
        key.beta.g2_spx = readG2();

        return key;

        function readG1() {
            let p;
            if (montgomery) {
                p = curve.G1.fromRprLEM( buff, pos );
            } else {
                p = curve.G1.fromRprUncompressed( buff, pos );
            }
            pos += curve.G1.F.n8*2;
            return p;
        }

        function readG2() {
            let p;
            if (montgomery) {
                p = curve.G2.fromRprLEM( buff, pos );
            } else {
                p = curve.G2.fromRprUncompressed( buff, pos );
            }
            pos += curve.G2.F.n8*2;
            return p;
        }
    }

    function toPtauPubKeyRpr(buff, pos, curve, key, montgomery) {

        writeG1(key.tau.g1_s);
        writeG1(key.tau.g1_sx);
        writeG1(key.alpha.g1_s);
        writeG1(key.alpha.g1_sx);
        writeG1(key.beta.g1_s);
        writeG1(key.beta.g1_sx);
        writeG2(key.tau.g2_spx);
        writeG2(key.alpha.g2_spx);
        writeG2(key.beta.g2_spx);

        async function writeG1(p) {
            if (montgomery) {
                curve.G1.toRprLEM(buff, pos, p);
            } else {
                curve.G1.toRprUncompressed(buff, pos, p);
            }
            pos += curve.F1.n8*2;
        }

        async function writeG2(p) {
            if (montgomery) {
                curve.G2.toRprLEM(buff, pos, p);
            } else {
                curve.G2.toRprUncompressed(buff, pos, p);
            }
            pos += curve.F2.n8*2;
        }

        return buff;
    }

    async function writePtauPubKey(fd, curve, key, montgomery) {
        const buff = new Uint8Array(curve.F1.n8*2*6 + curve.F2.n8*2*3);
        toPtauPubKeyRpr(buff, 0, curve, key, montgomery);
        await fd.write(buff);
    }

    async function readContribution(fd, curve) {
        const c = {};

        c.tauG1 = await readG1();
        c.tauG2 = await readG2();
        c.alphaG1 = await readG1();
        c.betaG1 = await readG1();
        c.betaG2 = await readG2();
        c.key = await readPtauPubKey(fd, curve, true);
        c.partialHash = await fd.read(216);
        c.nextChallenge = await fd.read(64);
        c.type = await fd.readULE32();

        const buffV  = new Uint8Array(curve.G1.F.n8*2*6+curve.G2.F.n8*2*3);
        toPtauPubKeyRpr(buffV, 0, curve, c.key, false);

        const responseHasher = blake2bWasm(64);
        responseHasher.setPartialHash(c.partialHash);
        responseHasher.update(buffV);
        c.responseHash = responseHasher.digest();

        const paramLength = await fd.readULE32();
        const curPos = fd.pos;
        let lastType =0;
        while (fd.pos-curPos < paramLength) {
            const buffType = await readDV(1);
            if (buffType[0]<= lastType) throw new Error("Parameters in the contribution must be sorted");
            lastType = buffType[0];
            if (buffType[0]==1) {     // Name
                const buffLen = await readDV(1);
                const buffStr = await readDV(buffLen[0]);
                c.name = new TextDecoder().decode(buffStr);
            } else if (buffType[0]==2) {
                const buffExp = await readDV(1);
                c.numIterationsExp = buffExp[0];
            } else if (buffType[0]==3) {
                const buffLen = await readDV(1);
                c.beaconHash = await readDV(buffLen[0]);
            } else {
                throw new Error("Parameter not recognized");
            }
        }
        if (fd.pos != curPos + paramLength) {
            throw new Error("Parametes do not match");
        }

        return c;

        async function readG1() {
            const pBuff = await fd.read(curve.G1.F.n8*2);
            return curve.G1.fromRprLEM( pBuff );
        }

        async function readG2() {
            const pBuff = await fd.read(curve.G2.F.n8*2);
            return curve.G2.fromRprLEM( pBuff );
        }

        async function readDV(n) {
            const b = await fd.read(n);
            return new Uint8Array(b);
        }
    }

    async function readContributions(fd, curve, sections) {
        if (!sections[7])  throw new Error(fd.fileName + ": File has no  contributions");
        if (sections[7][0].length>1) throw new Error(fd.fileName +": File has more than one contributions section");

        fd.pos = sections[7][0].p;
        const nContributions = await fd.readULE32();
        const contributions = [];
        for (let i=0; i<nContributions; i++) {
            const c = await readContribution(fd, curve);
            c.id = i+1;
            contributions.push(c);
        }

        if (fd.pos-sections[7][0].p != sections[7][0].size) throw new Error("Invalid contribution section size");

        return contributions;
    }

    async function writeContribution(fd, curve, contribution) {

        const buffG1 = new Uint8Array(curve.F1.n8*2);
        const buffG2 = new Uint8Array(curve.F2.n8*2);
        await writeG1(contribution.tauG1);
        await writeG2(contribution.tauG2);
        await writeG1(contribution.alphaG1);
        await writeG1(contribution.betaG1);
        await writeG2(contribution.betaG2);
        await writePtauPubKey(fd, curve, contribution.key, true);
        await fd.write(contribution.partialHash);
        await fd.write(contribution.nextChallenge);
        await fd.writeULE32(contribution.type || 0);

        const params = [];
        if (contribution.name) {
            params.push(1);      // Param Name
            const nameData = new TextEncoder("utf-8").encode(contribution.name.substring(0,64));
            params.push(nameData.byteLength);
            for (let i=0; i<nameData.byteLength; i++) params.push(nameData[i]);
        }
        if (contribution.type == 1) {
            params.push(2);      // Param numIterationsExp
            params.push(contribution.numIterationsExp);

            params.push(3);      // Beacon Hash
            params.push(contribution.beaconHash.byteLength);
            for (let i=0; i<contribution.beaconHash.byteLength; i++) params.push(contribution.beaconHash[i]);
        }
        if (params.length>0) {
            const paramsBuff = new Uint8Array(params);
            await fd.writeULE32(paramsBuff.byteLength);
            await fd.write(paramsBuff);
        } else {
            await fd.writeULE32(0);
        }


        async function writeG1(p) {
            curve.G1.toRprLEM(buffG1, 0, p);
            await fd.write(buffG1);
        }

        async function writeG2(p) {
            curve.G2.toRprLEM(buffG2, 0, p);
            await fd.write(buffG2);
        }

    }

    async function writeContributions(fd, curve, contributions) {

        await fd.writeULE32(7); // Header type
        const pContributionsSize = fd.pos;
        await fd.writeULE64(0); // Temporally set to 0 length

        await fd.writeULE32(contributions.length);
        for (let i=0; i< contributions.length; i++) {
            await writeContribution(fd, curve, contributions[i]);
        }
        const contributionsSize = fd.pos - pContributionsSize - 8;

        const oldPos = fd.pos;

        await fd.writeULE64(contributionsSize, pContributionsSize);
        fd.pos = oldPos;
    }

    function calculateFirstChallengeHash(curve, power, logger) {
        if (logger) logger.debug("Calculating First Challenge Hash");

        const hasher = new blake2bWasm(64);

        const vG1 = new Uint8Array(curve.G1.F.n8*2);
        const vG2 = new Uint8Array(curve.G2.F.n8*2);
        curve.G1.toRprUncompressed(vG1, 0, curve.G1.g);
        curve.G2.toRprUncompressed(vG2, 0, curve.G2.g);

        hasher.update(blake2bWasm(64).digest());

        let n;

        n=(2 ** power)*2 -1;
        if (logger) logger.debug("Calculate Initial Hash: tauG1");
        hashBlock(vG1, n);
        n= 2 ** power;
        if (logger) logger.debug("Calculate Initial Hash: tauG2");
        hashBlock(vG2, n);
        if (logger) logger.debug("Calculate Initial Hash: alphaTauG1");
        hashBlock(vG1, n);
        if (logger) logger.debug("Calculate Initial Hash: betaTauG1");
        hashBlock(vG1, n);
        hasher.update(vG2);

        return hasher.digest();

        function hashBlock(buff, n) {
            const blockSize = 500000;
            const nBlocks = Math.floor(n / blockSize);
            const rem = n % blockSize;
            const bigBuff = new Uint8Array(blockSize * buff.byteLength);
            for (let i=0; i<blockSize; i++) {
                bigBuff.set(buff, i*buff.byteLength);
            }
            for (let i=0; i<nBlocks; i++) {
                hasher.update(bigBuff);
                if (logger) logger.debug("Initial hash: " +i*blockSize);
            }
            for (let i=0; i<rem; i++) {
                hasher.update(buff);
            }
        }
    }


    function keyFromBeacon(curve, challengeHash, beaconHash, numIterationsExp) {

        const rng = rngFromBeaconParams(beaconHash, numIterationsExp);

        const key = createPTauKey(curve, challengeHash, rng);

        return key;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function newAccumulator(curve, power, fileName, logger) {

        await blake2bWasm.ready();

        const fd = await createBinFile(fileName, "ptau", 1, 7);

        await writePTauHeader(fd, curve, power, 0);

        const buffG1 = curve.G1.oneAffine;
        const buffG2 = curve.G2.oneAffine;

        // Write tauG1
        ///////////
        await startWriteSection(fd, 2);
        const nTauG1 = (2 ** power) * 2 -1;
        for (let i=0; i< nTauG1; i++) {
            await fd.write(buffG1);
            if ((logger)&&((i%100000) == 0)&&i) logger.log("tauG1: " + i);
        }
        await endWriteSection(fd);

        // Write tauG2
        ///////////
        await startWriteSection(fd, 3);
        const nTauG2 = (2 ** power);
        for (let i=0; i< nTauG2; i++) {
            await fd.write(buffG2);
            if ((logger)&&((i%100000) == 0)&&i) logger.log("tauG2: " + i);
        }
        await endWriteSection(fd);

        // Write alphaTauG1
        ///////////
        await startWriteSection(fd, 4);
        const nAlfaTauG1 = (2 ** power);
        for (let i=0; i< nAlfaTauG1; i++) {
            await fd.write(buffG1);
            if ((logger)&&((i%100000) == 0)&&i) logger.log("alphaTauG1: " + i);
        }
        await endWriteSection(fd);

        // Write betaTauG1
        ///////////
        await startWriteSection(fd, 5);
        const nBetaTauG1 = (2 ** power);
        for (let i=0; i< nBetaTauG1; i++) {
            await fd.write(buffG1);
            if ((logger)&&((i%100000) == 0)&&i) logger.log("betaTauG1: " + i);
        }
        await endWriteSection(fd);

        // Write betaG2
        ///////////
        await startWriteSection(fd, 6);
        await fd.write(buffG2);
        await endWriteSection(fd);

        // Contributions
        ///////////
        await startWriteSection(fd, 7);
        await fd.writeULE32(0); // 0 Contributions
        await endWriteSection(fd);

        await fd.close();

        const firstChallengeHash = calculateFirstChallengeHash(curve, power, logger);

        if (logger) logger.debug(formatHash(blake2bWasm(64).digest(), "Blank Contribution Hash:"));

        if (logger) logger.info(formatHash(firstChallengeHash, "First Contribution Hash:"));

        return firstChallengeHash;

    }

    // Format of the outpu

    async function exportChallenge(pTauFilename, challengeFilename, logger) {
        await blake2bWasm.ready();
        const {fd: fdFrom, sections} = await readBinFile(pTauFilename, "ptau", 1);

        const {curve, power} = await readPTauHeader(fdFrom, sections);

        const contributions = await readContributions(fdFrom, curve, sections);
        let lastResponseHash, curChallengeHash;
        if (contributions.length == 0) {
            lastResponseHash = blake2bWasm(64).digest();
            curChallengeHash = calculateFirstChallengeHash(curve, power);
        } else {
            lastResponseHash = contributions[contributions.length-1].responseHash;
            curChallengeHash = contributions[contributions.length-1].nextChallenge;
        }

        if (logger) logger.info(formatHash(lastResponseHash, "Last Response Hash: "));

        if (logger) logger.info(formatHash(curChallengeHash, "New Challenge Hash: "));


        const fdTo = await createOverride(challengeFilename);

        const toHash = blake2bWasm(64);
        await fdTo.write(lastResponseHash);
        toHash.update(lastResponseHash);

        await exportSection(2, "G1", (2 ** power) * 2 -1, "tauG1");
        await exportSection(3, "G2", (2 ** power)       , "tauG2");
        await exportSection(4, "G1", (2 ** power)       , "alphaTauG1");
        await exportSection(5, "G1", (2 ** power)       , "betaTauG1");
        await exportSection(6, "G2", 1                  , "betaG2");

        await fdFrom.close();
        await fdTo.close();

        const calcCurChallengeHash = toHash.digest();

        if (!hashIsEqual (curChallengeHash, calcCurChallengeHash)) {
            if (logger) logger.info(formatHash(calcCurChallengeHash, "Calc Curret Challenge Hash: "));

            if (logger) logger.error("PTau file is corrupted. Calculated new challenge hash does not match with the eclared one");
            throw new Error("PTau file is corrupted. Calculated new challenge hash does not match with the eclared one");
        }

        return curChallengeHash;

        async function exportSection(sectionId, groupName, nPoints, sectionName) {
            const G = curve[groupName];
            const sG = G.F.n8*2;
            const nPointsChunk = Math.floor((1<<24)/sG);

            await startReadUniqueSection(fdFrom, sections, sectionId);
            for (let i=0; i< nPoints; i+= nPointsChunk) {
                if (logger) logger.debug(`Exporting ${sectionName}: ${i}/${nPoints}`);
                const n = Math.min(nPoints-i, nPointsChunk);
                let buff;
                buff = await fdFrom.read(n*sG);
                buff = await G.batchLEMtoU(buff);
                await fdTo.write(buff);
                toHash.update(buff);
            }
            await endReadSection(fdFrom);
        }


    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function importResponse(oldPtauFilename, contributionFilename, newPTauFilename, name, importPoints, logger) {

        await blake2bWasm.ready();

        const noHash = new Uint8Array(64);
        for (let i=0; i<64; i++) noHash[i] = 0xFF;

        const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, "ptau", 1);
        const {curve, power} = await readPTauHeader(fdOld, sections);
        const contributions = await readContributions(fdOld, curve, sections);
        const currentContribution = {};

        if (name) currentContribution.name = name;

        const sG1 = curve.F1.n8*2;
        const scG1 = curve.F1.n8; // Compresed size
        const sG2 = curve.F2.n8*2;
        const scG2 = curve.F2.n8; // Compresed size

        const fdResponse = await readExisting(contributionFilename);

        if  (fdResponse.totalSize !=
            64 +                            // Old Hash
            ((2 ** power)*2-1)*scG1 +
            (2 ** power)*scG2 +
            (2 ** power)*scG1 +
            (2 ** power)*scG1 +
            scG2 +
            sG1*6 + sG2*3)
            throw new Error("Size of the contribution is invalid");

        let lastChallengeHash;

        if (contributions.length>0) {
            lastChallengeHash = contributions[contributions.length-1].nextChallenge;
        } else {
            lastChallengeHash = calculateFirstChallengeHash(curve, power, logger);
        }

        const fdNew = await createBinFile(newPTauFilename, "ptau", 1, importPoints ? 7: 2);
        await writePTauHeader(fdNew, curve, power);

        const contributionPreviousHash = await fdResponse.read(64);

        if (hashIsEqual(noHash,lastChallengeHash)) {
            lastChallengeHash = contributionPreviousHash;
            contributions[contributions.length-1].nextChallenge = lastChallengeHash;
        }

        if(!hashIsEqual(contributionPreviousHash,lastChallengeHash))
            throw new Error("Wrong contribution. this contribution is not based on the previus hash");

        const hasherResponse = new blake2bWasm(64);
        hasherResponse.update(contributionPreviousHash);

        const startSections = [];
        let res;
        res = await processSection(fdResponse, fdNew, "G1", 2, (2 ** power) * 2 -1, [1], "tauG1");
        currentContribution.tauG1 = res[0];
        res = await processSection(fdResponse, fdNew, "G2", 3, (2 ** power)       , [1], "tauG2");
        currentContribution.tauG2 = res[0];
        res = await processSection(fdResponse, fdNew, "G1", 4, (2 ** power)       , [0], "alphaG1");
        currentContribution.alphaG1 = res[0];
        res = await processSection(fdResponse, fdNew, "G1", 5, (2 ** power)       , [0], "betaG1");
        currentContribution.betaG1 = res[0];
        res = await processSection(fdResponse, fdNew, "G2", 6, 1                  , [0], "betaG2");
        currentContribution.betaG2 = res[0];

        currentContribution.partialHash = hasherResponse.getPartialHash();


        const buffKey = await fdResponse.read(curve.F1.n8*2*6+curve.F2.n8*2*3);

        currentContribution.key = fromPtauPubKeyRpr(buffKey, 0, curve, false);

        hasherResponse.update(new Uint8Array(buffKey));
        const hashResponse = hasherResponse.digest();

        if (logger) logger.info(formatHash(hashResponse, "Contribution Response Hash imported: "));

        if (importPoints) {
            const nextChallengeHasher = new blake2bWasm(64);
            nextChallengeHasher.update(hashResponse);

            await hashSection(nextChallengeHasher, fdNew, "G1", 2, (2 ** power) * 2 -1, "tauG1", logger);
            await hashSection(nextChallengeHasher, fdNew, "G2", 3, (2 ** power)       , "tauG2", logger);
            await hashSection(nextChallengeHasher, fdNew, "G1", 4, (2 ** power)       , "alphaTauG1", logger);
            await hashSection(nextChallengeHasher, fdNew, "G1", 5, (2 ** power)       , "betaTauG1", logger);
            await hashSection(nextChallengeHasher, fdNew, "G2", 6, 1                  , "betaG2", logger);

            currentContribution.nextChallenge = nextChallengeHasher.digest();

            if (logger) logger.info(formatHash(currentContribution.nextChallenge, "Next Challenge Hash: "));
        } else {
            currentContribution.nextChallenge = noHash;
        }

        contributions.push(currentContribution);

        await writeContributions(fdNew, curve, contributions);

        await fdResponse.close();
        await fdNew.close();
        await fdOld.close();

        return currentContribution.nextChallenge;

        async function processSection(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName) {
            if (importPoints) {
                return await processSectionImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName);
            } else {
                return await processSectionNoImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName);
            }
        }

        async function processSectionImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName) {

            const G = curve[groupName];
            const scG = G.F.n8;
            const sG = G.F.n8*2;

            const singularPoints = [];

            await startWriteSection(fdTo, sectionId);
            const nPointsChunk = Math.floor((1<<24)/sG);

            startSections[sectionId] = fdTo.pos;

            for (let i=0; i< nPoints; i += nPointsChunk) {
                if (logger) logger.debug(`Importing ${sectionName}: ${i}/${nPoints}`);
                const n = Math.min(nPoints-i, nPointsChunk);

                const buffC = await fdFrom.read(n * scG);
                hasherResponse.update(buffC);

                const buffLEM = await G.batchCtoLEM(buffC);

                await fdTo.write(buffLEM);
                for (let j=0; j<singularPointIndexes.length; j++) {
                    const sp = singularPointIndexes[j];
                    if ((sp >=i) && (sp < i+n)) {
                        const P = G.fromRprLEM(buffLEM, (sp-i)*sG);
                        singularPoints.push(P);
                    }
                }
            }

            await endWriteSection(fdTo);

            return singularPoints;
        }


        async function processSectionNoImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName) {

            const G = curve[groupName];
            const scG = G.F.n8;

            const singularPoints = [];

            const nPointsChunk = Math.floor((1<<24)/scG);

            for (let i=0; i< nPoints; i += nPointsChunk) {
                if (logger) logger.debug(`Importing ${sectionName}: ${i}/${nPoints}`);
                const n = Math.min(nPoints-i, nPointsChunk);

                const buffC = await fdFrom.read(n * scG);
                hasherResponse.update(buffC);

                for (let j=0; j<singularPointIndexes.length; j++) {
                    const sp = singularPointIndexes[j];
                    if ((sp >=i) && (sp < i+n)) {
                        const P = G.fromRprCompressed(buffC, (sp-i)*scG);
                        singularPoints.push(P);
                    }
                }
            }

            return singularPoints;
        }


        async function hashSection(nextChallengeHasher, fdTo, groupName, sectionId, nPoints, sectionName, logger) {

            const G = curve[groupName];
            const sG = G.F.n8*2;
            const nPointsChunk = Math.floor((1<<24)/sG);

            const oldPos = fdTo.pos;
            fdTo.pos = startSections[sectionId];

            for (let i=0; i< nPoints; i += nPointsChunk) {
                if (logger) logger.debug(`Hashing ${sectionName}: ${i}/${nPoints}`);
                const n = Math.min(nPoints-i, nPointsChunk);

                const buffLEM = await fdTo.read(n * sG);

                const buffU = await G.batchLEMtoU(buffLEM);

                nextChallengeHasher.update(buffU);
            }

            fdTo.pos = oldPos;
        }

    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const sameRatio$1 = sameRatio$2;

    async function verifyContribution(curve, cur, prev, logger) {
        let sr;
        if (cur.type == 1) {    // Verify the beacon.
            const beaconKey = keyFromBeacon(curve, prev.nextChallenge, cur.beaconHash, cur.numIterationsExp);

            if (!curve.G1.eq(cur.key.tau.g1_s, beaconKey.tau.g1_s)) {
                if (logger) logger.error(`BEACON key (tauG1_s) is not generated correctly in challenge #${cur.id}  ${cur.name || ""}` );
                return false;
            }
            if (!curve.G1.eq(cur.key.tau.g1_sx, beaconKey.tau.g1_sx)) {
                if (logger) logger.error(`BEACON key (tauG1_sx) is not generated correctly in challenge #${cur.id}  ${cur.name || ""}` );
                return false;
            }
            if (!curve.G2.eq(cur.key.tau.g2_spx, beaconKey.tau.g2_spx)) {
                if (logger) logger.error(`BEACON key (tauG2_spx) is not generated correctly in challenge #${cur.id}  ${cur.name || ""}` );
                return false;
            }

            if (!curve.G1.eq(cur.key.alpha.g1_s, beaconKey.alpha.g1_s)) {
                if (logger) logger.error(`BEACON key (alphaG1_s) is not generated correctly in challenge #${cur.id}  ${cur.name || ""}` );
                return false;
            }
            if (!curve.G1.eq(cur.key.alpha.g1_sx, beaconKey.alpha.g1_sx)) {
                if (logger) logger.error(`BEACON key (alphaG1_sx) is not generated correctly in challenge #${cur.id}  ${cur.name || ""}` );
                return false;
            }
            if (!curve.G2.eq(cur.key.alpha.g2_spx, beaconKey.alpha.g2_spx)) {
                if (logger) logger.error(`BEACON key (alphaG2_spx) is not generated correctly in challenge #${cur.id}  ${cur.name || ""}` );
                return false;
            }

            if (!curve.G1.eq(cur.key.beta.g1_s, beaconKey.beta.g1_s)) {
                if (logger) logger.error(`BEACON key (betaG1_s) is not generated correctly in challenge #${cur.id}  ${cur.name || ""}` );
                return false;
            }
            if (!curve.G1.eq(cur.key.beta.g1_sx, beaconKey.beta.g1_sx)) {
                if (logger) logger.error(`BEACON key (betaG1_sx) is not generated correctly in challenge #${cur.id}  ${cur.name || ""}` );
                return false;
            }
            if (!curve.G2.eq(cur.key.beta.g2_spx, beaconKey.beta.g2_spx)) {
                if (logger) logger.error(`BEACON key (betaG2_spx) is not generated correctly in challenge #${cur.id}  ${cur.name || ""}` );
                return false;
            }
        }

        cur.key.tau.g2_sp = curve.G2.toAffine(getG2sp(curve, 0, prev.nextChallenge, cur.key.tau.g1_s, cur.key.tau.g1_sx));
        cur.key.alpha.g2_sp = curve.G2.toAffine(getG2sp(curve, 1, prev.nextChallenge, cur.key.alpha.g1_s, cur.key.alpha.g1_sx));
        cur.key.beta.g2_sp = curve.G2.toAffine(getG2sp(curve, 2, prev.nextChallenge, cur.key.beta.g1_s, cur.key.beta.g1_sx));

        sr = await sameRatio$1(curve, cur.key.tau.g1_s, cur.key.tau.g1_sx, cur.key.tau.g2_sp, cur.key.tau.g2_spx);
        if (sr !== true) {
            if (logger) logger.error("INVALID key (tau) in challenge #"+cur.id);
            return false;
        }

        sr = await sameRatio$1(curve, cur.key.alpha.g1_s, cur.key.alpha.g1_sx, cur.key.alpha.g2_sp, cur.key.alpha.g2_spx);
        if (sr !== true) {
            if (logger) logger.error("INVALID key (alpha) in challenge #"+cur.id);
            return false;
        }

        sr = await sameRatio$1(curve, cur.key.beta.g1_s, cur.key.beta.g1_sx, cur.key.beta.g2_sp, cur.key.beta.g2_spx);
        if (sr !== true) {
            if (logger) logger.error("INVALID key (beta) in challenge #"+cur.id);
            return false;
        }

        sr = await sameRatio$1(curve, prev.tauG1, cur.tauG1, cur.key.tau.g2_sp, cur.key.tau.g2_spx);
        if (sr !== true) {
            if (logger) logger.error("INVALID tau*G1. challenge #"+cur.id+" It does not follow the previous contribution");
            return false;
        }

        sr = await sameRatio$1(curve,  cur.key.tau.g1_s, cur.key.tau.g1_sx, prev.tauG2, cur.tauG2);
        if (sr !== true) {
            if (logger) logger.error("INVALID tau*G2. challenge #"+cur.id+" It does not follow the previous contribution");
            return false;
        }

        sr = await sameRatio$1(curve, prev.alphaG1, cur.alphaG1, cur.key.alpha.g2_sp, cur.key.alpha.g2_spx);
        if (sr !== true) {
            if (logger) logger.error("INVALID alpha*G1. challenge #"+cur.id+" It does not follow the previous contribution");
            return false;
        }

        sr = await sameRatio$1(curve, prev.betaG1, cur.betaG1, cur.key.beta.g2_sp, cur.key.beta.g2_spx);
        if (sr !== true) {
            if (logger) logger.error("INVALID beta*G1. challenge #"+cur.id+" It does not follow the previous contribution");
            return false;
        }

        sr = await sameRatio$1(curve,  cur.key.beta.g1_s, cur.key.beta.g1_sx, prev.betaG2, cur.betaG2);
        if (sr !== true) {
            if (logger) logger.error("INVALID beta*G2. challenge #"+cur.id+"It does not follow the previous contribution");
            return false;
        }

        if (logger) logger.info("Powers Of tau file OK!");
        return true;
    }

    async function verify(tauFilename, logger) {
        let sr;
        await blake2bWasm.ready();

        const {fd, sections} = await readBinFile(tauFilename, "ptau", 1);
        const {curve, power, ceremonyPower} = await readPTauHeader(fd, sections);
        const contrs = await readContributions(fd, curve, sections);

        if (logger) logger.debug("power: 2**" + power);
        // Verify Last contribution

        if (logger) logger.debug("Computing initial contribution hash");
        const initialContribution = {
            tauG1: curve.G1.g,
            tauG2: curve.G2.g,
            alphaG1: curve.G1.g,
            betaG1: curve.G1.g,
            betaG2: curve.G2.g,
            nextChallenge: calculateFirstChallengeHash(curve, ceremonyPower, logger),
            responseHash: blake2bWasm(64).digest()
        };

        if (contrs.length == 0) {
            if (logger) logger.error("This file has no contribution! It cannot be used in production");
            return false;
        }

        let prevContr;
        if (contrs.length>1) {
            prevContr = contrs[contrs.length-2];
        } else {
            prevContr = initialContribution;
        }
        const curContr = contrs[contrs.length-1];
        if (logger) logger.debug("Validating contribution #"+contrs[contrs.length-1].id);
        const res = await verifyContribution(curve, curContr, prevContr, logger);
        if (!res) return false;


        const nextContributionHasher = blake2bWasm(64);
        nextContributionHasher.update(curContr.responseHash);

        // Verify powers and compute nextChallengeHash

        // await test();

        // Verify Section tau*G1
        if (logger) logger.debug("Verifying powers in tau*G1 section");
        const rTau1 = await processSection(2, "G1", "tauG1", (2 ** power)*2-1, [0, 1], logger);
        sr = await sameRatio$1(curve, rTau1.R1, rTau1.R2, curve.G2.g, curContr.tauG2);
        if (sr !== true) {
            if (logger) logger.error("tauG1 section. Powers do not match");
            return false;
        }
        if (!curve.G1.eq(curve.G1.g, rTau1.singularPoints[0])) {
            if (logger) logger.error("First element of tau*G1 section must be the generator");
            return false;
        }
        if (!curve.G1.eq(curContr.tauG1, rTau1.singularPoints[1])) {
            if (logger) logger.error("Second element of tau*G1 section does not match the one in the contribution section");
            return false;
        }

        // await test();

        // Verify Section tau*G2
        if (logger) logger.debug("Verifying powers in tau*G2 section");
        const rTau2 = await processSection(3, "G2", "tauG2", 2 ** power, [0, 1],  logger);
        sr = await sameRatio$1(curve, curve.G1.g, curContr.tauG1, rTau2.R1, rTau2.R2);
        if (sr !== true) {
            if (logger) logger.error("tauG2 section. Powers do not match");
            return false;
        }
        if (!curve.G2.eq(curve.G2.g, rTau2.singularPoints[0])) {
            if (logger) logger.error("First element of tau*G2 section must be the generator");
            return false;
        }
        if (!curve.G2.eq(curContr.tauG2, rTau2.singularPoints[1])) {
            if (logger) logger.error("Second element of tau*G2 section does not match the one in the contribution section");
            return false;
        }

        // Verify Section alpha*tau*G1
        if (logger) logger.debug("Verifying powers in alpha*tau*G1 section");
        const rAlphaTauG1 = await processSection(4, "G1", "alphatauG1", 2 ** power, [0], logger);
        sr = await sameRatio$1(curve, rAlphaTauG1.R1, rAlphaTauG1.R2, curve.G2.g, curContr.tauG2);
        if (sr !== true) {
            if (logger) logger.error("alphaTauG1 section. Powers do not match");
            return false;
        }
        if (!curve.G1.eq(curContr.alphaG1, rAlphaTauG1.singularPoints[0])) {
            if (logger) logger.error("First element of alpha*tau*G1 section (alpha*G1) does not match the one in the contribution section");
            return false;
        }

        // Verify Section beta*tau*G1
        if (logger) logger.debug("Verifying powers in beta*tau*G1 section");
        const rBetaTauG1 = await processSection(5, "G1", "betatauG1", 2 ** power, [0], logger);
        sr = await sameRatio$1(curve, rBetaTauG1.R1, rBetaTauG1.R2, curve.G2.g, curContr.tauG2);
        if (sr !== true) {
            if (logger) logger.error("betaTauG1 section. Powers do not match");
            return false;
        }
        if (!curve.G1.eq(curContr.betaG1, rBetaTauG1.singularPoints[0])) {
            if (logger) logger.error("First element of beta*tau*G1 section (beta*G1) does not match the one in the contribution section");
            return false;
        }

        //Verify Beta G2
        const betaG2 = await processSectionBetaG2(logger);
        if (!curve.G2.eq(curContr.betaG2, betaG2)) {
            if (logger) logger.error("betaG2 element in betaG2 section does not match the one in the contribution section");
            return false;
        }


        const nextContributionHash = nextContributionHasher.digest();

        // Check the nextChallengeHash
        if (power == ceremonyPower) {
            if (!hashIsEqual(nextContributionHash,curContr.nextChallenge)) {
                if (logger) logger.error("Hash of the values does not match the next challenge of the last contributor in the contributions section");
                return false;
            }
        }

        if (logger) logger.info(formatHash(nextContributionHash, "Next challenge hash: "));

        // Verify Previous contributions

        printContribution(curContr, prevContr);
        for (let i = contrs.length-2; i>=0; i--) {
            const curContr = contrs[i];
            const prevContr =  (i>0) ? contrs[i-1] : initialContribution;
            const res = await verifyContribution(curve, curContr, prevContr, logger);
            if (!res) return false;
            printContribution(curContr, prevContr);
        }
        if (logger) logger.info("-----------------------------------------------------");

        if ((!sections[12]) || (!sections[13]) || (!sections[14]) || (!sections[15])) {
            if (logger) logger.warn(
                "this file does not contain phase2 precalculated values. Please run: \n" +
                "   snarkjs \"powersoftau preparephase2\" to prepare this file to be used in the phase2 ceremony."
            );
        } else {
            let res;
            res = await verifyLagrangeEvaluations("G1", 2, 12, "tauG1", logger);
            if (!res) return false;
            res = await verifyLagrangeEvaluations("G2", 3, 13, "tauG2", logger);
            if (!res) return false;
            res = await verifyLagrangeEvaluations("G1", 4, 14, "alphaTauG1", logger);
            if (!res) return false;
            res = await verifyLagrangeEvaluations("G1", 5, 15, "betaTauG1", logger);
            if (!res) return false;
        }

        await fd.close();

        if (logger) logger.info("Powers of Tau Ok!");

        return true;

        function printContribution(curContr, prevContr) {
            if (!logger) return;
            logger.info("-----------------------------------------------------");
            logger.info(`Contribution #${curContr.id}: ${curContr.name ||""}`);

            logger.info(formatHash(curContr.nextChallenge, "Next Challenge: "));

            const buffV  = new Uint8Array(curve.G1.F.n8*2*6+curve.G2.F.n8*2*3);
            toPtauPubKeyRpr(buffV, 0, curve, curContr.key, false);

            const responseHasher = blake2bWasm(64);
            responseHasher.setPartialHash(curContr.partialHash);
            responseHasher.update(buffV);
            const responseHash = responseHasher.digest();

            logger.info(formatHash(responseHash, "Response Hash:"));

            logger.info(formatHash(prevContr.nextChallenge, "Response Hash:"));

            if (curContr.type == 1) {
                logger.info(`Beacon generator: ${byteArray2hex(curContr.beaconHash)}`);
                logger.info(`Beacon iterations Exp: ${curContr.numIterationsExp}`);
            }

        }

        async function processSectionBetaG2(logger) {
            const G = curve.G2;
            const sG = G.F.n8*2;
            const buffUv = new Uint8Array(sG);

            if (!sections[6])  {
                logger.error("File has no BetaG2 section");
                throw new Error("File has no BetaG2 section");
            }
            if (sections[6].length>1) {
                logger.error("File has no BetaG2 section");
                throw new Error("File has more than one GetaG2 section");
            }
            fd.pos = sections[6][0].p;

            const buff = await fd.read(sG);
            const P = G.fromRprLEM(buff);

            G.toRprUncompressed(buffUv, 0, P);
            nextContributionHasher.update(buffUv);

            return P;
        }

        async function processSection(idSection, groupName, sectionName, nPoints, singularPointIndexes, logger) {
            const MAX_CHUNK_SIZE = 1<<16;
            const G = curve[groupName];
            const sG = G.F.n8*2;
            await startReadUniqueSection(fd, sections, idSection);

            const singularPoints = [];

            let R1 = G.zero;
            let R2 = G.zero;

            let lastBase = G.zero;

            for (let i=0; i<nPoints; i += MAX_CHUNK_SIZE) {
                if (logger) logger.debug(`points relations: ${sectionName}: ${i}/${nPoints} `);
                const n = Math.min(nPoints - i, MAX_CHUNK_SIZE);
                const bases = await fd.read(n*sG);

                const basesU = await G.batchLEMtoU(bases);
                nextContributionHasher.update(basesU);

                const scalars = new Uint8Array(4*(n-1));
                crypto.randomFillSync(scalars);


                if (i>0) {
                    const firstBase = G.fromRprLEM(bases, 0);
                    const r = crypto.randomBytes(4).readUInt32BE(0, true);

                    R1 = G.add(R1, G.timesScalar(lastBase, r));
                    R2 = G.add(R2, G.timesScalar(firstBase, r));
                }

                const r1 = await G.multiExpAffine(bases.slice(0, (n-1)*sG), scalars);
                const r2 = await G.multiExpAffine(bases.slice(sG), scalars);

                R1 = G.add(R1, r1);
                R2 = G.add(R2, r2);

                lastBase = G.fromRprLEM( bases, (n-1)*sG);

                for (let j=0; j<singularPointIndexes.length; j++) {
                    const sp = singularPointIndexes[j];
                    if ((sp >=i) && (sp < i+n)) {
                        const P = G.fromRprLEM(bases, (sp-i)*sG);
                        singularPoints.push(P);
                    }
                }

            }
            await endReadSection(fd);

            return {
                R1: R1,
                R2: R2,
                singularPoints: singularPoints
            };

        }

        async function verifyLagrangeEvaluations(gName, tauSection, lagrangeSection, sectionName, logger) {

            if (logger) logger.debug(`Verifying phase2 calculated values ${sectionName}...`);
            const G = curve[gName];
            const sG = G.F.n8*2;

            const seed= new Array(8);
            for (let i=0; i<8; i++) {
                seed[i] = crypto.randomBytes(4).readUInt32BE(0, true);
            }

            for (let p=0; p<= power; p ++) {
                const res = await verifyPower(p);
                if (!res) return false;
            }

            if (tauSection == 2) {
                const res = await verifyPower(power+1);
                if (!res) return false;
            }

            return true;

            async function verifyPower(p) {
                if (logger) logger.debug(`Power ${p}...`);
                const n8r = curve.Fr.n8;
                const nPoints = 2 ** p;
                let buff_r = new Uint32Array(nPoints);
                let buffG;

                let rng = new ChaCha(seed);

                if (logger) logger.debug(`Creating random numbers Powers${p}...`);
                for (let i=0; i<nPoints; i++) {
                    if ((p == power+1)&&(i == nPoints-1)) {
                        buff_r[i] = 0;
                    } else {
                        buff_r[i] = rng.nextU32();
                    }
                }

                buff_r = new Uint8Array(buff_r.buffer, buff_r.byteOffset, buff_r.byteLength);

                if (logger) logger.debug(`reading points Powers${p}...`);
                await startReadUniqueSection(fd, sections, tauSection);
                buffG = new BigBuffer(nPoints*sG);
                if (p == power+1) {
                    await fd.readToBuffer(buffG, 0, (nPoints-1)*sG);
                    buffG.set(curve.G1.zeroAffine, (nPoints-1)*sG);
                } else {
                    await fd.readToBuffer(buffG, 0, nPoints*sG);
                }
                await endReadSection(fd, true);

                const resTau = await G.multiExpAffine(buffG, buff_r, logger, sectionName + "_" + p);

                buff_r = new BigBuffer(nPoints * n8r);

                rng = new ChaCha(seed);

                const buff4 = new Uint8Array(4);
                const buff4V = new DataView(buff4.buffer);

                if (logger) logger.debug(`Creating random numbers Powers${p}...`);
                for (let i=0; i<nPoints; i++) {
                    if ((i != nPoints-1) || (p != power+1)) {
                        buff4V.setUint32(0, rng.nextU32(), true);
                        buff_r.set(buff4, i*n8r);
                    }
                }

                if (logger) logger.debug(`batchToMontgomery ${p}...`);
                buff_r = await curve.Fr.batchToMontgomery(buff_r);
                if (logger) logger.debug(`fft ${p}...`);
                buff_r = await curve.Fr.fft(buff_r);
                if (logger) logger.debug(`batchFromMontgomery ${p}...`);
                buff_r = await curve.Fr.batchFromMontgomery(buff_r);

                if (logger) logger.debug(`reading points Lagrange${p}...`);
                await startReadUniqueSection(fd, sections, lagrangeSection);
                fd.pos += sG*((2 ** p)-1);
                await fd.readToBuffer(buffG, 0, nPoints*sG);
                await endReadSection(fd, true);

                const resLagrange = await G.multiExpAffine(buffG, buff_r, logger, sectionName + "_" + p + "_transformed");

                if (!G.eq(resTau, resLagrange)) {
                    if (logger) logger.error("Phase2 caclutation does not match with powers of tau");
                    return false;
                }

                return true;
            }
        }
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    /*
        This function creates a new section in the fdTo file with id idSection.
        It multiplies the pooints in fdFrom by first, first*inc, first*inc^2, ....
        nPoint Times.
        It also updates the newChallengeHasher with the new points
    */

    async function applyKeyToSection(fdOld, sections, fdNew, idSection, curve, groupName, first, inc, sectionName, logger) {
        const MAX_CHUNK_SIZE = 1 << 16;
        const G = curve[groupName];
        const sG = G.F.n8*2;
        const nPoints = sections[idSection][0].size / sG;

        await startReadUniqueSection(fdOld, sections,idSection );
        await startWriteSection(fdNew, idSection);

        let t = first;
        for (let i=0; i<nPoints; i += MAX_CHUNK_SIZE) {
            if (logger) logger.debug(`Applying key: ${sectionName}: ${i}/${nPoints}`);
            const n= Math.min(nPoints - i, MAX_CHUNK_SIZE);
            let buff;
            buff = await fdOld.read(n*sG);
            buff = await G.batchApplyKey(buff, t, inc);
            await fdNew.write(buff);
            t = curve.Fr.mul(t, curve.Fr.exp(inc, n));
        }

        await endWriteSection(fdNew);
        await endReadSection(fdOld);
    }



    async function applyKeyToChallengeSection(fdOld, fdNew, responseHasher, curve, groupName, nPoints, first, inc, formatOut, sectionName, logger) {
        const G = curve[groupName];
        const sG = G.F.n8*2;
        const chunkSize = Math.floor((1<<20) / sG);   // 128Mb chunks
        let t = first;
        for (let i=0 ; i<nPoints ; i+= chunkSize) {
            if (logger) logger.debug(`Applying key ${sectionName}: ${i}/${nPoints}`);
            const n= Math.min(nPoints-i, chunkSize );
            const buffInU = await fdOld.read(n * sG);
            const buffInLEM = await G.batchUtoLEM(buffInU);
            const buffOutLEM = await G.batchApplyKey(buffInLEM, t, inc);
            let buffOut;
            if (formatOut == "COMPRESSED") {
                buffOut = await G.batchLEMtoC(buffOutLEM);
            } else {
                buffOut = await G.batchLEMtoU(buffOutLEM);
            }

            if (responseHasher) responseHasher.update(buffOut);
            await fdNew.write(buffOut);
            t = curve.Fr.mul(t, curve.Fr.exp(inc, n));
        }
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function challengeContribute(curve, challengeFilename, responesFileName, entropy, logger) {
        await blake2bWasm.ready();

        const fdFrom = await readExisting(challengeFilename);


        const sG1 = curve.F1.n64*8*2;
        const sG2 = curve.F2.n64*8*2;
        const domainSize = (fdFrom.totalSize + sG1 - 64 - sG2) / (4*sG1 + sG2);
        let e = domainSize;
        let power = 0;
        while (e>1) {
            e = e /2;
            power += 1;
        }

        if (2 ** power != domainSize) throw new Error("Invalid file size");
        if (logger) logger.debug("Power to tau size: "+power);

        const rng = await getRandomRng(entropy);

        const fdTo = await createOverride(responesFileName);

        // Calculate the hash
        const challengeHasher = blake2bWasm(64);
        for (let i=0; i<fdFrom.totalSize; i+= fdFrom.pageSize) {
            if (logger) logger.debug(`Hashing challenge ${i}/${fdFrom.totalSize}`);
            const s = Math.min(fdFrom.totalSize - i, fdFrom.pageSize);
            const buff = await fdFrom.read(s);
            challengeHasher.update(buff);
        }

        const claimedHash = await fdFrom.read(64, 0);
        if (logger) logger.info(formatHash(claimedHash, "Claimed Previous Response Hash: "));

        const challengeHash = challengeHasher.digest();
        if (logger) logger.info(formatHash(challengeHash, "Current Challenge Hash: "));

        const key = createPTauKey(curve, challengeHash, rng);

        if (logger) {
            ["tau", "alpha", "beta"].forEach( (k) => {
                logger.debug(k + ".g1_s: " + curve.G1.toString(key[k].g1_s, 16));
                logger.debug(k + ".g1_sx: " + curve.G1.toString(key[k].g1_sx, 16));
                logger.debug(k + ".g2_sp: " + curve.G2.toString(key[k].g2_sp, 16));
                logger.debug(k + ".g2_spx: " + curve.G2.toString(key[k].g2_spx, 16));
                logger.debug("");
            });
        }

        const responseHasher = blake2bWasm(64);

        await fdTo.write(challengeHash);
        responseHasher.update(challengeHash);

        await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, "G1", (2 ** power)*2-1, curve.Fr.one    , key.tau.prvKey, "COMPRESSED", "tauG1"     , logger );
        await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, "G2", (2 ** power)    , curve.Fr.one    , key.tau.prvKey, "COMPRESSED", "tauG2"     , logger );
        await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, "G1", (2 ** power)    , key.alpha.prvKey, key.tau.prvKey, "COMPRESSED", "alphaTauG1", logger );
        await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, "G1", (2 ** power)    , key.beta.prvKey , key.tau.prvKey, "COMPRESSED", "betaTauG1" , logger );
        await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, "G2", 1             , key.beta.prvKey , key.tau.prvKey, "COMPRESSED", "betaTauG2" , logger );

        // Write and hash key
        const buffKey = new Uint8Array(curve.F1.n8*2*6+curve.F2.n8*2*3);
        toPtauPubKeyRpr(buffKey, 0, curve, key, false);
        await fdTo.write(buffKey);
        responseHasher.update(buffKey);
        const responseHash = responseHasher.digest();
        if (logger) logger.info(formatHash(responseHash, "Contribution Response Hash: "));

        await fdTo.close();
        await fdFrom.close();
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function beacon$1(oldPtauFilename, newPTauFilename, name,  beaconHashStr,numIterationsExp, logger) {
        const beaconHash = hex2ByteArray(beaconHashStr);
        if (   (beaconHash.byteLength == 0)
            || (beaconHash.byteLength*2 !=beaconHashStr.length))
        {
            if (logger) logger.error("Invalid Beacon Hash. (It must be a valid hexadecimal sequence)");
            return false;
        }
        if (beaconHash.length>=256) {
            if (logger) logger.error("Maximum lenght of beacon hash is 255 bytes");
            return false;
        }

        numIterationsExp = parseInt(numIterationsExp);
        if ((numIterationsExp<10)||(numIterationsExp>63)) {
            if (logger) logger.error("Invalid numIterationsExp. (Must be between 10 and 63)");
            return false;
        }


        await blake2bWasm.ready();

        const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, "ptau", 1);
        const {curve, power, ceremonyPower} = await readPTauHeader(fdOld, sections);
        if (power != ceremonyPower) {
            if (logger) logger.error("This file has been reduced. You cannot contribute into a reduced file.");
            return false;
        }
        if (sections[12]) {
            if (logger) logger.warn("Contributing into a file that has phase2 calculated. You will have to prepare phase2 again.");
        }
        const contributions = await readContributions(fdOld, curve, sections);
        const curContribution = {
            name: name,
            type: 1, // Beacon
            numIterationsExp: numIterationsExp,
            beaconHash: beaconHash
        };

        let lastChallengeHash;

        if (contributions.length>0) {
            lastChallengeHash = contributions[contributions.length-1].nextChallenge;
        } else {
            lastChallengeHash = calculateFirstChallengeHash(curve, power, logger);
        }

        curContribution.key = keyFromBeacon(curve, lastChallengeHash, beaconHash, numIterationsExp);

        const responseHasher = new blake2bWasm(64);
        responseHasher.update(lastChallengeHash);

        const fdNew = await createBinFile(newPTauFilename, "ptau", 1, 7);
        await writePTauHeader(fdNew, curve, power);

        const startSections = [];

        let firstPoints;
        firstPoints = await processSection(2, "G1",  (2 ** power) * 2 -1, curve.Fr.e(1), curContribution.key.tau.prvKey, "tauG1", logger );
        curContribution.tauG1 = firstPoints[1];
        firstPoints = await processSection(3, "G2",  (2 ** power) , curve.Fr.e(1), curContribution.key.tau.prvKey, "tauG2", logger );
        curContribution.tauG2 = firstPoints[1];
        firstPoints = await processSection(4, "G1",  (2 ** power) , curContribution.key.alpha.prvKey, curContribution.key.tau.prvKey, "alphaTauG1", logger );
        curContribution.alphaG1 = firstPoints[0];
        firstPoints = await processSection(5, "G1",  (2 ** power) , curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, "betaTauG1", logger );
        curContribution.betaG1 = firstPoints[0];
        firstPoints = await processSection(6, "G2",  1, curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, "betaTauG2", logger );
        curContribution.betaG2 = firstPoints[0];

        curContribution.partialHash = responseHasher.getPartialHash();

        const buffKey = new Uint8Array(curve.F1.n8*2*6+curve.F2.n8*2*3);

        toPtauPubKeyRpr(buffKey, 0, curve, curContribution.key, false);

        responseHasher.update(new Uint8Array(buffKey));
        const hashResponse = responseHasher.digest();

        if (logger) logger.info(formatHash(hashResponse, "Contribution Response Hash imported: "));

        const nextChallengeHasher = new blake2bWasm(64);
        nextChallengeHasher.update(hashResponse);

        await hashSection(fdNew, "G1", 2, (2 ** power) * 2 -1, "tauG1", logger);
        await hashSection(fdNew, "G2", 3, (2 ** power)       , "tauG2", logger);
        await hashSection(fdNew, "G1", 4, (2 ** power)       , "alphaTauG1", logger);
        await hashSection(fdNew, "G1", 5, (2 ** power)       , "betaTauG1", logger);
        await hashSection(fdNew, "G2", 6, 1                  , "betaG2", logger);

        curContribution.nextChallenge = nextChallengeHasher.digest();

        if (logger) logger.info(formatHash(curContribution.nextChallenge, "Next Challenge Hash: "));

        contributions.push(curContribution);

        await writeContributions(fdNew, curve, contributions);

        await fdOld.close();
        await fdNew.close();

        return hashResponse;

        async function processSection(sectionId, groupName, NPoints, first, inc, sectionName, logger) {
            const res = [];
            fdOld.pos = sections[sectionId][0].p;

            await startWriteSection(fdNew, sectionId);

            startSections[sectionId] = fdNew.pos;

            const G = curve[groupName];
            const sG = G.F.n8*2;
            const chunkSize = Math.floor((1<<20) / sG);   // 128Mb chunks
            let t = first;
            for (let i=0 ; i<NPoints ; i+= chunkSize) {
                if (logger) logger.debug(`applying key${sectionName}: ${i}/${NPoints}`);
                const n= Math.min(NPoints-i, chunkSize );
                const buffIn = await fdOld.read(n * sG);
                const buffOutLEM = await G.batchApplyKey(buffIn, t, inc);

                /* Code to test the case where we don't have the 2^m-2 component
                if (sectionName== "tauG1") {
                    const bz = new Uint8Array(64);
                    buffOutLEM.set(bz, 64*((2 ** power) - 1 ));
                }
                */

                const promiseWrite = fdNew.write(buffOutLEM);
                const buffOutC = await G.batchLEMtoC(buffOutLEM);

                responseHasher.update(buffOutC);
                await promiseWrite;
                if (i==0)   // Return the 2 first points.
                    for (let j=0; j<Math.min(2, NPoints); j++)
                        res.push(G.fromRprLEM(buffOutLEM, j*sG));
                t = curve.Fr.mul(t, curve.Fr.exp(inc, n));
            }

            await endWriteSection(fdNew);

            return res;
        }


        async function hashSection(fdTo, groupName, sectionId, nPoints, sectionName, logger) {

            const G = curve[groupName];
            const sG = G.F.n8*2;
            const nPointsChunk = Math.floor((1<<24)/sG);

            const oldPos = fdTo.pos;
            fdTo.pos = startSections[sectionId];

            for (let i=0; i< nPoints; i += nPointsChunk) {
                if (logger) logger.debug(`Hashing ${sectionName}: ${i}/${nPoints}`);
                const n = Math.min(nPoints-i, nPointsChunk);

                const buffLEM = await fdTo.read(n * sG);

                const buffU = await G.batchLEMtoU(buffLEM);

                nextChallengeHasher.update(buffU);
            }

            fdTo.pos = oldPos;
        }
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function contribute(oldPtauFilename, newPTauFilename, name, entropy, logger) {
        await blake2bWasm.ready();

        const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, "ptau", 1);
        const {curve, power, ceremonyPower} = await readPTauHeader(fdOld, sections);
        if (power != ceremonyPower) {
            if (logger) logger.error("This file has been reduced. You cannot contribute into a reduced file.");
            throw new Error("This file has been reduced. You cannot contribute into a reduced file.");
        }
        if (sections[12]) {
            if (logger) logger.warn("WARNING: Contributing into a file that has phase2 calculated. You will have to prepare phase2 again.");
        }
        const contributions = await readContributions(fdOld, curve, sections);
        const curContribution = {
            name: name,
            type: 0, // Beacon
        };

        let lastChallengeHash;

        const rng = await getRandomRng(entropy);

        if (contributions.length>0) {
            lastChallengeHash = contributions[contributions.length-1].nextChallenge;
        } else {
            lastChallengeHash = calculateFirstChallengeHash(curve, power, logger);
        }

        // Generate a random key


        curContribution.key = createPTauKey(curve, lastChallengeHash, rng);


        const responseHasher = new blake2bWasm(64);
        responseHasher.update(lastChallengeHash);

        const fdNew = await createBinFile(newPTauFilename, "ptau", 1, 7);
        await writePTauHeader(fdNew, curve, power);

        const startSections = [];

        let firstPoints;
        firstPoints = await processSection(2, "G1",  (2 ** power) * 2 -1, curve.Fr.e(1), curContribution.key.tau.prvKey, "tauG1" );
        curContribution.tauG1 = firstPoints[1];
        firstPoints = await processSection(3, "G2",  (2 ** power) , curve.Fr.e(1), curContribution.key.tau.prvKey, "tauG2" );
        curContribution.tauG2 = firstPoints[1];
        firstPoints = await processSection(4, "G1",  (2 ** power) , curContribution.key.alpha.prvKey, curContribution.key.tau.prvKey, "alphaTauG1" );
        curContribution.alphaG1 = firstPoints[0];
        firstPoints = await processSection(5, "G1",  (2 ** power) , curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, "betaTauG1" );
        curContribution.betaG1 = firstPoints[0];
        firstPoints = await processSection(6, "G2",  1, curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, "betaTauG2" );
        curContribution.betaG2 = firstPoints[0];

        curContribution.partialHash = responseHasher.getPartialHash();

        const buffKey = new Uint8Array(curve.F1.n8*2*6+curve.F2.n8*2*3);

        toPtauPubKeyRpr(buffKey, 0, curve, curContribution.key, false);

        responseHasher.update(new Uint8Array(buffKey));
        const hashResponse = responseHasher.digest();

        if (logger) logger.info(formatHash(hashResponse, "Contribution Response Hash imported: "));

        const nextChallengeHasher = new blake2bWasm(64);
        nextChallengeHasher.update(hashResponse);

        await hashSection(fdNew, "G1", 2, (2 ** power) * 2 -1, "tauG1");
        await hashSection(fdNew, "G2", 3, (2 ** power)       , "tauG2");
        await hashSection(fdNew, "G1", 4, (2 ** power)       , "alphaTauG1");
        await hashSection(fdNew, "G1", 5, (2 ** power)       , "betaTauG1");
        await hashSection(fdNew, "G2", 6, 1                  , "betaG2");

        curContribution.nextChallenge = nextChallengeHasher.digest();

        if (logger) logger.info(formatHash(curContribution.nextChallenge, "Next Challenge Hash: "));

        contributions.push(curContribution);

        await writeContributions(fdNew, curve, contributions);

        await fdOld.close();
        await fdNew.close();

        return hashResponse;

        async function processSection(sectionId, groupName, NPoints, first, inc, sectionName) {
            const res = [];
            fdOld.pos = sections[sectionId][0].p;

            await startWriteSection(fdNew, sectionId);

            startSections[sectionId] = fdNew.pos;

            const G = curve[groupName];
            const sG = G.F.n8*2;
            const chunkSize = Math.floor((1<<20) / sG);   // 128Mb chunks
            let t = first;
            for (let i=0 ; i<NPoints ; i+= chunkSize) {
                if (logger) logger.debug(`processing: ${sectionName}: ${i}/${NPoints}`);
                const n= Math.min(NPoints-i, chunkSize );
                const buffIn = await fdOld.read(n * sG);
                const buffOutLEM = await G.batchApplyKey(buffIn, t, inc);

                /* Code to test the case where we don't have the 2^m-2 component
                if (sectionName== "tauG1") {
                    const bz = new Uint8Array(64);
                    buffOutLEM.set(bz, 64*((2 ** power) - 1 ));
                }
                */

                const promiseWrite = fdNew.write(buffOutLEM);
                const buffOutC = await G.batchLEMtoC(buffOutLEM);

                responseHasher.update(buffOutC);
                await promiseWrite;
                if (i==0)   // Return the 2 first points.
                    for (let j=0; j<Math.min(2, NPoints); j++)
                        res.push(G.fromRprLEM(buffOutLEM, j*sG));
                t = curve.Fr.mul(t, curve.Fr.exp(inc, n));
            }

            await endWriteSection(fdNew);

            return res;
        }


        async function hashSection(fdTo, groupName, sectionId, nPoints, sectionName) {

            const G = curve[groupName];
            const sG = G.F.n8*2;
            const nPointsChunk = Math.floor((1<<24)/sG);

            const oldPos = fdTo.pos;
            fdTo.pos = startSections[sectionId];

            for (let i=0; i< nPoints; i += nPointsChunk) {
                if ((logger)&&i) logger.debug(`Hashing ${sectionName}: ` + i);
                const n = Math.min(nPoints-i, nPointsChunk);

                const buffLEM = await fdTo.read(n * sG);

                const buffU = await G.batchLEMtoU(buffLEM);

                nextChallengeHasher.update(buffU);
            }

            fdTo.pos = oldPos;
        }


    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function preparePhase2(oldPtauFilename, newPTauFilename, logger) {

        const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, "ptau", 1);
        const {curve, power} = await readPTauHeader(fdOld, sections);

        const fdNew = await createBinFile(newPTauFilename, "ptau", 1, 11);
        await writePTauHeader(fdNew, curve, power);

        await copySection(fdOld, sections, fdNew, 2);
        await copySection(fdOld, sections, fdNew, 3);
        await copySection(fdOld, sections, fdNew, 4);
        await copySection(fdOld, sections, fdNew, 5);
        await copySection(fdOld, sections, fdNew, 6);
        await copySection(fdOld, sections, fdNew, 7);

        await processSection(2, 12, "G1", "tauG1" );
        await processSection(3, 13, "G2", "tauG2" );
        await processSection(4, 14, "G1", "alphaTauG1" );
        await processSection(5, 15, "G1", "betaTauG1" );

        await fdOld.close();
        await fdNew.close();

        // await fs.promises.unlink(newPTauFilename+ ".tmp");

        return;

        async function processSection(oldSectionId, newSectionId, Gstr, sectionName) {
            if (logger) logger.debug("Starting section: "+sectionName);

            await startWriteSection(fdNew, newSectionId);

            for (let p=0; p<=power; p++) {
                await processSectionPower(p);
            }

            if (oldSectionId == 2) {
                await processSectionPower(power+1);
            }

            await endWriteSection(fdNew);


            async function processSectionPower(p) {
                const nPoints = 2 ** p;
                const G = curve[Gstr];
                curve.Fr;
                const sGin = G.F.n8*2;
                G.F.n8*3;

                let buff;
                buff = new BigBuffer(nPoints*sGin);

                await startReadUniqueSection(fdOld, sections, oldSectionId);
                if ((oldSectionId == 2)&&(p==power+1)) {
                    await fdOld.readToBuffer(buff, 0,(nPoints-1)*sGin );
                    buff.set(curve.G1.zeroAffine, (nPoints-1)*sGin );
                } else {
                    await fdOld.readToBuffer(buff, 0,nPoints*sGin );
                }
                await endReadSection(fdOld, true);


                buff = await G.lagrangeEvaluations(buff, "affine", "affine", logger, sectionName);
                await fdNew.write(buff);

    /*
                if (p <= curve.Fr.s) {
                    buff = await G.ifft(buff, "affine", "affine", logger, sectionName);
                    await fdNew.write(buff);
                } else if (p == curve.Fr.s+1) {
                    const smallM = 1<<curve.Fr.s;
                    let t0 = new BigBuffer( smallM * sGmid );
                    let t1 = new BigBuffer( smallM * sGmid );

                    const shift_to_small_m = Fr.exp(Fr.shift, smallM);
                    const one_over_denom = Fr.inv(Fr.sub(shift_to_small_m, Fr.one));

                    let sInvAcc = Fr.one;
                    for (let i=0; i<smallM; i++) {
                        const ti =  buff.slice(i*sGin, (i+1)*sGin);
                        const tmi = buff.slice((i+smallM)*sGin, (i+smallM+1)*sGin);

                        t0.set(
                            G.timesFr(
                                G.sub(
                                    G.timesFr(ti , shift_to_small_m),
                                    tmi
                                ),
                                one_over_denom
                            ),
                            i*sGmid
                        );
                        t1.set(
                            G.timesFr(
                                G.sub( tmi, ti),
                                Fr.mul(sInvAcc, one_over_denom)
                            ),
                            i*sGmid
                        );


                        sInvAcc = Fr.mul(sInvAcc, Fr.shiftInv);
                    }
                    t0 = await G.ifft(t0, "jacobian", "affine", logger, sectionName + " t0");
                    await fdNew.write(t0);
                    t0 = null;
                    t1 = await G.ifft(t1, "jacobian", "affine", logger, sectionName + " t0");
                    await fdNew.write(t1);

                } else {
                    if (logger) logger.error("Power too big");
                    throw new Error("Power to big");
                }
    */
            }
        }
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function truncate(ptauFilename, template, logger) {

        const {fd: fdOld, sections} = await readBinFile(ptauFilename, "ptau", 1);
        const {curve, power, ceremonyPower} = await readPTauHeader(fdOld, sections);

        const sG1 = curve.G1.F.n8*2;
        const sG2 = curve.G2.F.n8*2;

        for (let p=1; p<power; p++) {
            await generateTruncate(p);
        }

        await fdOld.close();

        return true;

        async function generateTruncate(p) {

            let sP = p.toString();
            while (sP.length<2) sP = "0" + sP;

            if (logger) logger.debug("Writing Power: "+sP);

            const fdNew = await createBinFile(template + sP + ".ptau", "ptau", 1, 11);
            await writePTauHeader(fdNew, curve, p, ceremonyPower);

            await copySection(fdOld, sections, fdNew, 2, ((2 ** p)*2-1) * sG1 ); // tagG1
            await copySection(fdOld, sections, fdNew, 3, (2 ** p) * sG2); // tauG2
            await copySection(fdOld, sections, fdNew, 4, (2 ** p) * sG1); // alfaTauG1
            await copySection(fdOld, sections, fdNew, 5, (2 ** p) * sG1); // betaTauG1
            await copySection(fdOld, sections, fdNew, 6,  sG2); // betaTauG2
            await copySection(fdOld, sections, fdNew, 7); // contributions
            await copySection(fdOld, sections, fdNew, 12, ((2 ** (p+1))*2 -1) * sG1); // L_tauG1
            await copySection(fdOld, sections, fdNew, 13, ((2 ** p)*2 -1) * sG2); // L_tauG2
            await copySection(fdOld, sections, fdNew, 14, ((2 ** p)*2 -1) * sG1); // L_alfaTauG1
            await copySection(fdOld, sections, fdNew, 15, ((2 ** p)*2 -1) * sG1); // L_betaTauG1

            await fdNew.close();
        }


    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function convert(oldPtauFilename, newPTauFilename, logger) {

        const {fd: fdOld, sections} = await readBinFile(oldPtauFilename, "ptau", 1);
        const {curve, power} = await readPTauHeader(fdOld, sections);

        const fdNew = await createBinFile(newPTauFilename, "ptau", 1, 11);
        await writePTauHeader(fdNew, curve, power);

        // const fdTmp = await fastFile.createOverride(newPTauFilename+ ".tmp");

        await copySection(fdOld, sections, fdNew, 2);
        await copySection(fdOld, sections, fdNew, 3);
        await copySection(fdOld, sections, fdNew, 4);
        await copySection(fdOld, sections, fdNew, 5);
        await copySection(fdOld, sections, fdNew, 6);
        await copySection(fdOld, sections, fdNew, 7);

        await processSection(2, 12, "G1", "tauG1" );
        await copySection(fdOld, sections, fdNew, 13);
        await copySection(fdOld, sections, fdNew, 14);
        await copySection(fdOld, sections, fdNew, 15);

        await fdOld.close();
        await fdNew.close();

        // await fs.promises.unlink(newPTauFilename+ ".tmp");

        return;

        async function processSection(oldSectionId, newSectionId, Gstr, sectionName) {
            if (logger) logger.debug("Starting section: "+sectionName);

            await startWriteSection(fdNew, newSectionId);

            const size = sections[newSectionId][0].size;
            const chunkSize = fdOld.pageSize;
            await startReadUniqueSection(fdOld, sections, newSectionId);
            for (let p=0; p<size; p+=chunkSize) {
                const l = Math.min(size -p, chunkSize);
                const buff = await fdOld.read(l);
                await fdNew.write(buff);
            }
            await endReadSection(fdOld);

            if (oldSectionId == 2) {
                await processSectionPower(power+1);
            }

            await endWriteSection(fdNew);

            async function processSectionPower(p) {
                const nPoints = 2 ** p;
                const G = curve[Gstr];
                const sGin = G.F.n8*2;

                let buff;
                buff = new BigBuffer(nPoints*sGin);

                await startReadUniqueSection(fdOld, sections, oldSectionId);
                if ((oldSectionId == 2)&&(p==power+1)) {
                    await fdOld.readToBuffer(buff, 0,(nPoints-1)*sGin );
                    buff.set(curve.G1.zeroAffine, (nPoints-1)*sGin );
                } else {
                    await fdOld.readToBuffer(buff, 0,nPoints*sGin );
                }
                await endReadSection(fdOld, true);

                buff = await G.lagrangeEvaluations(buff, "affine", "affine", logger, sectionName);
                await fdNew.write(buff);

    /*
                if (p <= curve.Fr.s) {
                    buff = await G.ifft(buff, "affine", "affine", logger, sectionName);
                    await fdNew.write(buff);
                } else if (p == curve.Fr.s+1) {
                    const smallM = 1<<curve.Fr.s;
                    let t0 = new BigBuffer( smallM * sGmid );
                    let t1 = new BigBuffer( smallM * sGmid );

                    const shift_to_small_m = Fr.exp(Fr.shift, smallM);
                    const one_over_denom = Fr.inv(Fr.sub(shift_to_small_m, Fr.one));

                    let sInvAcc = Fr.one;
                    for (let i=0; i<smallM; i++) {
                        if (i%10000) logger.debug(`sectionName prepare L calc: ${sectionName}, ${i}/${smallM}`);
                        const ti =  buff.slice(i*sGin, (i+1)*sGin);
                        const tmi = buff.slice((i+smallM)*sGin, (i+smallM+1)*sGin);

                        t0.set(
                            G.timesFr(
                                G.sub(
                                    G.timesFr(ti , shift_to_small_m),
                                    tmi
                                ),
                                one_over_denom
                            ),
                            i*sGmid
                        );
                        t1.set(
                            G.timesFr(
                                G.sub( tmi, ti),
                                Fr.mul(sInvAcc, one_over_denom)
                            ),
                            i*sGmid
                        );


                        sInvAcc = Fr.mul(sInvAcc, Fr.shiftInv);
                    }
                    t0 = await G.ifft(t0, "jacobian", "affine", logger, sectionName + " t0");
                    await fdNew.write(t0);
                    t0 = null;
                    t1 = await G.ifft(t1, "jacobian", "affine", logger, sectionName + " t1");
                    await fdNew.write(t1);

                } else {
                    if (logger) logger.error("Power too big");
                    throw new Error("Power to big");
                }
    */
            }


        }
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function exportJson(pTauFilename, verbose) {
        const {fd, sections} = await readBinFile(pTauFilename, "ptau", 1);

        const {curve, power} = await readPTauHeader(fd, sections);

        const pTau = {};
        pTau.q = curve.q;
        pTau.power = power;
        pTau.contributions = await readContributions(fd, curve, sections);

        pTau.tauG1 = await exportSection(2, "G1", (2 ** power)*2 -1, "tauG1");
        pTau.tauG2 = await exportSection(3, "G2", (2 ** power), "tauG2");
        pTau.alphaTauG1 = await exportSection(4, "G1", (2 ** power), "alphaTauG1");
        pTau.betaTauG1 = await exportSection(5, "G1", (2 ** power), "betaTauG1");
        pTau.betaG2 = await exportSection(6, "G2", 1, "betaG2");

        pTau.lTauG1 = await exportLagrange(12, "G1", "lTauG1");
        pTau.lTauG2 = await exportLagrange(13, "G2", "lTauG2");
        pTau.lAlphaTauG1 = await exportLagrange(14, "G1", "lAlphaTauG2");
        pTau.lBetaTauG1 = await exportLagrange(15, "G1", "lBetaTauG2");

        await fd.close();

        return pTau;



        async function exportSection(sectionId, groupName, nPoints, sectionName) {
            const G = curve[groupName];
            const sG = G.F.n8*2;

            const res = [];
            await startReadUniqueSection(fd, sections, sectionId);
            for (let i=0; i< nPoints; i++) {
                if ((verbose)&&i&&(i%10000 == 0)) console.log(`${sectionName}: ` + i);
                const buff = await fd.read(sG);
                res.push(G.fromRprLEM(buff, 0));
            }
            await endReadSection(fd);

            return res;
        }

        async function exportLagrange(sectionId, groupName, sectionName) {
            const G = curve[groupName];
            const sG = G.F.n8*2;

            const res = [];
            await startReadUniqueSection(fd, sections, sectionId);
            for (let p=0; p<=power; p++) {
                if (verbose) console.log(`${sectionName}: Power: ${p}`);
                res[p] = [];
                const nPoints = (2 ** p);
                for (let i=0; i<nPoints; i++) {
                    if ((verbose)&&i&&(i%10000 == 0)) console.log(`${sectionName}: ${i}/${nPoints}`);
                    const buff = await fd.read(sG);
                    res[p].push(G.fromRprLEM(buff, 0));
                }
            }
            await endReadSection(fd);
            return res;
        }


    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    var powersoftau = /*#__PURE__*/Object.freeze({
        __proto__: null,
        newAccumulator: newAccumulator,
        exportChallenge: exportChallenge,
        importResponse: importResponse,
        verify: verify,
        challengeContribute: challengeContribute,
        beacon: beacon$1,
        contribute: contribute,
        preparePhase2: preparePhase2,
        truncate: truncate,
        convert: convert,
        exportJson: exportJson
    });

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    function r1csPrint(r1cs, syms, logger) {
        for (let i=0; i<r1cs.constraints.length; i++) {
            printCostraint(r1cs.constraints[i]);
        }
        function printCostraint(c) {
            const lc2str = (lc) => {
                let S = "";
                const keys = Object.keys(lc);
                keys.forEach( (k) => {
                    let name = syms.varIdx2Name[k];
                    if (name == "one") name = "";

                    let vs = r1cs.curve.Fr.toString(lc[k]);
                    if (vs == "1") vs = "";  // Do not show ones
                    if (vs == "-1") vs = "-";  // Do not show ones
                    if ((S!="")&&(vs[0]!="-")) vs = "+"+vs;
                    if (S!="") vs = " "+vs;
                    S= S + vs   + name;
                });
                return S;
            };
            const S = `[ ${lc2str(c[0])} ] * [ ${lc2str(c[1])} ] - [ ${lc2str(c[2])} ] = 0`;
            if (logger) logger.info(S);
        }

    }

    const SUBARRAY_SIZE$1 = 0x40000;

    const BigArrayHandler$1 = {
        get: function(obj, prop) {
            if (!isNaN(prop)) {
                return obj.getElement(prop);
            } else return obj[prop];
        },
        set: function(obj, prop, value) {
            if (!isNaN(prop)) {
                return obj.setElement(prop, value);
            } else {
                obj[prop] = value;
                return true;
            }
        }
    };

    class _BigArray$1 {
        constructor (initSize) {
            this.length = initSize || 0;
            this.arr = new Array(SUBARRAY_SIZE$1);

            for (let i=0; i<initSize; i+=SUBARRAY_SIZE$1) {
                this.arr[i/SUBARRAY_SIZE$1] = new Array(Math.min(SUBARRAY_SIZE$1, initSize - i));
            }
            return this;
        }
        push () {
            for (let i=0; i<arguments.length; i++) {
                this.setElement (this.length, arguments[i]);
            }
        }

        slice (f, t) {
            const arr = new Array(t-f);
            for (let i=f; i< t; i++) arr[i-f] = this.getElement(i);
            return arr;
        }
        getElement(idx) {
            idx = parseInt(idx);
            const idx1 = Math.floor(idx / SUBARRAY_SIZE$1);
            const idx2 = idx % SUBARRAY_SIZE$1;
            return this.arr[idx1] ? this.arr[idx1][idx2] : undefined;
        }
        setElement(idx, value) {
            idx = parseInt(idx);
            const idx1 = Math.floor(idx / SUBARRAY_SIZE$1);
            if (!this.arr[idx1]) {
                this.arr[idx1] = new Array(SUBARRAY_SIZE$1);
            }
            const idx2 = idx % SUBARRAY_SIZE$1;
            this.arr[idx1][idx2] = value;
            if (idx >= this.length) this.length = idx+1;
            return true;
        }
        getKeys() {
            const newA = new BigArray$1();
            for (let i=0; i<this.arr.length; i++) {
                if (this.arr[i]) {
                    for (let j=0; j<this.arr[i].length; j++) {
                        if (typeof this.arr[i][j] !== "undefined") {
                            newA.push(i*SUBARRAY_SIZE$1+j);
                        }
                    }
                }
            }
            return newA;
        }
    }

    class BigArray$1 {
        constructor( initSize ) {
            const obj = new _BigArray$1(initSize);
            const extObj = new Proxy(obj, BigArrayHandler$1);
            return extObj;
        }
    }

    async function readR1csHeader(fd,sections,singleThread) {


        const res = {};
        await startReadUniqueSection(fd, sections, 1);
        // Read Header
        res.n8 = await fd.readULE32();
        res.prime = await readBigInt(fd, res.n8);

        res.curve = await getCurveFromR(res.prime, singleThread);

        res.nVars = await fd.readULE32();
        res.nOutputs = await fd.readULE32();
        res.nPubInputs = await fd.readULE32();
        res.nPrvInputs = await fd.readULE32();
        res.nLabels = await fd.readULE64();
        res.nConstraints = await fd.readULE32();
        await endReadSection(fd);

        return res;
    }

    async function readConstraints(fd,sections, r1cs, logger, loggerCtx) {
        const bR1cs = await readSection(fd, sections, 2);
        let bR1csPos = 0;
        let constraints;
        if (r1cs.nConstraints>1<<20) {
            constraints = new BigArray$1();
        } else {
            constraints = [];
        }
        for (let i=0; i<r1cs.nConstraints; i++) {
            if ((logger)&&(i%100000 == 0)) logger.info(`${loggerCtx}: Loading constraints: ${i}/${r1cs.nConstraints}`);
            const c = readConstraint();
            constraints.push(c);
        }
        return constraints;


        function readConstraint() {
            const c = [];
            c[0] = readLC();
            c[1] = readLC();
            c[2] = readLC();
            return c;
        }

        function readLC() {
            const lc= {};

            const buffUL32 = bR1cs.slice(bR1csPos, bR1csPos+4);
            bR1csPos += 4;
            const buffUL32V = new DataView(buffUL32.buffer);
            const nIdx = buffUL32V.getUint32(0, true);

            const buff = bR1cs.slice(bR1csPos, bR1csPos + (4+r1cs.n8)*nIdx );
            bR1csPos += (4+r1cs.n8)*nIdx;
            const buffV = new DataView(buff.buffer);
            for (let i=0; i<nIdx; i++) {
                const idx = buffV.getUint32(i*(4+r1cs.n8), true);
                const val = r1cs.curve.Fr.fromRprLE(buff, i*(4+r1cs.n8)+4);
                lc[idx] = val;
            }
            return lc;
        }
    }

    async function readMap(fd, sections, r1cs, logger, loggerCtx) {
        const bMap = await readSection(fd, sections, 3);
        let bMapPos = 0;
        let map;

        if (r1cs.nVars>1<<20) {
            map = new BigArray$1();
        } else {
            map = [];
        }
        for (let i=0; i<r1cs.nVars; i++) {
            if ((logger)&&(i%10000 == 0)) logger.info(`${loggerCtx}: Loading map: ${i}/${r1cs.nVars}`);
            const idx = readULE64();
            map.push(idx);
        }

        return map;

        function readULE64() {
            const buffULE64 = bMap.slice(bMapPos, bMapPos+8);
            bMapPos += 8;
            const buffULE64V = new DataView(buffULE64.buffer);
            const LSB = buffULE64V.getUint32(0, true);
            const MSB = buffULE64V.getUint32(4, true);

            return MSB * 0x100000000 + LSB;
        }

    }

    async function readR1cs(fileName, loadConstraints, loadMap, singleThread, logger, loggerCtx) {

        const {fd, sections} = await readBinFile(fileName, "r1cs", 1);

        const res = await readR1csHeader(fd, sections, singleThread);


        if (loadConstraints) {
            res.constraints = await readConstraints(fd, sections, res, logger, loggerCtx);
        }

        // Read Labels

        if (loadMap) {
            res.map = await readMap(fd, sections, res, logger, loggerCtx);
        }

        await fd.close();

        return res;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    const bls12381r = Scalar.e("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16);
    const bn128r = Scalar.e("21888242871839275222246405745257275088548364400416034343698204186575808495617");

    async function r1csInfo(r1csName, logger) {

        const cir = await readR1cs(r1csName);

        if (Scalar.eq(cir.prime, bn128r)) {
            if (logger) logger.info("Curve: bn-128");
        } else if (Scalar.eq(cir.prime, bls12381r)) {
            if (logger) logger.info("Curve: bls12-381");
        } else {
            if (logger) logger.info(`Unknown Curve. Prime: ${Scalar.toString(cir.prime)}`);
        }
        if (logger) logger.info(`# of Wires: ${cir.nVars}`);
        if (logger) logger.info(`# of Constraints: ${cir.nConstraints}`);
        if (logger) logger.info(`# of Private Inputs: ${cir.nPrvInputs}`);
        if (logger) logger.info(`# of Public Inputs: ${cir.nPubInputs}`);
        if (logger) logger.info(`# of Labels: ${cir.nLabels}`);
        if (logger) logger.info(`# of Outputs: ${cir.nOutputs}`);

        return cir;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    function stringifyBigInts$2(Fr, o) {
        if (o instanceof Uint8Array)  {
            return Fr.toString(o);
        } else if (Array.isArray(o)) {
            return o.map(stringifyBigInts$2.bind(null, Fr));
        } else if (typeof o == "object") {
            const res = {};
            const keys = Object.keys(o);
            keys.forEach( (k) => {
                res[k] = stringifyBigInts$2(Fr, o[k]);
            });
            return res;
        } else if ((typeof(o) == "bigint") || o.eq !== undefined)  {
            return o.toString(10);
        } else {
            return o;
        }
    }


    async function r1csExportJson(r1csFileName, logger) {

        const cir = await readR1cs(r1csFileName, true, true, true, logger);
        const Fr=cir.curve.Fr;
        delete cir.curve;

        return stringifyBigInts$2(Fr, cir);
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    var r1cs = /*#__PURE__*/Object.freeze({
        __proto__: null,
        print: r1csPrint,
        info: r1csInfo,
        exportJson: r1csExportJson
    });

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function loadSymbols(symFileName) {
        const sym = {
            labelIdx2Name: [ "one" ],
            varIdx2Name: [ "one" ],
            componentIdx2Name: []
        };
        const fd = await readExisting(symFileName);
        const buff = await fd.read(fd.totalSize);
        const symsStr = new TextDecoder("utf-8").decode(buff);
        const lines = symsStr.split("\n");
        for (let i=0; i<lines.length; i++) {
            const arr = lines[i].split(",");
            if (arr.length!=4) continue;
            if (sym.varIdx2Name[arr[1]]) {
                sym.varIdx2Name[arr[1]] += "|" + arr[3];
            } else {
                sym.varIdx2Name[arr[1]] = arr[3];
            }
            sym.labelIdx2Name[arr[0]] = arr[3];
            if (!sym.componentIdx2Name[arr[2]]) {
                sym.componentIdx2Name[arr[2]] = extractComponent(arr[3]);
            }
        }

        await fd.close();

        return sym;

        function extractComponent(name) {
            const arr = name.split(".");
            arr.pop(); // Remove the lasr element
            return arr.join(".");
        }
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const {unstringifyBigInts: unstringifyBigInts$3} = utils;


    async function wtnsDebug(_input, wasmFileName, wtnsFileName, symName, options, logger) {

        const input = unstringifyBigInts$3(_input);

        const fdWasm = await readExisting(wasmFileName);
        const wasm = await fdWasm.read(fdWasm.totalSize);
        await fdWasm.close();


        let wcOps = {
            sanityCheck: true
        };
        let sym = await loadSymbols(symName);
        if (options.set) {
            if (!sym) sym = await loadSymbols(symName);
            wcOps.logSetSignal= function(labelIdx, value) {
                // The line below splits the arrow log into 2 strings to avoid some Secure ECMAScript issues
                if (logger) logger.info("SET " + sym.labelIdx2Name[labelIdx] + " <" + "-- " + value.toString());
            };
        }
        if (options.get) {
            if (!sym) sym = await loadSymbols(symName);
            wcOps.logGetSignal= function(varIdx, value) {
                // The line below splits the arrow log into 2 strings to avoid some Secure ECMAScript issues
                if (logger) logger.info("GET " + sym.labelIdx2Name[varIdx] + " --" + "> " + value.toString());
            };
        }
        if (options.trigger) {
            if (!sym) sym = await loadSymbols(symName);
            wcOps.logStartComponent= function(cIdx) {
                if (logger) logger.info("START: " + sym.componentIdx2Name[cIdx]);
            };
            wcOps.logFinishComponent= function(cIdx) {
                if (logger) logger.info("FINISH: " + sym.componentIdx2Name[cIdx]);
            };
        }
        wcOps.sym = sym;

        const wc = await builder(wasm, wcOps);
        const w = await wc.calculateWitness(input);

        const fdWtns = await createBinFile(wtnsFileName, "wtns", 2, 2);

        await write(fdWtns, w, wc.prime);

        await fdWtns.close();
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function wtnsExportJson(wtnsFileName) {

        const w = await read(wtnsFileName);

        return w;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    var wtns = /*#__PURE__*/Object.freeze({
        __proto__: null,
        calculate: wtnsCalculate,
        debug: wtnsDebug,
        exportJson: wtnsExportJson
    });

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    const SUBARRAY_SIZE = 0x40000;

    const BigArrayHandler = {
        get: function(obj, prop) {
            if (!isNaN(prop)) {
                return obj.getElement(prop);
            } else return obj[prop];
        },
        set: function(obj, prop, value) {
            if (!isNaN(prop)) {
                return obj.setElement(prop, value);
            } else {
                obj[prop] = value;
                return true;
            }
        }
    };

    class _BigArray {
        constructor (initSize) {
            this.length = initSize || 0;
            this.arr = new Array(SUBARRAY_SIZE);

            for (let i=0; i<initSize; i+=SUBARRAY_SIZE) {
                this.arr[i/SUBARRAY_SIZE] = new Array(Math.min(SUBARRAY_SIZE, initSize - i));
            }
            return this;
        }
        push () {
            for (let i=0; i<arguments.length; i++) {
                this.setElement (this.length, arguments[i]);
            }
        }

        slice (f, t) {
            const arr = new Array(t-f);
            for (let i=f; i< t; i++) arr[i-f] = this.getElement(i);
            return arr;
        }
        getElement(idx) {
            idx = parseInt(idx);
            const idx1 = Math.floor(idx / SUBARRAY_SIZE);
            const idx2 = idx % SUBARRAY_SIZE;
            return this.arr[idx1] ? this.arr[idx1][idx2] : undefined;
        }
        setElement(idx, value) {
            idx = parseInt(idx);
            const idx1 = Math.floor(idx / SUBARRAY_SIZE);
            if (!this.arr[idx1]) {
                this.arr[idx1] = new Array(SUBARRAY_SIZE);
            }
            const idx2 = idx % SUBARRAY_SIZE;
            this.arr[idx1][idx2] = value;
            if (idx >= this.length) this.length = idx+1;
            return true;
        }
        getKeys() {
            const newA = new BigArray();
            for (let i=0; i<this.arr.length; i++) {
                if (this.arr[i]) {
                    for (let j=0; j<this.arr[i].length; j++) {
                        if (typeof this.arr[i][j] !== "undefined") {
                            newA.push(i*SUBARRAY_SIZE+j);
                        }
                    }
                }
            }
            return newA;
        }
    }

    class BigArray {
        constructor( initSize ) {
            const obj = new _BigArray(initSize);
            const extObj = new Proxy(obj, BigArrayHandler);
            return extObj;
        }
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */


    async function newZKey(r1csName, ptauName, zkeyName, logger) {

        const TAU_G1 = 0;
        const TAU_G2 = 1;
        const ALPHATAU_G1 = 2;
        const BETATAU_G1 = 3;
        await blake2bWasm.ready();
        const csHasher = blake2bWasm(64);

        const {fd: fdPTau, sections: sectionsPTau} = await readBinFile(ptauName, "ptau", 1);
        const {curve, power} = await readPTauHeader(fdPTau, sectionsPTau);
        const {fd: fdR1cs, sections: sectionsR1cs} = await readBinFile(r1csName, "r1cs", 1);
        const r1cs = await readR1csHeader(fdR1cs, sectionsR1cs, false);

        const fdZKey = await createBinFile(zkeyName, "zkey", 1, 10, 1<<22, 1<<24);

        const sG1 = curve.G1.F.n8*2;
        const sG2 = curve.G2.F.n8*2;

        if (r1cs.prime != curve.r) {
            if (logger) logger.error("r1cs curve does not match powers of tau ceremony curve");
            return -1;
        }

        const cirPower = log2(r1cs.nConstraints + r1cs.nPubInputs + r1cs.nOutputs +1 -1) +1;

        if (cirPower > power) {
            if (logger) logger.error(`circuit too big for this power of tau ceremony. ${r1cs.nConstraints}*2 > 2**${power}`);
            return -1;
        }

        if (!sectionsPTau[12]) {
            if (logger) logger.error("Powers of tau is not prepared.");
            return -1;
        }

        const nPublic = r1cs.nOutputs + r1cs.nPubInputs;
        const domainSize = 2 ** cirPower;

        // Write the header
        ///////////
        await startWriteSection(fdZKey, 1);
        await fdZKey.writeULE32(1); // Groth
        await endWriteSection(fdZKey);

        // Write the Groth header section
        ///////////

        await startWriteSection(fdZKey, 2);
        const primeQ = curve.q;
        const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;

        const primeR = curve.r;
        const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;
        const Rr = Scalar.mod(Scalar.shl(1, n8r*8), primeR);
        const R2r = curve.Fr.e(Scalar.mod(Scalar.mul(Rr,Rr), primeR));

        await fdZKey.writeULE32(n8q);
        await writeBigInt(fdZKey, primeQ, n8q);
        await fdZKey.writeULE32(n8r);
        await writeBigInt(fdZKey, primeR, n8r);
        await fdZKey.writeULE32(r1cs.nVars);                         // Total number of bars
        await fdZKey.writeULE32(nPublic);                       // Total number of public vars (not including ONE)
        await fdZKey.writeULE32(domainSize);                  // domainSize

        let bAlpha1;
        bAlpha1 = await fdPTau.read(sG1, sectionsPTau[4][0].p);
        await fdZKey.write(bAlpha1);
        bAlpha1 = await curve.G1.batchLEMtoU(bAlpha1);
        csHasher.update(bAlpha1);

        let bBeta1;
        bBeta1 = await fdPTau.read(sG1, sectionsPTau[5][0].p);
        await fdZKey.write(bBeta1);
        bBeta1 = await curve.G1.batchLEMtoU(bBeta1);
        csHasher.update(bBeta1);

        let bBeta2;
        bBeta2 = await fdPTau.read(sG2, sectionsPTau[6][0].p);
        await fdZKey.write(bBeta2);
        bBeta2 = await curve.G2.batchLEMtoU(bBeta2);
        csHasher.update(bBeta2);

        const bg1 = new Uint8Array(sG1);
        curve.G1.toRprLEM(bg1, 0, curve.G1.g);
        const bg2 = new Uint8Array(sG2);
        curve.G2.toRprLEM(bg2, 0, curve.G2.g);
        const bg1U = new Uint8Array(sG1);
        curve.G1.toRprUncompressed(bg1U, 0, curve.G1.g);
        const bg2U = new Uint8Array(sG2);
        curve.G2.toRprUncompressed(bg2U, 0, curve.G2.g);

        await fdZKey.write(bg2);        // gamma2
        await fdZKey.write(bg1);        // delta1
        await fdZKey.write(bg2);        // delta2
        csHasher.update(bg2U);      // gamma2
        csHasher.update(bg1U);      // delta1
        csHasher.update(bg2U);      // delta2
        await endWriteSection(fdZKey);

        if (logger) logger.info("Reading r1cs");
        let sR1cs = await readSection(fdR1cs, sectionsR1cs, 2);

        const A = new BigArray(r1cs.nVars);
        const B1 = new BigArray(r1cs.nVars);
        const B2 = new BigArray(r1cs.nVars);
        const C = new BigArray(r1cs.nVars- nPublic -1);
        const IC = new Array(nPublic+1);

        if (logger) logger.info("Reading tauG1");
        let sTauG1 = await readSection(fdPTau, sectionsPTau, 12, (domainSize -1)*sG1, domainSize*sG1);
        if (logger) logger.info("Reading tauG2");
        let sTauG2 = await readSection(fdPTau, sectionsPTau, 13, (domainSize -1)*sG2, domainSize*sG2);
        if (logger) logger.info("Reading alphatauG1");
        let sAlphaTauG1 = await readSection(fdPTau, sectionsPTau, 14, (domainSize -1)*sG1, domainSize*sG1);
        if (logger) logger.info("Reading betatauG1");
        let sBetaTauG1 = await readSection(fdPTau, sectionsPTau, 15, (domainSize -1)*sG1, domainSize*sG1);

        await processConstraints();

        await composeAndWritePoints(3, "G1", IC, "IC");

        await writeHs();

        await hashHPoints();

        await composeAndWritePoints(8, "G1", C, "C");
        await composeAndWritePoints(5, "G1", A, "A");
        await composeAndWritePoints(6, "G1", B1, "B1");
        await composeAndWritePoints(7, "G2", B2, "B2");

        const csHash = csHasher.digest();
        // Contributions section
        await startWriteSection(fdZKey, 10);
        await fdZKey.write(csHash);
        await fdZKey.writeULE32(0);
        await endWriteSection(fdZKey);

        if (logger) logger.info(formatHash(csHash, "Circuit hash: "));


        await fdZKey.close();
        await fdR1cs.close();
        await fdPTau.close();

        return csHash;

        async function writeHs() {
            await startWriteSection(fdZKey, 9);
            const buffOut = new BigBuffer(domainSize*sG1);
            if (cirPower < curve.Fr.s) {
                let sTauG1 = await readSection(fdPTau, sectionsPTau, 12, (domainSize*2-1)*sG1, domainSize*2*sG1);
                for (let i=0; i< domainSize; i++) {
                    if ((logger)&&(i%10000 == 0)) logger.debug(`spliting buffer: ${i}/${domainSize}`);
                    const buff = sTauG1.slice( (i*2+1)*sG1, (i*2+1)*sG1 + sG1 );
                    buffOut.set(buff, i*sG1);
                }
            } else if (cirPower == curve.Fr.s) {
                const o = sectionsPTau[12][0].p + ((2 ** (cirPower+1)) -1)*sG1;
                await fdPTau.readToBuffer(buffOut, 0, domainSize*sG1, o + domainSize*sG1);
            } else {
                if (logger) logger.error("Circuit too big");
                throw new Error("Circuit too big for this curve");
            }
            await fdZKey.write(buffOut);
            await endWriteSection(fdZKey);
        }

        async function processConstraints() {
            const buffCoeff = new Uint8Array(12 + curve.Fr.n8);
            const buffCoeffV = new DataView(buffCoeff.buffer);
            const bOne = new Uint8Array(curve.Fr.n8);
            curve.Fr.toRprLE(bOne, 0, curve.Fr.e(1));

            let r1csPos = 0;

            function r1cs_readULE32() {
                const buff = sR1cs.slice(r1csPos, r1csPos+4);
                r1csPos += 4;
                const buffV = new DataView(buff.buffer);
                return buffV.getUint32(0, true);
            }

            const coefs = new BigArray();
            for (let c=0; c<r1cs.nConstraints; c++) {
                if ((logger)&&(c%10000 == 0)) logger.debug(`processing constraints: ${c}/${r1cs.nConstraints}`);
                const nA = r1cs_readULE32();
                for (let i=0; i<nA; i++) {
                    const s = r1cs_readULE32();
                    const coefp = r1csPos;
                    r1csPos += curve.Fr.n8;

                    const l1t = TAU_G1;
                    const l1 = sG1*c;
                    const l2t = BETATAU_G1;
                    const l2 = sG1*c;
                    if (typeof A[s] === "undefined") A[s] = [];
                    A[s].push([l1t, l1, coefp]);

                    if (s <= nPublic) {
                        if (typeof IC[s] === "undefined") IC[s] = [];
                        IC[s].push([l2t, l2, coefp]);
                    } else {
                        if (typeof C[s- nPublic -1] === "undefined") C[s- nPublic -1] = [];
                        C[s - nPublic -1].push([l2t, l2, coefp]);
                    }
                    coefs.push([0, c, s, coefp]);
                }

                const nB = r1cs_readULE32();
                for (let i=0; i<nB; i++) {
                    const s = r1cs_readULE32();
                    const coefp = r1csPos;
                    r1csPos += curve.Fr.n8;

                    const l1t = TAU_G1;
                    const l1 = sG1*c;
                    const l2t = TAU_G2;
                    const l2 = sG2*c;
                    const l3t = ALPHATAU_G1;
                    const l3 = sG1*c;
                    if (typeof B1[s] === "undefined") B1[s] = [];
                    B1[s].push([l1t, l1, coefp]);
                    if (typeof B2[s] === "undefined") B2[s] = [];
                    B2[s].push([l2t, l2, coefp]);

                    if (s <= nPublic) {
                        if (typeof IC[s] === "undefined") IC[s] = [];
                        IC[s].push([l3t, l3, coefp]);
                    } else {
                        if (typeof C[s- nPublic -1] === "undefined") C[s- nPublic -1] = [];
                        C[s- nPublic -1].push([l3t, l3, coefp]);
                    }

                    coefs.push([1, c, s, coefp]);
                }

                const nC = r1cs_readULE32();
                for (let i=0; i<nC; i++) {
                    const s = r1cs_readULE32();
                    const coefp = r1csPos;
                    r1csPos += curve.Fr.n8;

                    const l1t = TAU_G1;
                    const l1 = sG1*c;
                    if (s <= nPublic) {
                        if (typeof IC[s] === "undefined") IC[s] = [];
                        IC[s].push([l1t, l1, coefp]);
                    } else {
                        if (typeof C[s- nPublic -1] === "undefined") C[s- nPublic -1] = [];
                        C[s- nPublic -1].push([l1t, l1, coefp]);
                    }
                }
            }

            for (let s = 0; s <= nPublic ; s++) {
                const l1t = TAU_G1;
                const l1 = sG1*(r1cs.nConstraints + s);
                const l2t = BETATAU_G1;
                const l2 = sG1*(r1cs.nConstraints + s);
                if (typeof A[s] === "undefined") A[s] = [];
                A[s].push([l1t, l1, -1]);
                if (typeof IC[s] === "undefined") IC[s] = [];
                IC[s].push([l2t, l2, -1]);
                coefs.push([0, r1cs.nConstraints + s, s, -1]);
            }


            await startWriteSection(fdZKey, 4);

            const buffSection = new BigBuffer(coefs.length*(12+curve.Fr.n8) + 4);

            const buff4 = new Uint8Array(4);
            const buff4V = new DataView(buff4.buffer);
            buff4V.setUint32(0, coefs.length, true);
            buffSection.set(buff4);
            let coefsPos = 4;
            for (let i=0; i<coefs.length; i++) {
                if ((logger)&&(i%100000 == 0)) logger.debug(`writing coeffs: ${i}/${coefs.length}`);
                writeCoef(coefs[i]);
            }

            await fdZKey.write(buffSection);
            await endWriteSection(fdZKey);

            function writeCoef(c) {
                buffCoeffV.setUint32(0, c[0], true);
                buffCoeffV.setUint32(4, c[1], true);
                buffCoeffV.setUint32(8, c[2], true);
                let n;
                if (c[3]>=0) {
                    n = curve.Fr.fromRprLE(sR1cs.slice(c[3], c[3] + curve.Fr.n8), 0);
                } else {
                    n = curve.Fr.fromRprLE(bOne, 0);
                }
                const nR2 = curve.Fr.mul(n, R2r);
                curve.Fr.toRprLE(buffCoeff, 12, nR2);
                buffSection.set(buffCoeff, coefsPos);
                coefsPos += buffCoeff.length;
            }

        }

        async function composeAndWritePoints(idSection, groupName, arr, sectionName) {
            const CHUNK_SIZE= 1<<15;
            const G = curve[groupName];

            hashU32(arr.length);
            await startWriteSection(fdZKey, idSection);

            let opPromises = [];

            let i=0;
            while (i<arr.length) {

                let t=0;
                while ((i<arr.length)&&(t<curve.tm.concurrency)) {
                    if (logger)  logger.debug(`Writing points start ${sectionName}: ${i}/${arr.length}`);
                    let n = 1;
                    let nP = (arr[i] ? arr[i].length : 0);
                    while ((i + n < arr.length) && (nP + (arr[i+n] ? arr[i+n].length : 0) < CHUNK_SIZE) && (n<CHUNK_SIZE)) {
                        nP += (arr[i+n] ? arr[i+n].length : 0);
                        n ++;
                    }
                    const subArr = arr.slice(i, i + n);
                    const _i = i;
                    opPromises.push(composeAndWritePointsThread(groupName, subArr, logger, sectionName).then( (r) => {
                        if (logger)  logger.debug(`Writing points end ${sectionName}: ${_i}/${arr.length}`);
                        return r;
                    }));
                    i += n;
                    t++;
                }

                const result = await Promise.all(opPromises);

                for (let k=0; k<result.length; k++) {
                    await fdZKey.write(result[k][0]);
                    const buff = await G.batchLEMtoU(result[k][0]);
                    csHasher.update(buff);
                }
                opPromises = [];

            }
            await endWriteSection(fdZKey);

        }

        async function composeAndWritePointsThread(groupName, arr, logger, sectionName) {
            const G = curve[groupName];
            const sGin = G.F.n8*2;
            const sGmid = G.F.n8*3;
            const sGout = G.F.n8*2;
            let fnExp, fnMultiExp, fnBatchToAffine, fnZero;
            if (groupName == "G1") {
                fnExp = "g1m_timesScalarAffine";
                fnMultiExp = "g1m_multiexpAffine";
                fnBatchToAffine = "g1m_batchToAffine";
                fnZero = "g1m_zero";
            } else if (groupName == "G2") {
                fnExp = "g2m_timesScalarAffine";
                fnMultiExp = "g2m_multiexpAffine";
                fnBatchToAffine = "g2m_batchToAffine";
                fnZero = "g2m_zero";
            } else {
                throw new Error("Invalid group");
            }
            let acc =0;
            for (let i=0; i<arr.length; i++) acc += arr[i] ? arr[i].length : 0;
            let bBases, bScalars;
            if (acc> 2<<14) {
                bBases = new BigBuffer(acc*sGin);
                bScalars = new BigBuffer(acc*curve.Fr.n8);
            } else {
                bBases = new Uint8Array(acc*sGin);
                bScalars = new Uint8Array(acc*curve.Fr.n8);
            }
            let pB =0;
            let pS =0;

            const sBuffs = [
                sTauG1,
                sTauG2,
                sAlphaTauG1,
                sBetaTauG1
            ];

            const bOne = new Uint8Array(curve.Fr.n8);
            curve.Fr.toRprLE(bOne, 0, curve.Fr.e(1));

            let offset = 0;
            for (let i=0; i<arr.length; i++) {
                if (!arr[i]) continue;
                for (let j=0; j<arr[i].length; j++) {
                    if ((logger)&&(j)&&(j%10000 == 0))  logger.debug(`Configuring big array ${sectionName}: ${j}/${arr[i].length}`);
                    bBases.set(
                        sBuffs[arr[i][j][0]].slice(
                            arr[i][j][1],
                            arr[i][j][1] + sGin
                        ), offset*sGin
                    );
                    if (arr[i][j][2]>=0) {
                        bScalars.set(
                            sR1cs.slice(
                                arr[i][j][2],
                                arr[i][j][2] + curve.Fr.n8
                            ),
                            offset*curve.Fr.n8
                        );
                    } else {
                        bScalars.set(bOne, offset*curve.Fr.n8);
                    }
                    offset ++;
                }
            }

            if (arr.length>1) {
                const task = [];
                task.push({cmd: "ALLOCSET", var: 0, buff: bBases});
                task.push({cmd: "ALLOCSET", var: 1, buff: bScalars});
                task.push({cmd: "ALLOC", var: 2, len: arr.length*sGmid});
                pB = 0;
                pS = 0;
                let pD =0;
                for (let i=0; i<arr.length; i++) {
                    if (!arr[i]) {
                        task.push({cmd: "CALL", fnName: fnZero, params: [
                            {var: 2, offset: pD}
                        ]});
                        pD += sGmid;
                        continue;
                    }
                    if (arr[i].length == 1) {
                        task.push({cmd: "CALL", fnName: fnExp, params: [
                            {var: 0, offset: pB},
                            {var: 1, offset: pS},
                            {val: curve.Fr.n8},
                            {var: 2, offset: pD}
                        ]});
                    } else {
                        task.push({cmd: "CALL", fnName: fnMultiExp, params: [
                            {var: 0, offset: pB},
                            {var: 1, offset: pS},
                            {val: curve.Fr.n8},
                            {val: arr[i].length},
                            {var: 2, offset: pD}
                        ]});
                    }
                    pB += sGin*arr[i].length;
                    pS += curve.Fr.n8*arr[i].length;
                    pD += sGmid;
                }
                task.push({cmd: "CALL", fnName: fnBatchToAffine, params: [
                    {var: 2},
                    {val: arr.length},
                    {var: 2},
                ]});
                task.push({cmd: "GET", out: 0, var: 2, len: arr.length*sGout});

                const res = await curve.tm.queueAction(task);
                return res;
            } else {
                let res = await G.multiExpAffine(bBases, bScalars, logger, sectionName);
                res = [ G.toAffine(res) ];
                return res;
            }
        }


        async function hashHPoints() {
            const CHUNK_SIZE = 1<<14;

            hashU32(domainSize-1);

            for (let i=0; i<domainSize-1; i+= CHUNK_SIZE) {
                if (logger)  logger.debug(`HashingHPoints: ${i}/${domainSize}`);
                const n = Math.min(domainSize-1, CHUNK_SIZE);
                await hashHPointsChunk(i, n);
            }
        }

        async function hashHPointsChunk(offset, nPoints) {
            const buff1 = await fdPTau.read(nPoints *sG1, sectionsPTau[2][0].p + (offset + domainSize)*sG1);
            const buff2 = await fdPTau.read(nPoints *sG1, sectionsPTau[2][0].p + offset*sG1);
            const concurrency= curve.tm.concurrency;
            const nPointsPerThread = Math.floor(nPoints / concurrency);
            const opPromises = [];
            for (let i=0; i<concurrency; i++) {
                let n;
                if (i< concurrency-1) {
                    n = nPointsPerThread;
                } else {
                    n = nPoints - i*nPointsPerThread;
                }
                if (n==0) continue;

                const subBuff1 = buff1.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);
                const subBuff2 = buff2.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);
                opPromises.push(hashHPointsThread(subBuff1, subBuff2));
            }


            const result = await Promise.all(opPromises);

            for (let i=0; i<result.length; i++) {
                csHasher.update(result[i][0]);
            }
        }

        async function hashHPointsThread(buff1, buff2) {
            const nPoints = buff1.byteLength/sG1;
            const sGmid = curve.G1.F.n8*3;
            const task = [];
            task.push({cmd: "ALLOCSET", var: 0, buff: buff1});
            task.push({cmd: "ALLOCSET", var: 1, buff: buff2});
            task.push({cmd: "ALLOC", var: 2, len: nPoints*sGmid});
            for (let i=0; i<nPoints; i++) {
                task.push({
                    cmd: "CALL",
                    fnName: "g1m_subAffine",
                    params: [
                        {var: 0, offset: i*sG1},
                        {var: 1, offset: i*sG1},
                        {var: 2, offset: i*sGmid},
                    ]
                });
            }
            task.push({cmd: "CALL", fnName: "g1m_batchToAffine", params: [
                {var: 2},
                {val: nPoints},
                {var: 2},
            ]});
            task.push({cmd: "CALL", fnName: "g1m_batchLEMtoU", params: [
                {var: 2},
                {val: nPoints},
                {var: 2},
            ]});
            task.push({cmd: "GET", out: 0, var: 2, len: nPoints*sG1});

            const res = await curve.tm.queueAction(task);

            return res;
        }

        function hashU32(n) {
            const buff = new Uint8Array(4);
            const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
            buffV.setUint32(0, n, false);
            csHasher.update(buff);
        }

    }

    async function phase2exportMPCParams(zkeyName, mpcparamsName, logger) {

        const {fd: fdZKey, sections: sectionsZKey} = await readBinFile(zkeyName, "zkey", 2);
        const zkey = await readHeader$1(fdZKey, sectionsZKey);
        if (zkey.protocol != "groth16") {
            throw new Error("zkey file is not groth16");
        }

        const curve = await getCurveFromQ(zkey.q);
        const sG1 = curve.G1.F.n8*2;
        const sG2 = curve.G2.F.n8*2;

        const mpcParams = await readMPCParams(fdZKey, curve, sectionsZKey);

        const fdMPCParams = await createOverride(mpcparamsName);

        /////////////////////
        // Verification Key Section
        /////////////////////
        await writeG1(zkey.vk_alpha_1);
        await writeG1(zkey.vk_beta_1);
        await writeG2(zkey.vk_beta_2);
        await writeG2(zkey.vk_gamma_2);
        await writeG1(zkey.vk_delta_1);
        await writeG2(zkey.vk_delta_2);

        // IC
        let buffBasesIC;
        buffBasesIC = await readSection(fdZKey, sectionsZKey, 3);
        buffBasesIC = await curve.G1.batchLEMtoU(buffBasesIC);

        await writePointArray("G1", buffBasesIC);

        /////////////////////
        // h Section
        /////////////////////
        const buffBasesH_Lodd = await readSection(fdZKey, sectionsZKey, 9);

        let buffBasesH_Tau;
        buffBasesH_Tau = await curve.G1.fft(buffBasesH_Lodd, "affine", "jacobian", logger);
        buffBasesH_Tau = await curve.G1.batchApplyKey(buffBasesH_Tau, curve.Fr.neg(curve.Fr.e(2)), curve.Fr.w[zkey.power+1], "jacobian", "affine", logger);

        // Remove last element.  (The degree of H will be allways m-2)
        buffBasesH_Tau = buffBasesH_Tau.slice(0, buffBasesH_Tau.byteLength - sG1);
        buffBasesH_Tau = await curve.G1.batchLEMtoU(buffBasesH_Tau);
        await writePointArray("G1", buffBasesH_Tau);

        /////////////////////
        // L section
        /////////////////////
        let buffBasesC;
        buffBasesC = await readSection(fdZKey, sectionsZKey, 8);
        buffBasesC = await curve.G1.batchLEMtoU(buffBasesC);
        await writePointArray("G1", buffBasesC);

        /////////////////////
        // A Section (C section)
        /////////////////////
        let buffBasesA;
        buffBasesA = await readSection(fdZKey, sectionsZKey, 5);
        buffBasesA = await curve.G1.batchLEMtoU(buffBasesA);
        await writePointArray("G1", buffBasesA);

        /////////////////////
        // B1 Section
        /////////////////////
        let buffBasesB1;
        buffBasesB1 = await readSection(fdZKey, sectionsZKey, 6);
        buffBasesB1 = await curve.G1.batchLEMtoU(buffBasesB1);
        await writePointArray("G1", buffBasesB1);

        /////////////////////
        // B2 Section
        /////////////////////
        let buffBasesB2;
        buffBasesB2 = await readSection(fdZKey, sectionsZKey, 7);
        buffBasesB2 = await curve.G2.batchLEMtoU(buffBasesB2);
        await writePointArray("G2", buffBasesB2);

        await fdMPCParams.write(mpcParams.csHash);
        await writeU32(mpcParams.contributions.length);

        for (let i=0; i<mpcParams.contributions.length; i++) {
            const c = mpcParams.contributions[i];
            await writeG1(c.deltaAfter);
            await writeG1(c.delta.g1_s);
            await writeG1(c.delta.g1_sx);
            await writeG2(c.delta.g2_spx);
            await fdMPCParams.write(c.transcript);
        }

        await fdZKey.close();
        await fdMPCParams.close();

        async function writeG1(P) {
            const buff = new Uint8Array(sG1);
            curve.G1.toRprUncompressed(buff, 0, P);
            await fdMPCParams.write(buff);
        }

        async function writeG2(P) {
            const buff = new Uint8Array(sG2);
            curve.G2.toRprUncompressed(buff, 0, P);
            await fdMPCParams.write(buff);
        }

        async function writePointArray(groupName, buff) {
            let sG;
            if (groupName == "G1") {
                sG = sG1;
            } else {
                sG = sG2;
            }

            const buffSize = new Uint8Array(4);
            const buffSizeV = new DataView(buffSize.buffer, buffSize.byteOffset, buffSize.byteLength);
            buffSizeV.setUint32(0, buff.byteLength / sG, false);

            await fdMPCParams.write(buffSize);
            await fdMPCParams.write(buff);
        }

        async function writeU32(n) {
            const buffSize = new Uint8Array(4);
            const buffSizeV = new DataView(buffSize.buffer, buffSize.byteOffset, buffSize.byteLength);
            buffSizeV.setUint32(0, n, false);

            await fdMPCParams.write(buffSize);
        }



    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function phase2importMPCParams(zkeyNameOld, mpcparamsName, zkeyNameNew, name, logger) {

        const {fd: fdZKeyOld, sections: sectionsZKeyOld} = await readBinFile(zkeyNameOld, "zkey", 2);
        const zkeyHeader = await readHeader$1(fdZKeyOld, sectionsZKeyOld, false);
        if (zkeyHeader.protocol != "groth16") {
            throw new Error("zkey file is not groth16");
        }

        const curve = await getCurveFromQ(zkeyHeader.q);
        const sG1 = curve.G1.F.n8*2;
        const sG2 = curve.G2.F.n8*2;

        const oldMPCParams = await readMPCParams(fdZKeyOld, curve, sectionsZKeyOld);
        const newMPCParams = {};

        const fdMPCParams = await readExisting(mpcparamsName);

        fdMPCParams.pos =
            sG1*3 + sG2*3 +                     // vKey
            8 + sG1*zkeyHeader.nVars +              // IC + C
            4 + sG1*(zkeyHeader.domainSize-1) +     // H
            4 + sG1*zkeyHeader.nVars +              // A
            4 + sG1*zkeyHeader.nVars +              // B1
            4 + sG2*zkeyHeader.nVars;               // B2

        // csHash
        newMPCParams.csHash =  await fdMPCParams.read(64);

        const nConttributions = await fdMPCParams.readUBE32();
        newMPCParams.contributions = [];
        for (let i=0; i<nConttributions; i++) {
            const c = { delta:{} };
            c.deltaAfter = await readG1(fdMPCParams);
            c.delta.g1_s = await readG1(fdMPCParams);
            c.delta.g1_sx = await readG1(fdMPCParams);
            c.delta.g2_spx = await readG2(fdMPCParams);
            c.transcript = await fdMPCParams.read(64);
            if (i<oldMPCParams.contributions.length) {
                c.type = oldMPCParams.contributions[i].type;
                if (c.type==1) {
                    c.beaconHash = oldMPCParams.contributions[i].beaconHash;
                    c.numIterationsExp = oldMPCParams.contributions[i].numIterationsExp;
                }
                if (oldMPCParams.contributions[i].name) {
                    c.name = oldMPCParams.contributions[i].name;
                }
            }
            newMPCParams.contributions.push(c);
        }

        if (!hashIsEqual(newMPCParams.csHash, oldMPCParams.csHash)) {
            if (logger) logger.error("Hash of the original circuit does not match with the MPC one");
            return false;
        }

        if (oldMPCParams.contributions.length > newMPCParams.contributions.length) {
            if (logger) logger.error("The impoerted file does not include new contributions");
            return false;
        }

        for (let i=0; i<oldMPCParams.contributions.length; i++) {
            if (!contributionIsEqual(oldMPCParams.contributions[i], newMPCParams.contributions[i])) {
                if (logger) logger.error(`Previos contribution ${i} does not match`);
                return false;
            }
        }


        // Set the same name to all new controbutions
        if (name) {
            for (let i=oldMPCParams.contributions.length; i<newMPCParams.contributions.length; i++) {
                newMPCParams.contributions[i].name = name;
            }
        }

        const fdZKeyNew = await createBinFile(zkeyNameNew, "zkey", 1, 10);
        fdMPCParams.pos = 0;

        // Header
        fdMPCParams.pos += sG1;  // ignore alpha1 (keep original)
        fdMPCParams.pos += sG1;  // ignore beta1
        fdMPCParams.pos += sG2;  // ignore beta2
        fdMPCParams.pos += sG2;  // ignore gamma2
        zkeyHeader.vk_delta_1 = await readG1(fdMPCParams);
        zkeyHeader.vk_delta_2 = await readG2(fdMPCParams);
        await writeHeader(fdZKeyNew, zkeyHeader);

        // IC (Keep original)
        const nIC = await fdMPCParams.readUBE32();
        if (nIC != zkeyHeader.nPublic +1) {
            if (logger) logger.error("Invalid number of points in IC");
            await fdZKeyNew.discard();
            return false;
        }
        fdMPCParams.pos += sG1*(zkeyHeader.nPublic+1);
        await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 3);

        // Coeffs (Keep original)
        await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 4);

        // H Section
        const nH = await fdMPCParams.readUBE32();
        if (nH != zkeyHeader.domainSize-1) {
            if (logger) logger.error("Invalid number of points in H");
            await fdZKeyNew.discard();
            return false;
        }
        let buffH;
        const buffTauU = await fdMPCParams.read(sG1*(zkeyHeader.domainSize-1));
        const buffTauLEM = await curve.G1.batchUtoLEM(buffTauU);
        buffH = new Uint8Array(zkeyHeader.domainSize*sG1);
        buffH.set(buffTauLEM);   // Let the last one to zero.
        curve.G1.toRprLEM(buffH, sG1*(zkeyHeader.domainSize-1), curve.G1.zeroAffine);
        const n2Inv = curve.Fr.neg(curve.Fr.inv(curve.Fr.e(2)));
        const wInv = curve.Fr.inv(curve.Fr.w[zkeyHeader.power+1]);
        buffH = await curve.G1.batchApplyKey(buffH, n2Inv, wInv, "affine", "jacobian", logger);
        buffH = await curve.G1.ifft(buffH, "jacobian", "affine", logger);
        await startWriteSection(fdZKeyNew, 9);
        await fdZKeyNew.write(buffH);
        await endWriteSection(fdZKeyNew);

        // C Secion (L section)
        const nL = await fdMPCParams.readUBE32();
        if (nL != (zkeyHeader.nVars-zkeyHeader.nPublic-1)) {
            if (logger) logger.error("Invalid number of points in L");
            await fdZKeyNew.discard();
            return false;
        }
        let buffL;
        buffL = await fdMPCParams.read(sG1*(zkeyHeader.nVars-zkeyHeader.nPublic-1));
        buffL = await curve.G1.batchUtoLEM(buffL);
        await startWriteSection(fdZKeyNew, 8);
        await fdZKeyNew.write(buffL);
        await endWriteSection(fdZKeyNew);

        // A Section
        const nA = await fdMPCParams.readUBE32();
        if (nA != zkeyHeader.nVars) {
            if (logger) logger.error("Invalid number of points in A");
            await fdZKeyNew.discard();
            return false;
        }
        fdMPCParams.pos += sG1*(zkeyHeader.nVars);
        await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 5);

        // B1 Section
        const nB1 = await fdMPCParams.readUBE32();
        if (nB1 != zkeyHeader.nVars) {
            if (logger) logger.error("Invalid number of points in B1");
            await fdZKeyNew.discard();
            return false;
        }
        fdMPCParams.pos += sG1*(zkeyHeader.nVars);
        await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 6);

        // B2 Section
        const nB2 = await fdMPCParams.readUBE32();
        if (nB2 != zkeyHeader.nVars) {
            if (logger) logger.error("Invalid number of points in B2");
            await fdZKeyNew.discard();
            return false;
        }
        fdMPCParams.pos += sG2*(zkeyHeader.nVars);
        await copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 7);

        await writeMPCParams(fdZKeyNew, curve, newMPCParams);

        await fdMPCParams.close();
        await fdZKeyNew.close();
        await fdZKeyOld.close();

        return true;

        async function readG1(fd) {
            const buff = await fd.read(curve.G1.F.n8*2);
            return curve.G1.fromRprUncompressed(buff, 0);
        }

        async function readG2(fd) {
            const buff = await fd.read(curve.G2.F.n8*2);
            return curve.G2.fromRprUncompressed(buff, 0);
        }


        function contributionIsEqual(c1, c2) {
            if (!curve.G1.eq(c1.deltaAfter   , c2.deltaAfter)) return false;
            if (!curve.G1.eq(c1.delta.g1_s   , c2.delta.g1_s)) return false;
            if (!curve.G1.eq(c1.delta.g1_sx  , c2.delta.g1_sx)) return false;
            if (!curve.G2.eq(c1.delta.g2_spx , c2.delta.g2_spx)) return false;
            if (!hashIsEqual(c1.transcript, c2.transcript)) return false;
            return true;
        }


    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const sameRatio = sameRatio$2;



    async function phase2verifyFromInit(initFileName, pTauFileName, zkeyFileName, logger) {

        let sr;
        await blake2bWasm.ready();

        const {fd, sections} = await readBinFile(zkeyFileName, "zkey", 2);
        const zkey = await readHeader$1(fd, sections, false);
        if (zkey.protocol != "groth16") {
            throw new Error("zkey file is not groth16");
        }

        const curve = await getCurveFromQ(zkey.q);
        const sG1 = curve.G1.F.n8*2;

        const mpcParams = await readMPCParams(fd, curve, sections);

        const accumulatedHasher = blake2bWasm(64);
        accumulatedHasher.update(mpcParams.csHash);
        let curDelta = curve.G1.g;
        for (let i=0; i<mpcParams.contributions.length; i++) {
            const c = mpcParams.contributions[i];
            const ourHasher = cloneHasher(accumulatedHasher);

            hashG1(ourHasher, curve, c.delta.g1_s);
            hashG1(ourHasher, curve, c.delta.g1_sx);

            if (!hashIsEqual(ourHasher.digest(), c.transcript)) {
                console.log(`INVALID(${i}): Inconsistent transcript `);
                return false;
            }

            const delta_g2_sp = hashToG2(curve, c.transcript);

            sr = await sameRatio(curve, c.delta.g1_s, c.delta.g1_sx, delta_g2_sp, c.delta.g2_spx);
            if (sr !== true) {
                console.log(`INVALID(${i}): public key G1 and G2 do not have the same ration `);
                return false;
            }

            sr = await sameRatio(curve, curDelta, c.deltaAfter, delta_g2_sp, c.delta.g2_spx);
            if (sr !== true) {
                console.log(`INVALID(${i}): deltaAfter does not fillow the public key `);
                return false;
            }

            if (c.type == 1) {
                const rng = rngFromBeaconParams(c.beaconHash, c.numIterationsExp);
                const expected_prvKey = curve.Fr.fromRng(rng);
                const expected_g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));
                const expected_g1_sx = curve.G1.toAffine(curve.G1.timesFr(expected_g1_s, expected_prvKey));
                if (curve.G1.eq(expected_g1_s, c.delta.g1_s) !== true) {
                    console.log(`INVALID(${i}): Key of the beacon does not match. g1_s `);
                    return false;
                }
                if (curve.G1.eq(expected_g1_sx, c.delta.g1_sx) !== true) {
                    console.log(`INVALID(${i}): Key of the beacon does not match. g1_sx `);
                    return false;
                }
            }

            hashPubKey(accumulatedHasher, curve, c);

            const contributionHasher = blake2bWasm(64);
            hashPubKey(contributionHasher, curve, c);

            c.contributionHash = contributionHasher.digest();

            curDelta = c.deltaAfter;
        }


        const {fd: fdInit, sections: sectionsInit} = await readBinFile(initFileName, "zkey", 2);
        const zkeyInit = await readHeader$1(fdInit, sectionsInit, false);

        if (zkeyInit.protocol != "groth16") {
            throw new Error("zkeyinit file is not groth16");
        }

        if (  (!Scalar.eq(zkeyInit.q, zkey.q))
            ||(!Scalar.eq(zkeyInit.r, zkey.r))
            ||(zkeyInit.n8q != zkey.n8q)
            ||(zkeyInit.n8r != zkey.n8r))
        {
            if (logger) logger.error("INVALID:  Different curves");
            return false;
        }

        if (  (zkeyInit.nVars != zkey.nVars)
            ||(zkeyInit.nPublic !=  zkey.nPublic)
            ||(zkeyInit.domainSize != zkey.domainSize))
        {
            if (logger) logger.error("INVALID:  Different circuit parameters");
            return false;
        }

        if (!curve.G1.eq(zkey.vk_alpha_1, zkeyInit.vk_alpha_1)) {
            if (logger) logger.error("INVALID:  Invalid alpha1");
            return false;
        }
        if (!curve.G1.eq(zkey.vk_beta_1, zkeyInit.vk_beta_1)) {
            if (logger) logger.error("INVALID:  Invalid beta1");
            return false;
        }
        if (!curve.G2.eq(zkey.vk_beta_2, zkeyInit.vk_beta_2)) {
            if (logger) logger.error("INVALID:  Invalid beta2");
            return false;
        }
        if (!curve.G2.eq(zkey.vk_gamma_2, zkeyInit.vk_gamma_2)) {
            if (logger) logger.error("INVALID:  Invalid gamma2");
            return false;
        }
        if (!curve.G1.eq(zkey.vk_delta_1, curDelta)) {
            if (logger) logger.error("INVALID:  Invalid delta1");
            return false;
        }
        sr = await sameRatio(curve, curve.G1.g, curDelta, curve.G2.g, zkey.vk_delta_2);
        if (sr !== true) {
            if (logger) logger.error("INVALID:  Invalid delta2");
            return false;
        }

        const mpcParamsInit = await readMPCParams(fdInit, curve, sectionsInit);
        if (!hashIsEqual(mpcParams.csHash, mpcParamsInit.csHash)) {
            if (logger) logger.error("INVALID:  Circuit does not match");
            return false;
        }

        // Check sizes of sections
        if (sections[8][0].size != sG1*(zkey.nVars-zkey.nPublic-1)) {
            if (logger) logger.error("INVALID:  Invalid L section size");
            return false;
        }

        if (sections[9][0].size != sG1*(zkey.domainSize)) {
            if (logger) logger.error("INVALID:  Invalid H section size");
            return false;
        }

        let ss;
        ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 3);
        if (!ss) {
            if (logger) logger.error("INVALID:  IC section is not identical");
            return false;
        }

        ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 4);
        if (!ss) {
            if (logger) logger.error("Coeffs section is not identical");
            return false;
        }

        ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 5);
        if (!ss) {
            if (logger) logger.error("A section is not identical");
            return false;
        }

        ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 6);
        if (!ss) {
            if (logger) logger.error("B1 section is not identical");
            return false;
        }

        ss = await sectionIsEqual(fd, sections, fdInit, sectionsInit, 7);
        if (!ss) {
            if (logger) logger.error("B2 section is not identical");
            return false;
        }

        // Check L
        sr = await sectionHasSameRatio("G1", fdInit, sectionsInit, fd, sections, 8, zkey.vk_delta_2, zkeyInit.vk_delta_2, "L section");
        if (sr!==true) {
            if (logger) logger.error("L section does not match");
            return false;
        }

        // Check H
        sr = await sameRatioH();
        if (sr!==true) {
            if (logger) logger.error("H section does not match");
            return false;
        }

        if (logger) logger.info(formatHash(mpcParams.csHash, "Circuit Hash: "));

        await fd.close();
        await fdInit.close();

        for (let i=mpcParams.contributions.length-1; i>=0; i--) {
            const c = mpcParams.contributions[i];
            if (logger) logger.info("-------------------------");
            if (logger) logger.info(formatHash(c.contributionHash, `contribution #${i+1} ${c.name ? c.name : ""}:`));
            if (c.type == 1) {
                if (logger) logger.info(`Beacon generator: ${byteArray2hex(c.beaconHash)}`);
                if (logger) logger.info(`Beacon iterations Exp: ${c.numIterationsExp}`);
            }
        }
        if (logger) logger.info("-------------------------");

        if (logger) logger.info("ZKey Ok!");

        return true;


        async function sectionHasSameRatio(groupName, fd1, sections1, fd2, sections2, idSection, g2sp, g2spx, sectionName) {
            const MAX_CHUNK_SIZE = 1<<20;
            const G = curve[groupName];
            const sG = G.F.n8*2;
            await startReadUniqueSection(fd1, sections1, idSection);
            await startReadUniqueSection(fd2, sections2, idSection);

            let R1 = G.zero;
            let R2 = G.zero;

            const nPoints = sections1[idSection][0].size / sG;

            for (let i=0; i<nPoints; i += MAX_CHUNK_SIZE) {
                if (logger) logger.debug(`Same ratio check ${sectionName}:  ${i}/${nPoints}`);
                const n = Math.min(nPoints - i, MAX_CHUNK_SIZE);
                const bases1 = await fd1.read(n*sG);
                const bases2 = await fd2.read(n*sG);

                const scalars = new Uint8Array(4*n);
                crypto.randomFillSync(scalars);


                const r1 = await G.multiExpAffine(bases1, scalars);
                const r2 = await G.multiExpAffine(bases2, scalars);

                R1 = G.add(R1, r1);
                R2 = G.add(R2, r2);
            }
            await endReadSection(fd1);
            await endReadSection(fd2);

            if (nPoints == 0) return true;

            sr = await sameRatio(curve, R1, R2, g2sp, g2spx);
            if (sr !== true) return false;

            return true;
        }

        async function sameRatioH() {
            const MAX_CHUNK_SIZE = 1<<20;
            const G = curve.G1;
            const Fr = curve.Fr;
            const sG = G.F.n8*2;

            const {fd: fdPTau, sections: sectionsPTau} = await readBinFile(pTauFileName, "ptau", 1);

            let buff_r = new BigBuffer(zkey.domainSize * zkey.n8r);

            const seed= new Array(8);
            for (let i=0; i<8; i++) {
                seed[i] = crypto.randomBytes(4).readUInt32BE(0, true);
            }
            const rng = new ChaCha(seed);
            for (let i=0; i<zkey.domainSize-1; i++) {   // Note that last one is zero
                const e = Fr.fromRng(rng);
                Fr.toRprLE(buff_r, i*zkey.n8r, e);
            }
            Fr.toRprLE(buff_r, (zkey.domainSize-1)*zkey.n8r, Fr.zero);

            let R1 = G.zero;
            for (let i=0; i<zkey.domainSize; i += MAX_CHUNK_SIZE) {
                if (logger) logger.debug(`H Verificaition(tau):  ${i}/${zkey.domainSize}`);
                const n = Math.min(zkey.domainSize - i, MAX_CHUNK_SIZE);

                const buff1 = await fdPTau.read(sG*n, sectionsPTau[2][0].p + zkey.domainSize*sG + i*sG);
                const buff2 = await fdPTau.read(sG*n, sectionsPTau[2][0].p + i*sG);

                const buffB = await batchSubstract(buff1, buff2);
                const buffS = buff_r.slice(i*zkey.n8r, (i+n)*zkey.n8r);
                const r = await G.multiExpAffine(buffB, buffS);

                R1 = G.add(R1, r);
            }

            // Caluclate odd coeficients in transformed domain

            buff_r = await Fr.batchToMontgomery(buff_r);
            // const first = curve.Fr.neg(curve.Fr.inv(curve.Fr.e(2)));
            // Works*2   const first = curve.Fr.neg(curve.Fr.e(2));


            let first;

            if (zkey.power < Fr.s) {
                first = Fr.neg(Fr.e(2));
            } else {
                const small_m  = 2 ** Fr.s;
                const shift_to_small_m = Fr.exp(Fr.shift, small_m);
                first = Fr.sub( shift_to_small_m, Fr.one);
            }

            // const inc = curve.Fr.inv(curve.PFr.w[zkey.power+1]);
            const inc = zkey.power < Fr.s ? Fr.w[zkey.power+1] : Fr.shift;
            buff_r = await Fr.batchApplyKey(buff_r, first, inc);
            buff_r = await Fr.fft(buff_r);
            buff_r = await Fr.batchFromMontgomery(buff_r);

            await startReadUniqueSection(fd, sections, 9);
            let R2 = G.zero;
            for (let i=0; i<zkey.domainSize; i += MAX_CHUNK_SIZE) {
                if (logger) logger.debug(`H Verificaition(lagrange):  ${i}/${zkey.domainSize}`);
                const n = Math.min(zkey.domainSize - i, MAX_CHUNK_SIZE);

                const buff = await fd.read(sG*n);
                const buffS = buff_r.slice(i*zkey.n8r, (i+n)*zkey.n8r);
                const r = await G.multiExpAffine(buff, buffS);

                R2 = G.add(R2, r);
            }
            await endReadSection(fd);

            sr = await sameRatio(curve, R1, R2, zkey.vk_delta_2, zkeyInit.vk_delta_2);
            if (sr !== true) return false;


            return true;

        }

        async function batchSubstract(buff1, buff2) {
            const sG = curve.G1.F.n8*2;
            const nPoints = buff1.byteLength / sG;
            const concurrency= curve.tm.concurrency;
            const nPointsPerThread = Math.floor(nPoints / concurrency);
            const opPromises = [];
            for (let i=0; i<concurrency; i++) {
                let n;
                if (i< concurrency-1) {
                    n = nPointsPerThread;
                } else {
                    n = nPoints - i*nPointsPerThread;
                }
                if (n==0) continue;

                const subBuff1 = buff1.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);
                const subBuff2 = buff2.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);
                opPromises.push(batchSubstractThread(subBuff1, subBuff2));
            }


            const result = await Promise.all(opPromises);

            const fullBuffOut = new Uint8Array(nPoints*sG);
            let p =0;
            for (let i=0; i<result.length; i++) {
                fullBuffOut.set(result[i][0], p);
                p+=result[i][0].byteLength;
            }

            return fullBuffOut;
        }


        async function batchSubstractThread(buff1, buff2) {
            const sG1 = curve.G1.F.n8*2;
            const sGmid = curve.G1.F.n8*3;
            const nPoints = buff1.byteLength/sG1;
            const task = [];
            task.push({cmd: "ALLOCSET", var: 0, buff: buff1});
            task.push({cmd: "ALLOCSET", var: 1, buff: buff2});
            task.push({cmd: "ALLOC", var: 2, len: nPoints*sGmid});
            for (let i=0; i<nPoints; i++) {
                task.push({
                    cmd: "CALL",
                    fnName: "g1m_subAffine",
                    params: [
                        {var: 0, offset: i*sG1},
                        {var: 1, offset: i*sG1},
                        {var: 2, offset: i*sGmid},
                    ]
                });
            }
            task.push({cmd: "CALL", fnName: "g1m_batchToAffine", params: [
                {var: 2},
                {val: nPoints},
                {var: 2},
            ]});
            task.push({cmd: "GET", out: 0, var: 2, len: nPoints*sG1});

            const res = await curve.tm.queueAction(task);

            return res;
        }

    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function phase2verifyFromR1cs(r1csFileName, pTauFileName, zkeyFileName, logger) {

        // const initFileName = "~" + zkeyFileName + ".init";
        const initFileName = {type: "bigMem"};
        await newZKey(r1csFileName, pTauFileName, initFileName, logger);

        return await phase2verifyFromInit(initFileName, pTauFileName, zkeyFileName, logger);
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function phase2contribute(zkeyNameOld, zkeyNameNew, name, entropy, logger) {
        await blake2bWasm.ready();

        const {fd: fdOld, sections: sections} = await readBinFile(zkeyNameOld, "zkey", 2);
        const zkey = await readHeader$1(fdOld, sections);
        if (zkey.protocol != "groth16") {
            throw new Error("zkey file is not groth16");
        }

        const curve = await getCurveFromQ(zkey.q);

        const mpcParams = await readMPCParams(fdOld, curve, sections);

        const fdNew = await createBinFile(zkeyNameNew, "zkey", 1, 10);


        const rng = await getRandomRng(entropy);

        const transcriptHasher = blake2bWasm(64);
        transcriptHasher.update(mpcParams.csHash);
        for (let i=0; i<mpcParams.contributions.length; i++) {
            hashPubKey(transcriptHasher, curve, mpcParams.contributions[i]);
        }

        const curContribution = {};
        curContribution.delta = {};
        curContribution.delta.prvKey = curve.Fr.fromRng(rng);
        curContribution.delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));
        curContribution.delta.g1_sx = curve.G1.toAffine(curve.G1.timesFr(curContribution.delta.g1_s, curContribution.delta.prvKey));
        hashG1(transcriptHasher, curve, curContribution.delta.g1_s);
        hashG1(transcriptHasher, curve, curContribution.delta.g1_sx);
        curContribution.transcript = transcriptHasher.digest();
        curContribution.delta.g2_sp = hashToG2(curve, curContribution.transcript);
        curContribution.delta.g2_spx = curve.G2.toAffine(curve.G2.timesFr(curContribution.delta.g2_sp, curContribution.delta.prvKey));

        zkey.vk_delta_1 = curve.G1.timesFr(zkey.vk_delta_1, curContribution.delta.prvKey);
        zkey.vk_delta_2 = curve.G2.timesFr(zkey.vk_delta_2, curContribution.delta.prvKey);

        curContribution.deltaAfter = zkey.vk_delta_1;

        curContribution.type = 0;
        if (name) curContribution.name = name;

        mpcParams.contributions.push(curContribution);

        await writeHeader(fdNew, zkey);

        // IC
        await copySection(fdOld, sections, fdNew, 3);

        // Coeffs (Keep original)
        await copySection(fdOld, sections, fdNew, 4);

        // A Section
        await copySection(fdOld, sections, fdNew, 5);

        // B1 Section
        await copySection(fdOld, sections, fdNew, 6);

        // B2 Section
        await copySection(fdOld, sections, fdNew, 7);

        const invDelta = curve.Fr.inv(curContribution.delta.prvKey);
        await applyKeyToSection(fdOld, sections, fdNew, 8, curve, "G1", invDelta, curve.Fr.e(1), "L Section", logger);
        await applyKeyToSection(fdOld, sections, fdNew, 9, curve, "G1", invDelta, curve.Fr.e(1), "H Section", logger);

        await writeMPCParams(fdNew, curve, mpcParams);

        await fdOld.close();
        await fdNew.close();

        const contributionHasher = blake2bWasm(64);
        hashPubKey(contributionHasher, curve, curContribution);

        const contribuionHash = contributionHasher.digest();

        if (logger) logger.info(formatHash(mpcParams.csHash, "Circuit Hash: "));
        if (logger) logger.info(formatHash(contribuionHash, "Contribution Hash: "));

        return contribuionHash;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */


    async function beacon(zkeyNameOld, zkeyNameNew, name, beaconHashStr, numIterationsExp, logger) {
        await blake2bWasm.ready();

        const beaconHash = hex2ByteArray(beaconHashStr);
        if (   (beaconHash.byteLength == 0)
            || (beaconHash.byteLength*2 !=beaconHashStr.length))
        {
            if (logger) logger.error("Invalid Beacon Hash. (It must be a valid hexadecimal sequence)");
            return false;
        }
        if (beaconHash.length>=256) {
            if (logger) logger.error("Maximum lenght of beacon hash is 255 bytes");
            return false;
        }

        numIterationsExp = parseInt(numIterationsExp);
        if ((numIterationsExp<10)||(numIterationsExp>63)) {
            if (logger) logger.error("Invalid numIterationsExp. (Must be between 10 and 63)");
            return false;
        }


        const {fd: fdOld, sections: sections} = await readBinFile(zkeyNameOld, "zkey", 2);
        const zkey = await readHeader$1(fdOld, sections);

        if (zkey.protocol != "groth16") {
            throw new Error("zkey file is not groth16");
        }


        const curve = await getCurveFromQ(zkey.q);

        const mpcParams = await readMPCParams(fdOld, curve, sections);

        const fdNew = await createBinFile(zkeyNameNew, "zkey", 1, 10);

        const rng = await rngFromBeaconParams(beaconHash, numIterationsExp);

        const transcriptHasher = blake2bWasm(64);
        transcriptHasher.update(mpcParams.csHash);
        for (let i=0; i<mpcParams.contributions.length; i++) {
            hashPubKey(transcriptHasher, curve, mpcParams.contributions[i]);
        }

        const curContribution = {};
        curContribution.delta = {};
        curContribution.delta.prvKey = curve.Fr.fromRng(rng);
        curContribution.delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));
        curContribution.delta.g1_sx = curve.G1.toAffine(curve.G1.timesFr(curContribution.delta.g1_s, curContribution.delta.prvKey));
        hashG1(transcriptHasher, curve, curContribution.delta.g1_s);
        hashG1(transcriptHasher, curve, curContribution.delta.g1_sx);
        curContribution.transcript = transcriptHasher.digest();
        curContribution.delta.g2_sp = hashToG2(curve, curContribution.transcript);
        curContribution.delta.g2_spx = curve.G2.toAffine(curve.G2.timesFr(curContribution.delta.g2_sp, curContribution.delta.prvKey));

        zkey.vk_delta_1 = curve.G1.timesFr(zkey.vk_delta_1, curContribution.delta.prvKey);
        zkey.vk_delta_2 = curve.G2.timesFr(zkey.vk_delta_2, curContribution.delta.prvKey);

        curContribution.deltaAfter = zkey.vk_delta_1;

        curContribution.type = 1;
        curContribution.numIterationsExp = numIterationsExp;
        curContribution.beaconHash = beaconHash;

        if (name) curContribution.name = name;

        mpcParams.contributions.push(curContribution);

        await writeHeader(fdNew, zkey);

        // IC
        await copySection(fdOld, sections, fdNew, 3);

        // Coeffs (Keep original)
        await copySection(fdOld, sections, fdNew, 4);

        // A Section
        await copySection(fdOld, sections, fdNew, 5);

        // B1 Section
        await copySection(fdOld, sections, fdNew, 6);

        // B2 Section
        await copySection(fdOld, sections, fdNew, 7);

        const invDelta = curve.Fr.inv(curContribution.delta.prvKey);
        await applyKeyToSection(fdOld, sections, fdNew, 8, curve, "G1", invDelta, curve.Fr.e(1), "L Section", logger);
        await applyKeyToSection(fdOld, sections, fdNew, 9, curve, "G1", invDelta, curve.Fr.e(1), "H Section", logger);

        await writeMPCParams(fdNew, curve, mpcParams);

        await fdOld.close();
        await fdNew.close();

        const contributionHasher = blake2bWasm(64);
        hashPubKey(contributionHasher, curve, curContribution);

        const contribuionHash = contributionHasher.digest();

        if (logger) logger.info(formatHash(contribuionHash, "Contribution Hash: "));

        return contribuionHash;
    }

    async function zkeyExportJson(zkeyFileName) {

        const zKey = await readZKey(zkeyFileName, true);

        return zKey;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    async function bellmanContribute(curve, challengeFilename, responesFileName, entropy, logger) {
        await blake2bWasm.ready();

        const rng = await getRandomRng(entropy);

        const delta = curve.Fr.fromRng(rng);
        const invDelta = curve.Fr.inv(delta);

        const sG1 = curve.G1.F.n8*2;
        const sG2 = curve.G2.F.n8*2;

        const fdFrom = await readExisting(challengeFilename);
        const fdTo = await createOverride(responesFileName);


        await copy(sG1); // alpha1
        await copy(sG1); // beta1
        await copy(sG2); // beta2
        await copy(sG2); // gamma2
        const oldDelta1 = await readG1();
        const delta1 = curve.G1.timesFr(oldDelta1, delta);
        await writeG1(delta1);
        const oldDelta2 = await readG2();
        const delta2 = curve.G2.timesFr(oldDelta2, delta);
        await writeG2(delta2);

        // IC
        const nIC = await fdFrom.readUBE32();
        await fdTo.writeUBE32(nIC);
        await copy(nIC*sG1);

        // H
        const nH = await fdFrom.readUBE32();
        await fdTo.writeUBE32(nH);
        await applyKeyToChallengeSection(fdFrom, fdTo, null, curve, "G1", nH, invDelta, curve.Fr.e(1), "UNCOMPRESSED", "H", logger);

        // L
        const nL = await fdFrom.readUBE32();
        await fdTo.writeUBE32(nL);
        await applyKeyToChallengeSection(fdFrom, fdTo, null, curve, "G1", nL, invDelta, curve.Fr.e(1), "UNCOMPRESSED", "L", logger);

        // A
        const nA = await fdFrom.readUBE32();
        await fdTo.writeUBE32(nA);
        await copy(nA*sG1);

        // B1
        const nB1 = await fdFrom.readUBE32();
        await fdTo.writeUBE32(nB1);
        await copy(nB1*sG1);

        // B2
        const nB2 = await fdFrom.readUBE32();
        await fdTo.writeUBE32(nB2);
        await copy(nB2*sG2);


        //////////
        /// Read contributions
        //////////
        const transcriptHasher = blake2bWasm(64);

        const mpcParams = {};
        // csHash
        mpcParams.csHash =  await fdFrom.read(64);
        transcriptHasher.update(mpcParams.csHash);

        const nConttributions = await fdFrom.readUBE32();
        mpcParams.contributions = [];
        for (let i=0; i<nConttributions; i++) {
            const c = { delta:{} };
            c.deltaAfter = await readG1();
            c.delta.g1_s = await readG1();
            c.delta.g1_sx = await readG1();
            c.delta.g2_spx = await readG2();
            c.transcript = await fdFrom.read(64);
            mpcParams.contributions.push(c);
            hashPubKey(transcriptHasher, curve, c);
        }

        const curContribution = {};
        curContribution.delta = {};
        curContribution.delta.prvKey = delta;
        curContribution.delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));
        curContribution.delta.g1_sx = curve.G1.toAffine(curve.G1.timesFr(curContribution.delta.g1_s, delta));
        hashG1(transcriptHasher, curve, curContribution.delta.g1_s);
        hashG1(transcriptHasher, curve, curContribution.delta.g1_sx);
        curContribution.transcript = transcriptHasher.digest();
        curContribution.delta.g2_sp = hashToG2(curve, curContribution.transcript);
        curContribution.delta.g2_spx = curve.G2.toAffine(curve.G2.timesFr(curContribution.delta.g2_sp, delta));
        curContribution.deltaAfter = delta1;
        curContribution.type = 0;
        mpcParams.contributions.push(curContribution);


        //////////
        /// Write COntribution
        //////////

        await fdTo.write(mpcParams.csHash);
        await fdTo.writeUBE32(mpcParams.contributions.length);

        for (let i=0; i<mpcParams.contributions.length; i++) {
            const c = mpcParams.contributions[i];
            await writeG1(c.deltaAfter);
            await writeG1(c.delta.g1_s);
            await writeG1(c.delta.g1_sx);
            await writeG2(c.delta.g2_spx);
            await fdTo.write(c.transcript);
        }

        const contributionHasher = blake2bWasm(64);
        hashPubKey(contributionHasher, curve, curContribution);

        const contributionHash = contributionHasher.digest();

        if (logger) logger.info(formatHash(contributionHash, "Contribution Hash: "));

        await fdTo.close();
        await fdFrom.close();

        return contributionHash;

        async function copy(nBytes) {
            const CHUNK_SIZE = fdFrom.pageSize*2;
            for (let i=0; i<nBytes; i+= CHUNK_SIZE) {
                const n = Math.min(nBytes -i, CHUNK_SIZE);
                const buff = await fdFrom.read(n);
                await fdTo.write(buff);
            }
        }

        async function readG1() {
            const buff = await fdFrom.read(curve.G1.F.n8*2);
            return curve.G1.fromRprUncompressed(buff, 0);
        }

        async function readG2() {
            const buff = await fdFrom.read(curve.G2.F.n8*2);
            return curve.G2.fromRprUncompressed(buff, 0);
        }

        async function writeG1(P) {
            const buff = new Uint8Array(sG1);
            curve.G1.toRprUncompressed(buff, 0, P);
            await fdTo.write(buff);
        }

        async function writeG2(P) {
            const buff = new Uint8Array(sG2);
            curve.G2.toRprUncompressed(buff, 0, P);
            await fdTo.write(buff);
        }


    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const {stringifyBigInts: stringifyBigInts$1} = utils;

    async function zkeyExportVerificationKey(zkeyName, /* logger */ ) {

        const {fd, sections} = await readBinFile(zkeyName, "zkey", 2);
        const zkey = await readHeader$1(fd, sections);

        let res;
        if (zkey.protocol == "groth16") {
            res = await groth16Vk(zkey, fd, sections);
        } else if (zkey.protocol == "plonk") {
            res = await plonkVk(zkey);
        } else {
            throw new Error("zkey file is not groth16");
        }

        await fd.close();

        return res;
    }


    async function groth16Vk(zkey, fd, sections) {
        const curve = await getCurveFromQ(zkey.q);
        const sG1 = curve.G1.F.n8*2;

        const alphaBeta = await curve.pairing( zkey.vk_alpha_1 , zkey.vk_beta_2 );

        let vKey = {
            protocol: zkey.protocol,
            curve: curve.name,
            nPublic: zkey.nPublic,

            vk_alpha_1: curve.G1.toObject(zkey.vk_alpha_1),

            vk_beta_2: curve.G2.toObject(zkey.vk_beta_2),
            vk_gamma_2:  curve.G2.toObject(zkey.vk_gamma_2),
            vk_delta_2:  curve.G2.toObject(zkey.vk_delta_2),

            vk_alphabeta_12: curve.Gt.toObject(alphaBeta)
        };

        // Read IC Section
        ///////////
        await startReadUniqueSection(fd, sections, 3);
        vKey.IC = [];
        for (let i=0; i<= zkey.nPublic; i++) {
            const buff = await fd.read(sG1);
            const P = curve.G1.toObject(buff);
            vKey.IC.push(P);
        }
        await endReadSection(fd);

        vKey = stringifyBigInts$1(vKey);

        return vKey;
    }


    async function plonkVk(zkey) {
        const curve = await getCurveFromQ(zkey.q);

        let vKey = {
            protocol: zkey.protocol,
            curve: curve.name,
            nPublic: zkey.nPublic,
            power: zkey.power,

            k1: curve.Fr.toObject(zkey.k1),
            k2: curve.Fr.toObject(zkey.k2),

            Qm: curve.G1.toObject(zkey.Qm),
            Ql: curve.G1.toObject(zkey.Ql),
            Qr: curve.G1.toObject(zkey.Qr),
            Qo: curve.G1.toObject(zkey.Qo),
            Qc: curve.G1.toObject(zkey.Qc),
            S1: curve.G1.toObject(zkey.S1),
            S2: curve.G1.toObject(zkey.S2),
            S3: curve.G1.toObject(zkey.S3),

            X_2: curve.G2.toObject(zkey.X_2),

            w: curve.Fr.toObject(curve.Fr.w[zkey.power])
        };

        vKey = stringifyBigInts$1(vKey);

        return vKey;
    }

    var ejs = {};

    // Not ready yet
    // module.exports.generateVerifier_kimleeoh = generateVerifier_kimleeoh;



    async function exportSolidityVerifier(zKeyName, templates, logger) {

        const verificationKey = await zkeyExportVerificationKey(zKeyName);

        let template = templates[verificationKey.protocol];

        return ejs.render(template ,  verificationKey);
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    var zkey = /*#__PURE__*/Object.freeze({
        __proto__: null,
        newZKey: newZKey,
        exportBellman: phase2exportMPCParams,
        importBellman: phase2importMPCParams,
        verifyFromR1cs: phase2verifyFromR1cs,
        verifyFromInit: phase2verifyFromInit,
        contribute: phase2contribute,
        beacon: beacon,
        exportJson: zkeyExportJson,
        bellmanContribute: bellmanContribute,
        exportVerificationKey: zkeyExportVerificationKey,
        exportSolidityVerifier: exportSolidityVerifier
    });

    /*
        Copyright 2021 0kims association.

        This file is part of snarkjs.

        snarkjs is a free software: you can redistribute it and/or
        modify it under the terms of the GNU General Public License as published by the
        Free Software Foundation, either version 3 of the License, or (at your option)
        any later version.

        snarkjs is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details.

        You should have received a copy of the GNU General Public License along with
        snarkjs. If not, see <https://www.gnu.org/licenses/>.
    */


    async function plonkSetup(r1csName, ptauName, zkeyName, logger) {

        if (globalThis.gc) {globalThis.gc();}

        await blake2bWasm.ready();

        const {fd: fdPTau, sections: sectionsPTau} = await readBinFile(ptauName, "ptau", 1);
        const {curve, power} = await readPTauHeader(fdPTau, sectionsPTau);
        const {fd: fdR1cs, sections: sectionsR1cs} = await readBinFile(r1csName, "r1cs", 1);
        const r1cs = await readR1csHeader(fdR1cs, sectionsR1cs, false);

        const sG1 = curve.G1.F.n8*2;
        const G1 = curve.G1;
        const sG2 = curve.G2.F.n8*2;
        const Fr = curve.Fr;
        const n8r = curve.Fr.n8;

        if (logger) logger.info("Reading r1cs");
        let sR1cs = await readSection(fdR1cs, sectionsR1cs, 2);

        const plonkConstraints = new BigArray();
        const plonkAdditions = new BigArray();
        let plonkNVars = r1cs.nVars;

        const nPublic = r1cs.nOutputs + r1cs.nPubInputs;

        await processConstraints();
        if (globalThis.gc) {globalThis.gc();}

        const fdZKey = await createBinFile(zkeyName, "zkey", 1, 14, 1<<22, 1<<24);


        if (r1cs.prime != curve.r) {
            if (logger) logger.error("r1cs curve does not match powers of tau ceremony curve");
            return -1;
        }

        let cirPower = log2(plonkConstraints.length -1) +1;
        if (cirPower < 3) cirPower = 3;   // As the t polinomal is n+5 whe need at least a power of 4
        const domainSize = 2 ** cirPower;

        if (logger) logger.info("Plonk constraints: " + plonkConstraints.length);
        if (cirPower > power) {
            if (logger) logger.error(`circuit too big for this power of tau ceremony. ${plonkConstraints.length} > 2**${power}`);
            return -1;
        }

        if (!sectionsPTau[12]) {
            if (logger) logger.error("Powers of tau is not prepared.");
            return -1;
        }


        const LPoints = new BigBuffer(domainSize*sG1);
        const o = sectionsPTau[12][0].p + ((2 ** (cirPower)) -1)*sG1;
        await fdPTau.readToBuffer(LPoints, 0, domainSize*sG1, o);

        const [k1, k2] = getK1K2();

        const vk = {};


        await writeAdditions(3, "Additions");
        if (globalThis.gc) {globalThis.gc();}
        await writeWitnessMap(4, 0, "Amap");
        if (globalThis.gc) {globalThis.gc();}
        await writeWitnessMap(5, 1, "Bmap");
        if (globalThis.gc) {globalThis.gc();}
        await writeWitnessMap(6, 2, "Cmap");
        if (globalThis.gc) {globalThis.gc();}
        await writeQMap(7, 3, "Qm");
        if (globalThis.gc) {globalThis.gc();}
        await writeQMap(8, 4, "Ql");
        if (globalThis.gc) {globalThis.gc();}
        await writeQMap(9, 5, "Qr");
        if (globalThis.gc) {globalThis.gc();}
        await writeQMap(10, 6, "Qo");
        if (globalThis.gc) {globalThis.gc();}
        await writeQMap(11, 7, "Qc");
        if (globalThis.gc) {globalThis.gc();}
        await writeSigma(12, "sigma");
        if (globalThis.gc) {globalThis.gc();}
        await writeLs(13, "lagrange polynomials");
        if (globalThis.gc) {globalThis.gc();}

        // Write PTau points
        ////////////

        await startWriteSection(fdZKey, 14);
        const buffOut = new BigBuffer((domainSize+6)*sG1);
        await fdPTau.readToBuffer(buffOut, 0, (domainSize+6)*sG1, sectionsPTau[2][0].p);
        await fdZKey.write(buffOut);
        await endWriteSection(fdZKey);
        if (globalThis.gc) {globalThis.gc();}


        await writeHeaders();

        await fdZKey.close();
        await fdR1cs.close();
        await fdPTau.close();

        if (logger) logger.info("Setup Finished");

        return ;

        async function processConstraints() {

            let r1csPos = 0;

            function r1cs_readULE32() {
                const buff = sR1cs.slice(r1csPos, r1csPos+4);
                r1csPos += 4;
                const buffV = new DataView(buff.buffer);
                return buffV.getUint32(0, true);
            }

            function r1cs_readCoef() {
                const res = Fr.fromRprLE(sR1cs.slice(r1csPos, r1csPos+curve.Fr.n8));
                r1csPos += curve.Fr.n8;
                return res;
            }

            function r1cs_readCoefs() {
                const coefs = [];
                const res = {
                    k: curve.Fr.zero
                };
                const nA = r1cs_readULE32();
                for (let i=0; i<nA; i++) {
                    const s = r1cs_readULE32();
                    const coefp = r1cs_readCoef();

                    if (s==0) {
                        res.k = coefp;
                    } else {
                        coefs.push([s, coefp]);
                    }
                }

                const resCoef = reduceCoef(coefs);
                res.s = resCoef[0];
                res.coef = resCoef[1];
                return res;
            }

            function reduceCoef(coefs) {
                if (coefs.length == 0) {
                    return [0, curve.Fr.zero];
                }
                if (coefs.length == 1) {
                    return coefs[0];
                }
                const arr1 = coefs.slice(0, coefs.length >> 1);
                const arr2 = coefs.slice(coefs.length >> 1);
                const coef1 = reduceCoef(arr1);
                const coef2 = reduceCoef(arr2);

                const sl = coef1[0];
                const sr = coef2[0];
                const so = plonkNVars++;
                const qm = curve.Fr.zero;
                const ql = Fr.neg(coef1[1]);
                const qr = Fr.neg(coef2[1]);
                const qo = curve.Fr.one;
                const qc = curve.Fr.zero;

                plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);

                plonkAdditions.push([sl, sr, coef1[1], coef2[1]]);

                return [so, curve.Fr.one];
            }

            for (let s = 1; s <= nPublic ; s++) {
                const sl = s;
                const sr = 0;
                const so = 0;
                const qm = curve.Fr.zero;
                const ql = curve.Fr.one;
                const qr = curve.Fr.zero;
                const qo = curve.Fr.zero;
                const qc = curve.Fr.zero;

                plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);
            }

            for (let c=0; c<r1cs.nConstraints; c++) {
                if ((logger)&&(c%10000 == 0)) logger.debug(`processing constraints: ${c}/${r1cs.nConstraints}`);
                const A = r1cs_readCoefs();
                const B = r1cs_readCoefs();
                const C = r1cs_readCoefs();

                const sl = A.s;
                const sr = B.s;
                const so = C.s;
                const qm = curve.Fr.mul(A.coef, B.coef);
                const ql = curve.Fr.mul(A.coef, B.k);
                const qr = curve.Fr.mul(A.k, B.coef);
                const qo = curve.Fr.neg(C.coef);
                const qc = curve.Fr.sub(curve.Fr.mul(A.k, B.k) , C.k);

                plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);
            }

        }

        async function writeWitnessMap(sectionNum, posConstraint, name) {
            await startWriteSection(fdZKey, sectionNum);
            for (let i=0; i<plonkConstraints.length; i++) {
                await fdZKey.writeULE32(plonkConstraints[i][posConstraint]);
                if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkConstraints.length}`);
            }
            await endWriteSection(fdZKey);
        }

        async function writeQMap(sectionNum, posConstraint, name) {
            let Q = new BigBuffer(domainSize*n8r);
            for (let i=0; i<plonkConstraints.length; i++) {
                Q.set(plonkConstraints[i][posConstraint], i*n8r);
                if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkConstraints.length}`);
            }
            await startWriteSection(fdZKey, sectionNum);
            await writeP4(Q);
            await endWriteSection(fdZKey);
            Q = await Fr.batchFromMontgomery(Q);
            vk[name]= await curve.G1.multiExpAffine(LPoints, Q, logger, "multiexp "+name);
        }

        async function writeP4(buff) {
            const q = await Fr.ifft(buff);
            const q4 = new BigBuffer(domainSize*n8r*4);
            q4.set(q, 0);
            const Q4 = await Fr.fft(q4);
            await fdZKey.write(q);
            await fdZKey.write(Q4);
        }

        async function writeAdditions(sectionNum, name) {
            await startWriteSection(fdZKey, sectionNum);
            const buffOut = new Uint8Array((2*4+2*n8r));
            const buffOutV = new DataView(buffOut.buffer);
            for (let i=0; i<plonkAdditions.length; i++) {
                const addition=plonkAdditions[i];
                let o=0;
                buffOutV.setUint32(o, addition[0], true); o+=4;
                buffOutV.setUint32(o, addition[1], true); o+=4;
                // The value is storen in  Montgomery. stored = v*R
                // so when montgomery multiplicated by the witness  it result = v*R*w/R = v*w 
                buffOut.set(addition[2], o); o+= n8r;
                buffOut.set(addition[3], o); o+= n8r;
                await fdZKey.write(buffOut);
                if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkAdditions.length}`);
            }
            await endWriteSection(fdZKey);
        }

        async function writeSigma(sectionNum, name) {
            const sigma = new BigBuffer(n8r*domainSize*3);
            const lastAparence =  new BigArray(plonkNVars);
            const firstPos = new BigArray(plonkNVars);
            let w = Fr.one;
            for (let i=0; i<domainSize;i++) {
                if (i<plonkConstraints.length) {
                    buildSigma(plonkConstraints[i][0], i);
                    buildSigma(plonkConstraints[i][1], domainSize + i);
                    buildSigma(plonkConstraints[i][2], domainSize*2 + i);
                } else {
                    buildSigma(0, i);
                    buildSigma(0, domainSize + i);
                    buildSigma(0, domainSize*2 + i);
                }
                w = Fr.mul(w, Fr.w[cirPower]);
                if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name} phase1: ${i}/${plonkConstraints.length}`);
            }
            for (let s=0; s<plonkNVars; s++) {
                if (typeof firstPos[s] !== "undefined") {
                    sigma.set(lastAparence[s], firstPos[s]*n8r);
                } else {
                    // throw new Error("Variable not used");
                    console.log("Variable not used");
                }
                if ((logger)&&(s%1000000 == 0)) logger.debug(`writing ${name} phase2: ${s}/${plonkNVars}`);
            }

            if (globalThis.gc) {globalThis.gc();}
            await startWriteSection(fdZKey, sectionNum);
            let S1 = sigma.slice(0, domainSize*n8r);
            await writeP4(S1);
            if (globalThis.gc) {globalThis.gc();}
            let S2 = sigma.slice(domainSize*n8r, domainSize*n8r*2);
            await writeP4(S2);
            if (globalThis.gc) {globalThis.gc();}
            let S3 = sigma.slice(domainSize*n8r*2, domainSize*n8r*3);
            await writeP4(S3);
            if (globalThis.gc) {globalThis.gc();}
            await endWriteSection(fdZKey);

            S1 = await Fr.batchFromMontgomery(S1);
            S2 = await Fr.batchFromMontgomery(S2);
            S3 = await Fr.batchFromMontgomery(S3);

            vk.S1= await curve.G1.multiExpAffine(LPoints, S1, logger, "multiexp S1");
            if (globalThis.gc) {globalThis.gc();}
            vk.S2= await curve.G1.multiExpAffine(LPoints, S2, logger, "multiexp S2");
            if (globalThis.gc) {globalThis.gc();}
            vk.S3= await curve.G1.multiExpAffine(LPoints, S3, logger, "multiexp S3");
            if (globalThis.gc) {globalThis.gc();}

            function buildSigma(s, p) {
                if (typeof lastAparence[s] === "undefined") {
                    firstPos[s] = p;
                } else {
                    sigma.set(lastAparence[s], p*n8r);
                }
                let v;
                if (p<domainSize) {
                    v = w;
                } else if (p<2*domainSize) {
                    v = Fr.mul(w, k1);
                } else {
                    v = Fr.mul(w, k2);
                }
                lastAparence[s]=v;
            }
        }

        async function writeLs(sectionNum, name) {
            await startWriteSection(fdZKey, sectionNum);
            const l=Math.max(nPublic, 1);
            for (let i=0; i<l; i++) {
                let buff = new BigBuffer(domainSize*n8r);
                buff.set(Fr.one, i*n8r);
                await writeP4(buff);
                if (logger) logger.debug(`writing ${name} ${i}/${l}`);
            }
            await endWriteSection(fdZKey);
        }

        async function writeHeaders() {

            // Write the header
            ///////////
            await startWriteSection(fdZKey, 1);
            await fdZKey.writeULE32(2); // Plonk
            await endWriteSection(fdZKey);

            // Write the Plonk header section
            ///////////

            await startWriteSection(fdZKey, 2);
            const primeQ = curve.q;
            const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;

            const primeR = curve.r;
            const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;

            await fdZKey.writeULE32(n8q);
            await writeBigInt(fdZKey, primeQ, n8q);
            await fdZKey.writeULE32(n8r);
            await writeBigInt(fdZKey, primeR, n8r);
            await fdZKey.writeULE32(plonkNVars);                         // Total number of bars
            await fdZKey.writeULE32(nPublic);                       // Total number of public vars (not including ONE)
            await fdZKey.writeULE32(domainSize);                  // domainSize
            await fdZKey.writeULE32(plonkAdditions.length);                  // domainSize
            await fdZKey.writeULE32(plonkConstraints.length); 

            await fdZKey.write(k1);
            await fdZKey.write(k2);

            await fdZKey.write(G1.toAffine(vk.Qm));
            await fdZKey.write(G1.toAffine(vk.Ql));
            await fdZKey.write(G1.toAffine(vk.Qr));
            await fdZKey.write(G1.toAffine(vk.Qo));
            await fdZKey.write(G1.toAffine(vk.Qc));

            await fdZKey.write(G1.toAffine(vk.S1));
            await fdZKey.write(G1.toAffine(vk.S2));
            await fdZKey.write(G1.toAffine(vk.S3));

            let bX_2;
            bX_2 = await fdPTau.read(sG2, sectionsPTau[3][0].p + sG2);
            await fdZKey.write(bX_2);

            await endWriteSection(fdZKey);
        }

        function getK1K2() {
            let k1 = Fr.two;
            while (isIncluded(k1, [], cirPower)) Fr.add(k1, Fr.one);
            let k2 = Fr.add(k1, Fr.one);
            while (isIncluded(k2, [k1], cirPower)) Fr.add(k2, Fr.one);
            return [k1, k2];


            function isIncluded(k, kArr, pow) {
                const domainSize= 2**pow;
                let w = Fr.one;
                for (let i=0; i<domainSize; i++) {
                    if (Fr.eq(k, w)) return true;
                    for (let j=0; j<kArr.length; j++) {
                        if (Fr.eq(k, Fr.mul(kArr[j], w))) return true;
                    }
                    w = Fr.mul(w, Fr.w[pow]);
                }
                return false;
            }
        }
    }

    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */

    var sha3 = createCommonjsModule(function (module) {
    /*jslint bitwise: true */
    (function () {

      var INPUT_ERROR = 'input is invalid type';
      var FINALIZE_ERROR = 'finalize already called';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
        0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
        2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
        2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
        2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
      var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
      };

      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }

      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createCshakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits, n, s) {
          return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
      };

      var createKmacOutputMethod = function (bits, padding, outputType) {
        return function (key, message, outputBits, s) {
          return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
      };

      var createOutputMethods = function (method, createMethod, bits, padding) {
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createMethod(bits, padding, type);
        }
        return method;
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };

      var createCshakeMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits, n, s) {
          if (!n && !s) {
            return methods['shake' + bits].create(outputBits);
          } else {
            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function (message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };

      var createKmacMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function (key, outputBits, s) {
          return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
        };
        method.update = function (key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };

      var algorithms = [
        { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
        { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
        { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + '_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== 'sha3') {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.encode = function (x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };

      Keccak.prototype.encodeString = function (str) {
        var notString, type = typeof str;
        if (type !== 'string') {
          if (type === 'object') {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i = 0; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 0x80) {
              bytes += 1;
            } else if (code < 0x800) {
              bytes += 2;
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes += 3;
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };

      Keccak.prototype.bytepad = function (strs, w) {
        var bytes = this.encode(w);
        for (var i = 0; i < strs.length; ++i) {
          bytes += this.encodeString(strs[i]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };

      Keccak.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
              HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
              HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
              HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
      }

      Kmac.prototype = new Keccak();

      Kmac.prototype.finalize = function () {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    /*
        Copyright 2021 0kims association.

        This file is part of snarkjs.

        snarkjs is a free software: you can redistribute it and/or
        modify it under the terms of the GNU General Public License as published by the
        Free Software Foundation, either version 3 of the License, or (at your option)
        any later version.

        snarkjs is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details.

        You should have received a copy of the GNU General Public License along with
        snarkjs. If not, see <https://www.gnu.org/licenses/>.
    */
    const {stringifyBigInts} = utils;
    const { keccak256: keccak256$1 } = sha3;

    async function plonk16Prove(zkeyFileName, witnessFileName, logger) {
        const {fd: fdWtns, sections: sectionsWtns} = await readBinFile(witnessFileName, "wtns", 2);

        const wtns = await readHeader(fdWtns, sectionsWtns);

        const {fd: fdZKey, sections: sectionsZKey} = await readBinFile(zkeyFileName, "zkey", 2);

        const zkey = await readHeader$1(fdZKey, sectionsZKey);
        if (zkey.protocol != "plonk") {
            throw new Error("zkey file is not plonk");
        }

        if (!Scalar.eq(zkey.r,  wtns.q)) {
            throw new Error("Curve of the witness does not match the curve of the proving key");
        }

        if (wtns.nWitness != zkey.nVars -zkey.nAdditions) {
            throw new Error(`Invalid witness length. Circuit: ${zkey.nVars}, witness: ${wtns.nWitness}, ${zkey.nAdditions}`);
        }

        const curve = await getCurveFromQ(zkey.q);
        const Fr = curve.Fr;
        const G1 = curve.G1;
        const n8r = curve.Fr.n8;

        if (logger) logger.debug("Reading Wtns");
        const buffWitness = await readSection(fdWtns, sectionsWtns, 2);
        // First element in plonk is not used and can be any value. (But always the same).
        // We set it to zero to go faster in the exponentiations.
        buffWitness.set(Fr.zero, 0);
        const buffInternalWitness = new BigBuffer(n8r*zkey.nAdditions);

        await calculateAdditions();

        let A,B,C,Z;
        let A4, B4, C4, Z4;
        let pol_a,pol_b,pol_c, pol_z, pol_t, pol_r;
        let proof = {};

        const sigmaBuff = new BigBuffer(zkey.domainSize*n8r*4*3);
        let o = sectionsZKey[12][0].p + zkey.domainSize*n8r;
        await fdZKey.readToBuffer(sigmaBuff, 0 , zkey.domainSize*n8r*4, o);
        o += zkey.domainSize*n8r*5;
        await fdZKey.readToBuffer(sigmaBuff, zkey.domainSize*n8r*4 , zkey.domainSize*n8r*4, o);
        o += zkey.domainSize*n8r*5;
        await fdZKey.readToBuffer(sigmaBuff, zkey.domainSize*n8r*8 , zkey.domainSize*n8r*4, o);

        const pol_s1 = new BigBuffer(zkey.domainSize*n8r);
        await fdZKey.readToBuffer(pol_s1, 0 , zkey.domainSize*n8r, sectionsZKey[12][0].p);

        const pol_s2 = new BigBuffer(zkey.domainSize*n8r);
        await fdZKey.readToBuffer(pol_s2, 0 , zkey.domainSize*n8r, sectionsZKey[12][0].p + 5*zkey.domainSize*n8r);

        const PTau = await readSection(fdZKey, sectionsZKey, 14);


        const ch = {};

        await round1();
        await round2();
        await round3();
        await round4();
        await round5();


        ///////////////////////
        // Final adjustments //
        ///////////////////////

        proof.protocol = "plonk";
        proof.curve = curve.name;

        await fdZKey.close();
        await fdWtns.close();

        let publicSignals = [];

        for (let i=1; i<= zkey.nPublic; i++) {
            const pub = buffWitness.slice(i*Fr.n8, i*Fr.n8+Fr.n8);
            publicSignals.push(Scalar.fromRprLE(pub));
        }

        proof.A = G1.toObject(proof.A);
        proof.B = G1.toObject(proof.B);
        proof.C = G1.toObject(proof.C);
        proof.Z = G1.toObject(proof.Z);

        proof.T1 = G1.toObject(proof.T1);
        proof.T2 = G1.toObject(proof.T2);
        proof.T3 = G1.toObject(proof.T3);

        proof.eval_a = Fr.toObject(proof.eval_a);
        proof.eval_b = Fr.toObject(proof.eval_b);
        proof.eval_c = Fr.toObject(proof.eval_c);
        proof.eval_s1 = Fr.toObject(proof.eval_s1);
        proof.eval_s2 = Fr.toObject(proof.eval_s2);
        proof.eval_zw = Fr.toObject(proof.eval_zw);
        proof.eval_t = Fr.toObject(proof.eval_t);
        proof.eval_r = Fr.toObject(proof.eval_r);

        proof.Wxi = G1.toObject(proof.Wxi);
        proof.Wxiw = G1.toObject(proof.Wxiw);

        delete proof.eval_t;

        proof = stringifyBigInts(proof);
        publicSignals = stringifyBigInts(publicSignals);

        return {proof, publicSignals};

        async function calculateAdditions() {
            const additionsBuff = await readSection(fdZKey, sectionsZKey, 3);

            const sSum = 8+curve.Fr.n8*2;

            for (let i=0; i<zkey.nAdditions; i++) {
                const ai= readUInt32(additionsBuff, i*sSum);
                const bi= readUInt32(additionsBuff, i*sSum+4);
                const ac= additionsBuff.slice(i*sSum+8, i*sSum+8+n8r);
                const bc= additionsBuff.slice(i*sSum+8+n8r, i*sSum+8+n8r*2);
                const aw= getWitness(ai);
                const bw= getWitness(bi);

                const r = curve.Fr.add(
                    curve.Fr.mul(ac, aw),
                    curve.Fr.mul(bc, bw)
                );
                buffInternalWitness.set(r, n8r*i);
            }

        }

        async function buildABC() {
            let A = new BigBuffer(zkey.domainSize * n8r);
            let B = new BigBuffer(zkey.domainSize * n8r);
            let C = new BigBuffer(zkey.domainSize * n8r);

            const aMap = await readSection(fdZKey, sectionsZKey, 4);
            const bMap = await readSection(fdZKey, sectionsZKey, 5);
            const cMap = await readSection(fdZKey, sectionsZKey, 6);

            for (let i=0; i<zkey.nConstrains; i++) {
                const iA = readUInt32(aMap, i*4);
                A.set(getWitness(iA), i*n8r);
                const iB = readUInt32(bMap, i*4);
                B.set(getWitness(iB), i*n8r);
                const iC = readUInt32(cMap, i*4);
                C.set(getWitness(iC), i*n8r);
            }

            A = await Fr.batchToMontgomery(A);
            B = await Fr.batchToMontgomery(B);
            C = await Fr.batchToMontgomery(C);

            return [A,B,C];
        }

        function readUInt32(b, o) {
            const buff = b.slice(o, o+4);
            const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
            return buffV.getUint32(0, true);
        }

        function getWitness(idx) {
            if (idx < zkey.nVars-zkey.nAdditions) {
                return buffWitness.slice(idx*n8r, idx*n8r+n8r);
            } else if (idx < zkey.nVars) {
                return buffInternalWitness.slice((idx - (zkey.nVars-zkey.nAdditions))*n8r, (idx-(zkey.nVars-zkey.nAdditions))*n8r + n8r);
            } else {
                return curve.Fr.zero;
            }
        }

        async function round1() {
            ch.b = [];
            for (let i=1; i<=9; i++) {
                ch.b[i] = curve.Fr.random();
            }
        
            [A, B, C] = await buildABC();

            [pol_a, A4] = await to4T(A, [ch.b[2], ch.b[1]]);
            [pol_b, B4] = await to4T(B, [ch.b[4], ch.b[3]]);
            [pol_c, C4] = await to4T(C, [ch.b[6], ch.b[5]]);

                    
            proof.A = await expTau(pol_a, "multiexp A");
            proof.B = await expTau(pol_b, "multiexp B");
            proof.C = await expTau(pol_c, "multiexp C");
        }

        async function round2() {

            const transcript1 = new Uint8Array(zkey.nPublic*n8r + G1.F.n8*2*3);
            for (let i=0; i<zkey.nPublic; i++) {
                Fr.toRprBE(transcript1, i*n8r, A.slice((i)*n8r, (i+1)*n8r));
            }
            G1.toRprUncompressed(transcript1, zkey.nPublic*n8r + 0, proof.A);
            G1.toRprUncompressed(transcript1, zkey.nPublic*n8r + G1.F.n8*2, proof.B);
            G1.toRprUncompressed(transcript1, zkey.nPublic*n8r + G1.F.n8*4, proof.C);

            ch.beta = hashToFr(transcript1);
            if (logger) logger.debug("beta: " + Fr.toString(ch.beta));
        
            const transcript2 = new Uint8Array(n8r);
            Fr.toRprBE(transcript2, 0, ch.beta);
            ch.gamma = hashToFr(transcript2);
            if (logger) logger.debug("gamma: " + Fr.toString(ch.gamma));
        
            let numArr = new BigBuffer(Fr.n8*zkey.domainSize);
            let denArr = new BigBuffer(Fr.n8*zkey.domainSize);

            numArr.set(Fr.one, 0);
            denArr.set(Fr.one, 0);

            let w = Fr.one;
            for (let i=0; i<zkey.domainSize; i++) {
                let n1 = A.slice(i*n8r, (i+1)*n8r);
                n1 = Fr.add( n1, Fr.mul(ch.beta, w) );
                n1 = Fr.add( n1, ch.gamma );

                let n2 = B.slice(i*n8r, (i+1)*n8r);
                n2 = Fr.add( n2, Fr.mul(zkey.k1, Fr.mul(ch.beta, w) ));
                n2 = Fr.add( n2, ch.gamma );

                let n3 = C.slice(i*n8r, (i+1)*n8r);
                n3 = Fr.add( n3, Fr.mul(zkey.k2, Fr.mul(ch.beta, w) ));
                n3 = Fr.add( n3, ch.gamma );

                const num = Fr.mul(n1, Fr.mul(n2, n3));

                let d1 = A.slice(i*n8r, (i+1)*n8r);
                d1 = Fr.add(d1, Fr.mul( sigmaBuff.slice(i*n8r*4, i*n8r*4 + n8r) , ch.beta));
                d1 = Fr.add(d1, ch.gamma);

                let d2 = B.slice(i*n8r, (i+1)*n8r);
                d2 = Fr.add(d2, Fr.mul( sigmaBuff.slice((zkey.domainSize + i)*4*n8r, (zkey.domainSize + i)*4*n8r+n8r) , ch.beta));
                d2 = Fr.add(d2, ch.gamma);

                let d3 = C.slice(i*n8r, (i+1)*n8r);
                d3 = Fr.add(d3, Fr.mul( sigmaBuff.slice((zkey.domainSize*2 + i)*4*n8r, (zkey.domainSize*2 + i)*4*n8r + n8r) , ch.beta));
                d3 = Fr.add(d3, ch.gamma);

                const den = Fr.mul(d1, Fr.mul(d2, d3));

                numArr.set(  
                    Fr.mul( 
                        numArr.slice(i*n8r,(i+1)*n8r) , 
                        num
                    ),
                    ((i+1)%zkey.domainSize)*n8r
                );

                denArr.set(  
                    Fr.mul( 
                        denArr.slice(i*n8r,(i+1)*n8r) , 
                        den
                    ),
                    ((i+1)%zkey.domainSize)*n8r
                );

                w = Fr.mul(w, Fr.w[zkey.power]);
            }

            denArr = await Fr.batchInverse(denArr);

            // TODO: Do it in assembly and in parallel
            for (let i=0; i<zkey.domainSize; i++) {
                numArr.set(   Fr.mul( numArr.slice(i*n8r, (i+1)*n8r), denArr.slice(i*n8r, (i+1)*n8r) )      ,i*n8r);
            }

            if (!Fr.eq(numArr.slice(0, n8r), Fr.one)) {
                throw new Error("Copy constraints does not match");
            }

            Z = numArr;

            [pol_z, Z4] = await to4T(Z, [ch.b[9], ch.b[8], ch.b[7]]);

            proof.Z = await expTau( pol_z, "multiexp Z");
        }

        async function round3() {

            /*
            async function checkDegree(P) {
                const p = await curve.Fr.ifft(P);
                let deg = (P.byteLength/n8r)-1;
                while ((deg>0)&&(Fr.isZero(p.slice(deg*n8r, deg*n8r+n8r)))) deg--;
                return deg;
            }

            function printPol(P) {
                const n=(P.byteLength/n8r);
                console.log("[");
                for (let i=0; i<n; i++) {
                    console.log(Fr.toString(P.slice(i*n8r, i*n8r+n8r)));
                }
                console.log("]");
            }
            */

            if (logger) logger.debug("phse3: Reading QM4");    
            const QM4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QM4, 0 , zkey.domainSize*n8r*4, sectionsZKey[7][0].p + zkey.domainSize*n8r);

            if (logger) logger.debug("phse3: Reading QL4");    
            const QL4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QL4, 0 , zkey.domainSize*n8r*4, sectionsZKey[8][0].p + zkey.domainSize*n8r);

            if (logger) logger.debug("phse3: Reading QR4");    
            const QR4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QR4, 0 , zkey.domainSize*n8r*4, sectionsZKey[9][0].p + zkey.domainSize*n8r);

            if (logger) logger.debug("phse3: Reading QO4");    
            const QO4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QO4, 0 , zkey.domainSize*n8r*4, sectionsZKey[10][0].p + zkey.domainSize*n8r);

            if (logger) logger.debug("phse3: Reading QC4");    
            const QC4 = new BigBuffer(zkey.domainSize*4*n8r);
            await fdZKey.readToBuffer(QC4, 0 , zkey.domainSize*n8r*4, sectionsZKey[11][0].p + zkey.domainSize*n8r);

            const lPols = await readSection(fdZKey, sectionsZKey, 13);

            const transcript3 = new Uint8Array(G1.F.n8*2);
            G1.toRprUncompressed(transcript3, 0, proof.Z);

            ch.alpha = hashToFr(transcript3);

            if (logger) logger.debug("alpha: " + Fr.toString(ch.alpha));    


            const Z1 = [
                Fr.zero,
                Fr.add(Fr.e(-1), Fr.w[2]),
                Fr.e(-2),
                Fr.sub(Fr.e(-1), Fr.w[2]),
            ];

            const Z2 = [
                Fr.zero,
                Fr.add(Fr.zero, Fr.mul(Fr.e(-2), Fr.w[2])),
                Fr.e(4),
                Fr.sub(Fr.zero, Fr.mul(Fr.e(-2), Fr.w[2])),
            ];

            const Z3 = [
                Fr.zero,
                Fr.add(Fr.e(2), Fr.mul(Fr.e(2), Fr.w[2])),
                Fr.e(-8),
                Fr.sub(Fr.e(2), Fr.mul(Fr.e(2), Fr.w[2])),
            ];

            const T = new BigBuffer(zkey.domainSize*4*n8r);
            const Tz = new BigBuffer(zkey.domainSize*4*n8r);

            let w = Fr.one;
            for (let i=0; i<zkey.domainSize*4; i++) {
                if ((i%4096 == 0)&&(logger)) logger.debug(`calculating t ${i}/${zkey.domainSize*4}`);

                const a = A4.slice(i*n8r, i*n8r+n8r);
                const b = B4.slice(i*n8r, i*n8r+n8r);
                const c = C4.slice(i*n8r, i*n8r+n8r);
                const z = Z4.slice(i*n8r, i*n8r+n8r);
                const zw = Z4.slice(((i+zkey.domainSize*4+4)%(zkey.domainSize*4)) *n8r, ((i+zkey.domainSize*4+4)%(zkey.domainSize*4)) *n8r +n8r);
                const qm = QM4.slice(i*n8r, i*n8r+n8r);
                const ql = QL4.slice(i*n8r, i*n8r+n8r);
                const qr = QR4.slice(i*n8r, i*n8r+n8r);
                const qo = QO4.slice(i*n8r, i*n8r+n8r);
                const qc = QC4.slice(i*n8r, i*n8r+n8r);
                const s1 = sigmaBuff.slice(i*n8r, i*n8r+n8r);
                const s2 = sigmaBuff.slice((i+zkey.domainSize*4)*n8r, (i+zkey.domainSize*4)*n8r+n8r);
                const s3 = sigmaBuff.slice((i+zkey.domainSize*8)*n8r, (i+zkey.domainSize*8)*n8r+n8r);
                const ap = Fr.add(ch.b[2], Fr.mul(ch.b[1], w));
                const bp = Fr.add(ch.b[4], Fr.mul(ch.b[3], w));
                const cp = Fr.add(ch.b[6], Fr.mul(ch.b[5], w));
                const w2 = Fr.square(w);
                const zp = Fr.add(Fr.add(Fr.mul(ch.b[7], w2), Fr.mul(ch.b[8], w)), ch.b[9]);
                const wW = Fr.mul(w, Fr.w[zkey.power]);
                const wW2 = Fr.square(wW);
                const zWp = Fr.add(Fr.add(Fr.mul(ch.b[7], wW2), Fr.mul(ch.b[8], wW)), ch.b[9]);

                let pl = Fr.zero;
                for (let j=0; j<zkey.nPublic; j++) {
                    pl = Fr.sub(pl, Fr.mul( 
                        lPols.slice( (j*5*zkey.domainSize+ zkey.domainSize+ i)*n8r, (j*5*zkey.domainSize+ zkey.domainSize + i+1)*n8r),
                        A.slice(j*n8r, (j+1)*n8r)
                    ));
                }

                let [e1, e1z] = mul2(a, b, ap, bp, i%4);
                e1 = Fr.mul(e1, qm);
                e1z = Fr.mul(e1z, qm);

                e1 = Fr.add(e1, Fr.mul(a, ql));
                e1z = Fr.add(e1z, Fr.mul(ap, ql));

                e1 = Fr.add(e1, Fr.mul(b, qr));
                e1z = Fr.add(e1z, Fr.mul(bp, qr));

                e1 = Fr.add(e1, Fr.mul(c, qo));
                e1z = Fr.add(e1z, Fr.mul(cp, qo));

                e1 = Fr.add(e1, pl);
                e1 = Fr.add(e1, qc);

                const betaw = Fr.mul(ch.beta, w);
                let e2a =a;
                e2a = Fr.add(e2a, betaw);
                e2a = Fr.add(e2a, ch.gamma);

                let e2b =b;
                e2b = Fr.add(e2b, Fr.mul(betaw, zkey.k1));
                e2b = Fr.add(e2b, ch.gamma);

                let e2c =c;
                e2c = Fr.add(e2c, Fr.mul(betaw, zkey.k2));
                e2c = Fr.add(e2c, ch.gamma);

                let e2d = z;

                let [e2, e2z] = mul4(e2a, e2b, e2c, e2d, ap, bp, cp, zp, i%4);
                e2 = Fr.mul(e2, ch.alpha);
                e2z = Fr.mul(e2z, ch.alpha);

                let e3a = a;
                e3a = Fr.add(e3a, Fr.mul(ch.beta, s1));
                e3a = Fr.add(e3a, ch.gamma);

                let e3b = b;
                e3b = Fr.add(e3b, Fr.mul(ch.beta,s2));
                e3b = Fr.add(e3b, ch.gamma);

                let e3c = c;
                e3c = Fr.add(e3c, Fr.mul(ch.beta,s3));
                e3c = Fr.add(e3c, ch.gamma);

                let e3d = zw;
                let [e3, e3z] = mul4(e3a, e3b, e3c, e3d, ap, bp, cp, zWp, i%4);

                e3 = Fr.mul(e3, ch.alpha);
                e3z = Fr.mul(e3z, ch.alpha);

                let e4 = Fr.sub(z, Fr.one);
                e4 = Fr.mul(e4, lPols.slice( (zkey.domainSize + i)*n8r, (zkey.domainSize+i+1)*n8r));
                e4 = Fr.mul(e4, Fr.mul(ch.alpha, ch.alpha));

                let e4z = Fr.mul(zp, lPols.slice( (zkey.domainSize + i)*n8r, (zkey.domainSize+i+1)*n8r));
                e4z = Fr.mul(e4z, Fr.mul(ch.alpha, ch.alpha));

                let e = Fr.add(Fr.sub(Fr.add(e1, e2), e3), e4);
                let ez = Fr.add(Fr.sub(Fr.add(e1z, e2z), e3z), e4z);

                T.set(e, i*n8r);
                Tz.set(ez, i*n8r);

                w = Fr.mul(w, Fr.w[zkey.power+2]);
            }

            if (logger) logger.debug("ifft T");    
            let t = await Fr.ifft(T);

            if (logger) logger.debug("dividing T/Z");    
            for (let i=0; i<zkey.domainSize; i++) {
                t.set(Fr.neg(t.slice(i*n8r, i*n8r+n8r)), i*n8r);
            }

            for (let i=zkey.domainSize; i<zkey.domainSize*4; i++) {
                const a = Fr.sub(
                    t.slice((i-zkey.domainSize)*n8r, (i-zkey.domainSize)*n8r + n8r),
                    t.slice(i*n8r, i*n8r+n8r)
                );
                t.set(a, i*n8r);
                if (i > (zkey.domainSize*3 -4) ) {
                    if (!Fr.isZero(a)) {
                        throw new Error("T Polynomial is not divisible");
                    }
                }
            }

            if (logger) logger.debug("ifft Tz");    
            const tz = await Fr.ifft(Tz);
            for (let i=0; i<zkey.domainSize*4; i++) {
                const a = tz.slice(i*n8r, (i+1)*n8r);
                if (i > (zkey.domainSize*3 +5) ) {
                    if (!Fr.isZero(a)) {
                        throw new Error("Tz Polynomial is not well calculated");
                    }
                } else {
                    t.set(  
                        Fr.add(
                            t.slice(i*n8r, (i+1)*n8r),
                            a
                        ),
                        i*n8r
                    );
                }
            }

            pol_t = t.slice(0, (zkey.domainSize*3+6)*n8r);

            proof.T1 = await expTau( t.slice(0, zkey.domainSize*n8r) , "multiexp T1");
            proof.T2 = await expTau( t.slice(zkey.domainSize*n8r, zkey.domainSize*2*n8r) , "multiexp T2");
            proof.T3 = await expTau( t.slice(zkey.domainSize*2*n8r, (zkey.domainSize*3+6)*n8r) , "multiexp T3");

            function mul2(a,b, ap, bp,  p) {
                let r, rz;

                
                const a_b = Fr.mul(a,b);
                const a_bp = Fr.mul(a,bp);
                const ap_b = Fr.mul(ap,b);
                const ap_bp = Fr.mul(ap,bp);

                r = a_b;

                let a0 = Fr.add(a_bp, ap_b);

                let a1 = ap_bp;

                rz = a0;
                if (p) {
                    rz = Fr.add(rz, Fr.mul(Z1[p], a1));
                }

                return [r, rz];
            }

            function mul4(a,b,c,d, ap, bp, cp, dp, p) {
                let r, rz;

                
                const a_b = Fr.mul(a,b);
                const a_bp = Fr.mul(a,bp);
                const ap_b = Fr.mul(ap,b);
                const ap_bp = Fr.mul(ap,bp);

                const c_d = Fr.mul(c,d);
                const c_dp = Fr.mul(c,dp);
                const cp_d = Fr.mul(cp,d);
                const cp_dp = Fr.mul(cp,dp);

                r = Fr.mul(a_b, c_d);

                let a0 = Fr.mul(ap_b, c_d);
                a0 = Fr.add(a0, Fr.mul(a_bp, c_d));
                a0 = Fr.add(a0, Fr.mul(a_b, cp_d));
                a0 = Fr.add(a0, Fr.mul(a_b, c_dp));

                let a1 = Fr.mul(ap_bp, c_d);
                a1 = Fr.add(a1, Fr.mul(ap_b, cp_d));
                a1 = Fr.add(a1, Fr.mul(ap_b, c_dp));
                a1 = Fr.add(a1, Fr.mul(a_bp, cp_d));
                a1 = Fr.add(a1, Fr.mul(a_bp, c_dp));
                a1 = Fr.add(a1, Fr.mul(a_b, cp_dp));

                let a2 = Fr.mul(a_bp, cp_dp);
                a2 = Fr.add(a2, Fr.mul(ap_b, cp_dp));
                a2 = Fr.add(a2, Fr.mul(ap_bp, c_dp));
                a2 = Fr.add(a2, Fr.mul(ap_bp, cp_d));

                let a3 = Fr.mul(ap_bp, cp_dp);

                rz = a0;
                if (p) {
                    rz = Fr.add(rz, Fr.mul(Z1[p], a1));
                    rz = Fr.add(rz, Fr.mul(Z2[p], a2));
                    rz = Fr.add(rz, Fr.mul(Z3[p], a3));
                }

                return [r, rz];
            }
        }

        async function round4() {
            const pol_qm = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_qm, 0 , zkey.domainSize*n8r, sectionsZKey[7][0].p);

            const pol_ql = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_ql, 0 , zkey.domainSize*n8r, sectionsZKey[8][0].p);

            const pol_qr = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_qr, 0 , zkey.domainSize*n8r, sectionsZKey[9][0].p);

            const pol_qo = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_qo, 0 , zkey.domainSize*n8r, sectionsZKey[10][0].p);

            const pol_qc = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_qc, 0 , zkey.domainSize*n8r, sectionsZKey[11][0].p);

            const pol_s3 = new BigBuffer(zkey.domainSize*n8r);
            await fdZKey.readToBuffer(pol_s3, 0 , zkey.domainSize*n8r, sectionsZKey[12][0].p + 10*zkey.domainSize*n8r);

            const transcript4 = new Uint8Array(G1.F.n8*2*3);
            G1.toRprUncompressed(transcript4, 0, proof.T1);
            G1.toRprUncompressed(transcript4, G1.F.n8*2, proof.T2);
            G1.toRprUncompressed(transcript4, G1.F.n8*4, proof.T3);
            ch.xi = hashToFr(transcript4);

            if (logger) logger.debug("xi: " + Fr.toString(ch.xi));    

            proof.eval_a = evalPol(pol_a, ch.xi);
            proof.eval_b = evalPol(pol_b, ch.xi);
            proof.eval_c = evalPol(pol_c, ch.xi);
            proof.eval_s1 = evalPol(pol_s1, ch.xi);
            proof.eval_s2 = evalPol(pol_s2, ch.xi);
            proof.eval_t = evalPol(pol_t, ch.xi);
            proof.eval_zw = evalPol(pol_z, Fr.mul(ch.xi, Fr.w[zkey.power]));

            const coef_ab = Fr.mul(proof.eval_a, proof.eval_b);
            
            let e2a = proof.eval_a;
            const betaxi = Fr.mul(ch.beta, ch.xi);
            e2a = Fr.add( e2a, betaxi);
            e2a = Fr.add( e2a, ch.gamma);

            let e2b = proof.eval_b;
            e2b = Fr.add( e2b, Fr.mul(betaxi, zkey.k1));
            e2b = Fr.add( e2b, ch.gamma);

            let e2c = proof.eval_c;
            e2c = Fr.add( e2c, Fr.mul(betaxi, zkey.k2));
            e2c = Fr.add( e2c, ch.gamma);

            const e2 = Fr.mul(Fr.mul(Fr.mul(e2a, e2b), e2c), ch.alpha);

            let e3a = proof.eval_a;
            e3a = Fr.add( e3a, Fr.mul(ch.beta, proof.eval_s1));
            e3a = Fr.add( e3a, ch.gamma);

            let e3b = proof.eval_b;
            e3b = Fr.add( e3b, Fr.mul(ch.beta, proof.eval_s2));
            e3b = Fr.add( e3b, ch.gamma);

            let e3 = Fr.mul(e3a, e3b);
            e3 = Fr.mul(e3, ch.beta);
            e3 = Fr.mul(e3, proof.eval_zw);
            e3 = Fr.mul(e3, ch.alpha);

            ch.xim= ch.xi;
            for (let i=0; i<zkey.power; i++) ch.xim = Fr.mul(ch.xim, ch.xim);
            const eval_l1 = Fr.div(
                Fr.sub(ch.xim, Fr.one),
                Fr.mul(Fr.sub(ch.xi, Fr.one), Fr.e(zkey.domainSize))
            );

            const e4 = Fr.mul(eval_l1, Fr.mul(ch.alpha, ch.alpha));

            const coefs3 = e3;
            const coefz = Fr.add(e2, e4);

            pol_r = new BigBuffer((zkey.domainSize+3)*n8r);

            for (let i = 0; i<zkey.domainSize+3; i++) {
                let v = Fr.mul(coefz, pol_z.slice(i*n8r,(i+1)*n8r));
                if (i<zkey.domainSize) {
                    v = Fr.add(v, Fr.mul(coef_ab, pol_qm.slice(i*n8r,(i+1)*n8r)));
                    v = Fr.add(v, Fr.mul(proof.eval_a, pol_ql.slice(i*n8r,(i+1)*n8r)));
                    v = Fr.add(v, Fr.mul(proof.eval_b, pol_qr.slice(i*n8r,(i+1)*n8r)));
                    v = Fr.add(v, Fr.mul(proof.eval_c, pol_qo.slice(i*n8r,(i+1)*n8r)));
                    v = Fr.add(v, pol_qc.slice(i*n8r,(i+1)*n8r));
                    v = Fr.sub(v, Fr.mul(coefs3, pol_s3.slice(i*n8r,(i+1)*n8r)));
                }
                pol_r.set(v, i*n8r);
            }

            proof.eval_r = evalPol(pol_r, ch.xi);
        }

        async function round5() {
            const transcript5 = new Uint8Array(n8r*7);
            Fr.toRprBE(transcript5, 0, proof.eval_a);
            Fr.toRprBE(transcript5, n8r, proof.eval_b);
            Fr.toRprBE(transcript5, n8r*2, proof.eval_c);
            Fr.toRprBE(transcript5, n8r*3, proof.eval_s1);
            Fr.toRprBE(transcript5, n8r*4, proof.eval_s2);
            Fr.toRprBE(transcript5, n8r*5, proof.eval_zw);
            Fr.toRprBE(transcript5, n8r*6, proof.eval_r);
            ch.v = [];
            ch.v[1] = hashToFr(transcript5);
            if (logger) logger.debug("v: " + Fr.toString(ch.v[1]));    

            for (let i=2; i<=6; i++ ) ch.v[i] = Fr.mul(ch.v[i-1], ch.v[1]);
            
            let pol_wxi = new BigBuffer((zkey.domainSize+6)*n8r);

            const xi2m = Fr.mul(ch.xim, ch.xim);

            for (let i=0; i<zkey.domainSize+6; i++) {
                let w = Fr.zero;
                w = Fr.add(w, Fr.mul(xi2m,  pol_t.slice( (zkey.domainSize*2+i)*n8r, (zkey.domainSize*2+i+1)*n8r )));

                if (i<zkey.domainSize+3) {
                    w = Fr.add(w, Fr.mul(ch.v[1],  pol_r.slice(i*n8r, (i+1)*n8r)));
                }

                if (i<zkey.domainSize+2) {
                    w = Fr.add(w, Fr.mul(ch.v[2],  pol_a.slice(i*n8r, (i+1)*n8r)));
                    w = Fr.add(w, Fr.mul(ch.v[3],  pol_b.slice(i*n8r, (i+1)*n8r)));
                    w = Fr.add(w, Fr.mul(ch.v[4],  pol_c.slice(i*n8r, (i+1)*n8r)));
                }
                
                if (i<zkey.domainSize) {
                    w = Fr.add(w, pol_t.slice(i*n8r, (i+1)*n8r));
                    w = Fr.add(w, Fr.mul(ch.xim,  pol_t.slice( (zkey.domainSize+i)*n8r, (zkey.domainSize+i+1)*n8r )));
                    w = Fr.add(w, Fr.mul(ch.v[5],  pol_s1.slice(i*n8r, (i+1)*n8r)));
                    w = Fr.add(w, Fr.mul(ch.v[6],  pol_s2.slice(i*n8r, (i+1)*n8r)));
                }

                pol_wxi.set(w, i*n8r);
            }

            let w0 = pol_wxi.slice(0, n8r);
            w0 = Fr.sub(w0, proof.eval_t);
            w0 = Fr.sub(w0, Fr.mul(ch.v[1], proof.eval_r));
            w0 = Fr.sub(w0, Fr.mul(ch.v[2], proof.eval_a));
            w0 = Fr.sub(w0, Fr.mul(ch.v[3], proof.eval_b));
            w0 = Fr.sub(w0, Fr.mul(ch.v[4], proof.eval_c));
            w0 = Fr.sub(w0, Fr.mul(ch.v[5], proof.eval_s1));
            w0 = Fr.sub(w0, Fr.mul(ch.v[6], proof.eval_s2));
            pol_wxi.set(w0, 0);

            pol_wxi= divPol1(pol_wxi, ch.xi);

            proof.Wxi = await expTau(pol_wxi, "multiexp Wxi");

            let pol_wxiw = new BigBuffer((zkey.domainSize+3)*n8r);
            for (let i=0; i<zkey.domainSize+3; i++) {
                const w = pol_z.slice(i*n8r, (i+1)*n8r);
                pol_wxiw.set(w, i*n8r);
            }
            w0 = pol_wxiw.slice(0, n8r);
            w0 = Fr.sub(w0, proof.eval_zw);
            pol_wxiw.set(w0, 0);

            pol_wxiw= divPol1(pol_wxiw, Fr.mul(ch.xi, Fr.w[zkey.power]));
            proof.Wxiw = await expTau(pol_wxiw, "multiexp Wxiw");
        }

        function hashToFr(transcript) {
            const v = Scalar.fromRprBE(new Uint8Array(keccak256$1.arrayBuffer(transcript)));
            return Fr.e(v);
        }


        function evalPol(P, x) {
            const n = P.byteLength / n8r;
            if (n == 0) return Fr.zero;
            let res = P.slice((n-1)*n8r, n*n8r);
            for (let i=n-2; i>=0; i--) {
                res = Fr.add(Fr.mul(res, x), P.slice(i*n8r, (i+1)*n8r));
            }
            return res;
        }

        function divPol1(P, d) {
            const n = P.byteLength/n8r;
            const res = new BigBuffer(n*n8r);
            res.set(Fr.zero, (n-1) *n8r);
            res.set(P.slice((n-1)*n8r, n*n8r), (n-2)*n8r);
            for (let i=n-3; i>=0; i--) {
                res.set(
                    Fr.add(
                        P.slice((i+1)*n8r, (i+2)*n8r), 
                        Fr.mul(
                            d, 
                            res.slice((i+1)*n8r, (i+2)*n8r)
                        )
                    ),
                    i*n8r
                );
            }
            if (!Fr.eq(
                P.slice(0, n8r),
                Fr.mul(
                    Fr.neg(d),
                    res.slice(0, n8r)
                )
            )) {
                throw new Error("Polinomial does not divide");
            }
            return res;
        }

        async function expTau(b, name) {
            const n = b.byteLength/n8r;
            const PTauN = PTau.slice(0, n*curve.G1.F.n8*2);
            const bm = await curve.Fr.batchFromMontgomery(b);
            let res = await curve.G1.multiExpAffine(PTauN, bm, logger, name);
            res = curve.G1.toAffine(res);
            return res;
        }


        async function to4T(A, pz) {
            pz = pz || []; 
            let a = await Fr.ifft(A);
            const a4 = new BigBuffer(n8r*zkey.domainSize*4);
            a4.set(a, 0);

            const a1 = new BigBuffer(n8r*(zkey.domainSize + pz.length));
            a1.set(a, 0);
            for (let i= 0; i<pz.length; i++) {
                a1.set(
                    Fr.add(
                        a1.slice((zkey.domainSize+i)*n8r, (zkey.domainSize+i+1)*n8r),
                        pz[i]
                    ),
                    (zkey.domainSize+i)*n8r
                );
                a1.set(
                    Fr.sub(
                        a1.slice(i*n8r, (i+1)*n8r),
                        pz[i]
                    ),
                    i*n8r
                );
            }
            const A4 = await Fr.fft(a4);
            return [a1, A4];
        }


    }

    /*
        Copyright 2021 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const {unstringifyBigInts: unstringifyBigInts$2} = utils;

    async function plonkFullProve(_input, wasmFile, zkeyFileName, logger) {
        const input = unstringifyBigInts$2(_input);

        const wtns= {
            type: "mem"
        };
        await wtnsCalculate(input, wasmFile, wtns);
        return await plonk16Prove(zkeyFileName, wtns, logger);
    }

    /*
        Copyright 2021 0kims association.

        This file is part of snarkjs.

        snarkjs is a free software: you can redistribute it and/or
        modify it under the terms of the GNU General Public License as published by the
        Free Software Foundation, either version 3 of the License, or (at your option)
        any later version.

        snarkjs is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details.

        You should have received a copy of the GNU General Public License along with
        snarkjs. If not, see <https://www.gnu.org/licenses/>.
    */
    const {unstringifyBigInts: unstringifyBigInts$1} = utils;
    const { keccak256 } = sha3;


    async function plonkVerify(_vk_verifier, _publicSignals, _proof, logger) {
        let vk_verifier = unstringifyBigInts$1(_vk_verifier);
        let proof = unstringifyBigInts$1(_proof);
        let publicSignals = unstringifyBigInts$1(_publicSignals);

        const curve = await getCurveFromName(vk_verifier.curve);

        const Fr = curve.Fr;
        const G1 = curve.G1;

        proof = fromObjectProof(curve,proof);
        vk_verifier = fromObjectVk(curve, vk_verifier);
        if (!isWellConstructed(curve, proof)) {
            logger.error("Proof is not well constructed");
            return false;
        }
        if (publicSignals.length != vk_verifier.nPublic) {
            logger.error("Invalid number of public inputs");
            return false;
        }
        const challanges = calculateChallanges(curve, proof, publicSignals);
        if (logger) {
            logger.debug("beta: " + Fr.toString(challanges.beta, 16));    
            logger.debug("gamma: " + Fr.toString(challanges.gamma, 16));    
            logger.debug("alpha: " + Fr.toString(challanges.alpha, 16));    
            logger.debug("xi: " + Fr.toString(challanges.xi, 16));    
            logger.debug("v1: " + Fr.toString(challanges.v[1], 16));    
            logger.debug("v6: " + Fr.toString(challanges.v[6], 16));    
            logger.debug("u: " + Fr.toString(challanges.u, 16));    
        }
        const L = calculateLagrangeEvaluations(curve, challanges, vk_verifier);
        if (logger) {
            logger.debug("Lagrange Evaluations: ");
            for (let i=1; i<L.length; i++) {
                logger.debug(`L${i}(xi)=` + Fr.toString(L[i], 16));    
            }
        }
        
        if (publicSignals.length != vk_verifier.nPublic) {
            logger.error("Number of public signals does not match with vk");
            return false;
        }

        const pl = calculatePl(curve, publicSignals, L);
        if (logger) {
            logger.debug("Pl: " + Fr.toString(pl, 16));
        }

        const t = calculateT(curve, proof, challanges, pl, L[1]);
        if (logger) {
            logger.debug("t: " + Fr.toString(t, 16));
        }

        const D = calculateD(curve, proof, challanges, vk_verifier, L[1]);
        if (logger) {
            logger.debug("D: " + G1.toString(G1.toAffine(D), 16));
        }

        const F = calculateF(curve, proof, challanges, vk_verifier, D);
        if (logger) {
            logger.debug("F: " + G1.toString(G1.toAffine(F), 16));
        }

        const E = calculateE(curve, proof, challanges, vk_verifier, t);
        if (logger) {
            logger.debug("E: " + G1.toString(G1.toAffine(E), 16));
        }

        const res = await isValidPairing(curve, proof, challanges, vk_verifier, E, F);

        if (logger) {
            if (res) {
                logger.info("OK!");
            } else {
                logger.warn("Invalid Proof");
            }
        }

        return res;

    }


    function fromObjectProof(curve, proof) {
        const G1 = curve.G1;
        const Fr = curve.Fr;
        const res = {};
        res.A = G1.fromObject(proof.A);
        res.B = G1.fromObject(proof.B);
        res.C = G1.fromObject(proof.C);
        res.Z = G1.fromObject(proof.Z);
        res.T1 = G1.fromObject(proof.T1);
        res.T2 = G1.fromObject(proof.T2);
        res.T3 = G1.fromObject(proof.T3);
        res.eval_a = Fr.fromObject(proof.eval_a);
        res.eval_b = Fr.fromObject(proof.eval_b);
        res.eval_c = Fr.fromObject(proof.eval_c);
        res.eval_zw = Fr.fromObject(proof.eval_zw);
        res.eval_s1 = Fr.fromObject(proof.eval_s1);
        res.eval_s2 = Fr.fromObject(proof.eval_s2);
        res.eval_r = Fr.fromObject(proof.eval_r);
        res.Wxi = G1.fromObject(proof.Wxi);
        res.Wxiw = G1.fromObject(proof.Wxiw);
        return res;
    }

    function fromObjectVk(curve, vk) {
        const G1 = curve.G1;
        const G2 = curve.G2;
        const Fr = curve.Fr;
        const res = vk;
        res.Qm = G1.fromObject(vk.Qm);
        res.Ql = G1.fromObject(vk.Ql);
        res.Qr = G1.fromObject(vk.Qr);
        res.Qo = G1.fromObject(vk.Qo);
        res.Qc = G1.fromObject(vk.Qc);
        res.S1 = G1.fromObject(vk.S1);
        res.S2 = G1.fromObject(vk.S2);
        res.S3 = G1.fromObject(vk.S3);
        res.k1 = Fr.fromObject(vk.k1);
        res.k2 = Fr.fromObject(vk.k2);
        res.X_2 = G2.fromObject(vk.X_2);

        return res;
    }

    function isWellConstructed(curve, proof) {
        const G1 = curve.G1;
        if (!G1.isValid(proof.A)) return false;
        if (!G1.isValid(proof.B)) return false;
        if (!G1.isValid(proof.C)) return false;
        if (!G1.isValid(proof.Z)) return false;
        if (!G1.isValid(proof.T1)) return false;
        if (!G1.isValid(proof.T2)) return false;
        if (!G1.isValid(proof.T3)) return false;
        if (!G1.isValid(proof.Wxi)) return false;
        if (!G1.isValid(proof.Wxiw)) return false;
        return true;
    }

    function calculateChallanges(curve, proof, publicSignals) {
        const G1 = curve.G1;
        const Fr = curve.Fr;
        const n8r = curve.Fr.n8;
        const res = {};

        const transcript1 = new Uint8Array(publicSignals.length*n8r + G1.F.n8*2*3);
        for (let i=0; i<publicSignals.length; i++) {
            Fr.toRprBE(transcript1, i*n8r, Fr.e(publicSignals[i]));
        }
        G1.toRprUncompressed(transcript1, publicSignals.length*n8r + 0, proof.A);
        G1.toRprUncompressed(transcript1, publicSignals.length*n8r + G1.F.n8*2, proof.B);
        G1.toRprUncompressed(transcript1, publicSignals.length*n8r + G1.F.n8*4, proof.C);

        res.beta = hashToFr(curve, transcript1);

        const transcript2 = new Uint8Array(n8r);
        Fr.toRprBE(transcript2, 0, res.beta);
        res.gamma = hashToFr(curve, transcript2);

        const transcript3 = new Uint8Array(G1.F.n8*2);
        G1.toRprUncompressed(transcript3, 0, proof.Z);
        res.alpha = hashToFr(curve, transcript3);

        const transcript4 = new Uint8Array(G1.F.n8*2*3);
        G1.toRprUncompressed(transcript4, 0, proof.T1);
        G1.toRprUncompressed(transcript4, G1.F.n8*2, proof.T2);
        G1.toRprUncompressed(transcript4, G1.F.n8*4, proof.T3);
        res.xi = hashToFr(curve, transcript4);

        const transcript5 = new Uint8Array(n8r*7);
        Fr.toRprBE(transcript5, 0, proof.eval_a);
        Fr.toRprBE(transcript5, n8r, proof.eval_b);
        Fr.toRprBE(transcript5, n8r*2, proof.eval_c);
        Fr.toRprBE(transcript5, n8r*3, proof.eval_s1);
        Fr.toRprBE(transcript5, n8r*4, proof.eval_s2);
        Fr.toRprBE(transcript5, n8r*5, proof.eval_zw);
        Fr.toRprBE(transcript5, n8r*6, proof.eval_r);
        res.v = [];
        res.v[1] = hashToFr(curve, transcript5);

        for (let i=2; i<=6; i++ ) res.v[i] = Fr.mul(res.v[i-1], res.v[1]);

        const transcript6 = new Uint8Array(G1.F.n8*2*2);
        G1.toRprUncompressed(transcript6, 0, proof.Wxi);
        G1.toRprUncompressed(transcript6, G1.F.n8*2, proof.Wxiw);
        res.u = hashToFr(curve, transcript6);

        return res;
    }

    function calculateLagrangeEvaluations(curve, challanges, vk) {
        const Fr = curve.Fr;

        let xin = challanges.xi;
        let domainSize = 1;
        for (let i=0; i<vk.power; i++) {
            xin = Fr.square(xin);
            domainSize *= 2;
        }
        challanges.xin = xin;

        challanges.zh = Fr.sub(xin, Fr.one);
        const L = [];

        const n = Fr.e(domainSize);
        let w = Fr.one;
        for (let i=1; i<=Math.max(1, vk.nPublic); i++) {
            L[i] = Fr.div(Fr.mul(w, challanges.zh), Fr.mul(n, Fr.sub(challanges.xi, w)));
            w = Fr.mul(w, Fr.w[vk.power]);
        }

        return L;
    }

    function hashToFr(curve, transcript) {
        const v = Scalar.fromRprBE(new Uint8Array(keccak256.arrayBuffer(transcript)));
        return curve.Fr.e(v);
    }

    function calculatePl(curve, publicSignals, L) {
        const Fr = curve.Fr;

        let pl = Fr.zero;
        for (let i=0; i<publicSignals.length; i++) {
            const w = Fr.e(publicSignals[i]);
            pl = Fr.sub(pl, Fr.mul(w, L[i+1]));
        }
        return pl;
    }

    function calculateT(curve, proof, challanges, pl, l1) {
        const Fr = curve.Fr;
        let num = proof.eval_r;
        num = Fr.add(num, pl);

        let e1 = proof.eval_a;
        e1 = Fr.add(e1, Fr.mul(challanges.beta, proof.eval_s1));
        e1 = Fr.add(e1, challanges.gamma);

        let e2 = proof.eval_b;
        e2 = Fr.add(e2, Fr.mul(challanges.beta, proof.eval_s2));
        e2 = Fr.add(e2, challanges.gamma);

        let e3 = proof.eval_c;
        e3 = Fr.add(e3, challanges.gamma);

        let e = Fr.mul(Fr.mul(e1, e2), e3);
        e = Fr.mul(e, proof.eval_zw);
        e = Fr.mul(e, challanges.alpha);

        num = Fr.sub(num, e);

        num = Fr.sub(num, Fr.mul(l1, Fr.square(challanges.alpha)));

        const t = Fr.div(num, challanges.zh);

        return t;
    }

    function calculateD(curve, proof, challanges, vk, l1) {
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let s1 = Fr.mul(Fr.mul(proof.eval_a, proof.eval_b), challanges.v[1]);
        let res = G1.timesFr(vk.Qm, s1);

        let s2 = Fr.mul(proof.eval_a, challanges.v[1]);
        res = G1.add(res, G1.timesFr(vk.Ql, s2));

        let s3 = Fr.mul(proof.eval_b, challanges.v[1]);
        res = G1.add(res, G1.timesFr(vk.Qr, s3));

        let s4 = Fr.mul(proof.eval_c, challanges.v[1]);
        res = G1.add(res, G1.timesFr(vk.Qo, s4));

        res = G1.add(res, G1.timesFr(vk.Qc, challanges.v[1]));

        const betaxi = Fr.mul(challanges.beta, challanges.xi);
        let s6a = proof.eval_a;
        s6a = Fr.add(s6a, betaxi);
        s6a = Fr.add(s6a, challanges.gamma);

        let s6b = proof.eval_b;
        s6b = Fr.add(s6b, Fr.mul(betaxi, vk.k1));
        s6b = Fr.add(s6b, challanges.gamma);

        let s6c = proof.eval_c;
        s6c = Fr.add(s6c, Fr.mul(betaxi, vk.k2));
        s6c = Fr.add(s6c, challanges.gamma);

        let s6 = Fr.mul(Fr.mul(s6a, s6b), s6c);
        s6 = Fr.mul(s6, Fr.mul(challanges.alpha, challanges.v[1]));

        let s6d = Fr.mul(Fr.mul(l1, Fr.square(challanges.alpha)), challanges.v[1]);
        s6 = Fr.add(s6, s6d);

        s6 = Fr.add(s6, challanges.u);
        res = G1.add(res, G1.timesFr(proof.Z, s6));


        let s7a = proof.eval_a;
        s7a = Fr.add(s7a, Fr.mul(challanges.beta, proof.eval_s1));
        s7a = Fr.add(s7a, challanges.gamma);

        let s7b = proof.eval_b;
        s7b = Fr.add(s7b, Fr.mul(challanges.beta, proof.eval_s2));
        s7b = Fr.add(s7b, challanges.gamma);

        let s7 = Fr.mul(s7a, s7b);
        s7 = Fr.mul(s7, challanges.alpha);
        s7 = Fr.mul(s7, challanges.v[1]);
        s7 = Fr.mul(s7, challanges.beta);
        s7 = Fr.mul(s7, proof.eval_zw);
        res = G1.sub(res, G1.timesFr(vk.S3, s7));

        return res;
    }

    function calculateF(curve, proof, challanges, vk, D) {
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let res = proof.T1;

        res = G1.add(res, G1.timesFr(proof.T2, challanges.xin));
        res = G1.add(res, G1.timesFr(proof.T3, Fr.square(challanges.xin)));
        res = G1.add(res, D);
        res = G1.add(res, G1.timesFr(proof.A, challanges.v[2]));
        res = G1.add(res, G1.timesFr(proof.B, challanges.v[3]));
        res = G1.add(res, G1.timesFr(proof.C, challanges.v[4]));
        res = G1.add(res, G1.timesFr(vk.S1, challanges.v[5]));
        res = G1.add(res, G1.timesFr(vk.S2, challanges.v[6]));

        return res;
    }


    function calculateE(curve, proof, challanges, vk, t) {
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let s = t;

        s = Fr.add(s, Fr.mul(challanges.v[1], proof.eval_r));
        s = Fr.add(s, Fr.mul(challanges.v[2], proof.eval_a));
        s = Fr.add(s, Fr.mul(challanges.v[3], proof.eval_b));
        s = Fr.add(s, Fr.mul(challanges.v[4], proof.eval_c));
        s = Fr.add(s, Fr.mul(challanges.v[5], proof.eval_s1));
        s = Fr.add(s, Fr.mul(challanges.v[6], proof.eval_s2));
        s = Fr.add(s, Fr.mul(challanges.u, proof.eval_zw));

        const res = G1.timesFr(G1.one, s);

        return res;
    }

    async function isValidPairing(curve, proof, challanges, vk, E, F) {
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let A1 = proof.Wxi;
        A1 = G1.add(A1, G1.timesFr(proof.Wxiw, challanges.u));

        let B1 = G1.timesFr(proof.Wxi, challanges.xi);
        const s = Fr.mul(Fr.mul(challanges.u, challanges.xi), Fr.w[vk.power]);
        B1 = G1.add(B1, G1.timesFr(proof.Wxiw, s));
        B1 = G1.add(B1, F);
        B1 = G1.sub(B1, E);

        const res = await curve.pairingEq(
            G1.neg(A1) , vk.X_2,
            B1 , curve.G2.one
        );

        return res;

    }

    /*
        Copyright 2021 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */
    const { unstringifyBigInts} = utils;

    function i2hex(i) {
        return ("0" + i.toString(16)).slice(-2);
    }

    function p256(n) {
        let nstr = n.toString(16);
        while (nstr.length < 64) nstr = "0"+nstr;
        nstr = `"0x${nstr}"`;
        return nstr;
    }

    async function plonkExportSolidityCallData(_proof, _pub) {
        const pub = unstringifyBigInts(_proof);
        const proof = unstringifyBigInts(_pub);

        const curve = await getCurveFromName(proof.curve);
        const G1 = curve.G1;
        const Fr = curve.Fr;

        let inputs = "";
        for (let i=0; i<pub.length; i++) {
            if (inputs != "") inputs = inputs + ",";
            inputs = inputs + p256(pub[i]);
        }

        const proofBuff = new Uint8Array(G1.F.n8*2*9 + Fr.n8*7);
        G1.toRprUncompressed(proofBuff, 0, G1.e(proof.A));
        G1.toRprUncompressed(proofBuff, G1.F.n8*2, G1.e(proof.B));
        G1.toRprUncompressed(proofBuff, G1.F.n8*4, G1.e(proof.C));
        G1.toRprUncompressed(proofBuff, G1.F.n8*6, G1.e(proof.Z));
        G1.toRprUncompressed(proofBuff, G1.F.n8*8, G1.e(proof.T1));
        G1.toRprUncompressed(proofBuff, G1.F.n8*10, G1.e(proof.T2));
        G1.toRprUncompressed(proofBuff, G1.F.n8*12, G1.e(proof.T3));
        G1.toRprUncompressed(proofBuff, G1.F.n8*14, G1.e(proof.Wxi));
        G1.toRprUncompressed(proofBuff, G1.F.n8*16, G1.e(proof.Wxiw));
        Fr.toRprBE(proofBuff, G1.F.n8*18 , Fr.e(proof.eval_a));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8, Fr.e(proof.eval_b));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*2, Fr.e(proof.eval_c));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*3, Fr.e(proof.eval_s1));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*4, Fr.e(proof.eval_s2));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*5, Fr.e(proof.eval_zw));
        Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*6, Fr.e(proof.eval_r));

        const proofHex = Array.from(proofBuff).map(i2hex).join("");

        const S="0x"+proofHex+",["+inputs+"]";

        return S;
    }

    /*
        Copyright 2018 0KIMS association.

        This file is part of snarkJS.

        snarkJS is a free software: you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        snarkJS is distributed in the hope that it will be useful, but WITHOUT
        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
        License for more details.

        You should have received a copy of the GNU General Public License
        along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
    */

    var plonk = /*#__PURE__*/Object.freeze({
        __proto__: null,
        setup: plonkSetup,
        fullProve: plonkFullProve,
        prove: plonk16Prove,
        verify: plonkVerify,
        exportSolidityCallData: plonkExportSolidityCallData
    });

    exports.groth16 = groth16;
    exports.plonk = plonk;
    exports.powersOfTau = powersoftau;
    exports.r1cs = r1cs;
    exports.wtns = wtns;
    exports.zKey = zkey;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
